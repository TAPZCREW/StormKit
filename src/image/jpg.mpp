// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <cstddef>
#include <cstdio>
#include <cstdlib>

#include <errno.h>

#include <csetjmp>
#include <jerror.h>
#include <jpeglib.h>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.image:jpg;

import std;

import stormkit.core;
import stormkit.image;

namespace stdr = std::ranges;

export namespace stormkit::image::details {
    [[nodiscard]]
    auto load_jpg(std::span<const Byte> data) noexcept
      -> std::expected<image::Image, image::Image::Error>;

    [[nodiscard]]
    auto save_jpg(const image::Image& image, const std::filesystem::path& filepath) noexcept
      -> std::expected<void, image::Image::Error>;

    [[nodiscard]]
    auto save_jpg(const image::Image& image) noexcept
      -> std::expected<std::vector<Byte>, image::Image::Error>;
} // namespace stormkit::image::details

namespace stormkit::image::details {
    template<class E>
    using Unexpected = std::unexpected<E>;
    using Error      = image::Image::Error;
    using Reason     = image::Image::Error::Reason;
    using Format     = image::Image::Format;

    namespace jpg {
        struct ErrorData {
            std::jmp_buf setjmp_buffer;
            std::string  msg;
        };

        /////////////////////////////////////
        /////////////////////////////////////
        auto error_callback(jpeg_common_struct* st) noexcept -> void {
            EXPECTS(st != nullptr);

            auto error_data = reinterpret_cast<ErrorData*>(st->client_data);

            auto message = std::string {};
            message.resize(JMSG_STR_PARM_MAX);
            (*st->err->format_message)(st, stdr::data(message));

            error_data->msg = message;

            std::longjmp(error_data->setjmp_buffer, 1);
        }
    } // namespace jpg

    /////////////////////////////////////
    /////////////////////////////////////
    auto load_jpg(std::span<const Byte> data) noexcept
      -> std::expected<image::Image, image::Image::Error> {
        auto          image_memory = std::vector<Byte> {};
        volatile auto format = Format {}; // NOTE volatile for error: variable ‘format’ might be
                                          // clobbered by ‘longjmp’ or ‘vfork’ [-Werror=clobbered]
        auto extent    = math::Extent3<u32> {};
        auto info      = jpeg_decompress_struct {};
        auto error_mgr = jpeg_error_mgr {};

        auto error_data = jpg::ErrorData {};

        info.err             = jpeg_std_error(&error_mgr);
        info.client_data     = &error_data;
        error_mgr.error_exit = jpg::error_callback;

        jpeg_create_decompress(&info);
        if (setjmp(error_data.setjmp_buffer)) {
            return std::unexpected(Error { .reason    = Reason::FAILED_TO_PARSE,
                                           .str_error = error_data.msg });
        }

        jpeg_mem_src(&info,
                     reinterpret_cast<const unsigned char*>(stdr::data(data)),
                     as<u32>(stdr::size(data)));
        jpeg_read_header(&info, TRUE);

        jpeg_start_decompress(&info);
        extent.width  = info.output_width;
        extent.height = info.output_height;
        extent.depth  = 1;
        if (info.output_components == 1) format = Format::R8_UNORM;
        if (info.output_components == 2) format = Format::RG8_UNORM;
        if (info.output_components == 3) format = Format::RGB8_UNORM;

        image_memory.resize(as<usize>(extent.width
                                      * extent.height
                                      * extent.depth
                                      * as<u32>(info.out_color_components)));

        auto row_ptr = std::array<Byte*, 1> { nullptr };
        while (info.output_scanline < info.output_height) {
            const auto index = as<isize>(extent.width
                                         * as<u32>(info.output_components)
                                         * info.output_scanline);
            row_ptr[0]       = stdr::data(image_memory) + index;
            jpeg_read_scanlines(&info,
                                reinterpret_cast<JSAMPARRAY>(stdr::data(row_ptr)),
                                as<JDIMENSION>(stdr::size(row_ptr)));
        }

        jpeg_finish_decompress(&info);
        jpeg_destroy_decompress(&info);

        if (setjmp(error_data.setjmp_buffer)) {
            jpeg_destroy_decompress(&info);
            return std::unexpected(Error { .reason    = Reason::FAILED_TO_PARSE,
                                           .str_error = error_data.msg });
        }

        auto image_data = image::Image::ImageData {};

        image_data.extent            = extent;
        image_data.channel_count     = get_format_channel_count(format);
        image_data.bytes_per_channel = 1u;
        image_data.mip_levels        = 1u;
        image_data.faces             = 1u;
        image_data.layers            = 1u;
        image_data.data              = std::move(image_memory);
        image_data.format            = format;

        return Image { std::move(image_data) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto save_jpg(const image::Image& image, const std::filesystem::path& filepath) noexcept
      -> std::expected<void, image::Image::Error> {
        auto _filename = filepath;

        auto image_rgb = image.convert_to(Format::RGB8_UNORM);

        auto info      = jpeg_compress_struct {};
        auto error_mgr = jpeg_error_mgr {};

        auto error_data = jpg::ErrorData {};

        info.err             = jpeg_std_error(&error_mgr);
        info.client_data     = &error_data;
        error_mgr.error_exit = jpg::error_callback;

        for (auto i : range(image_rgb.mip_levels())) {
            if (i >= 1u) _filename += to_native_encoding(std::format("_mip{}", i));

            auto file = std::fopen(_filename.string().c_str(), "wb");
            if (file == nullptr) {
                auto error = std::string { 95 };
                error      = std::strerror(errno);
                error.shrink_to_fit();

                return std::unexpected(Error { .reason    = Reason::FAILED_TO_SAVE,
                                               .str_error = error_data.msg });
            }

            auto        data   = image_rgb.data(0, 0, 0);
            const auto& extent = image_rgb.extent(0);

            jpeg_create_compress(&info);
            jpeg_stdio_dest(&info, file);

            info.image_width      = extent.width;
            info.image_height     = extent.height;
            info.input_components = get_format_channel_count(Format::RGB8_UNORM);
            info.in_color_space   = JCS_RGB;
            jpeg_set_defaults(&info);
            jpeg_set_quality(&info, 75, TRUE);

            jpeg_start_compress(&info, TRUE);

            auto row_ptr = std::array<Byte*, 1> { nullptr };
            while (info.next_scanline < info.image_height) {
                const auto index = info.next_scanline * 3u * info.image_width;
                row_ptr[0]       = stdr::data(data) + index;

                jpeg_write_scanlines(&info, reinterpret_cast<JSAMPARRAY>(stdr::data(row_ptr)), 1);
            }

            jpeg_finish_compress(&info);
            jpeg_destroy_compress(&info);

            std::fflush(file);
            std::fclose(file);
        }

        if (setjmp(error_data.setjmp_buffer)) {
            jpeg_destroy_compress(&info);
            return std::unexpected(Error { .reason    = Reason::FAILED_TO_SAVE,
                                           .str_error = error_data.msg });
        }

        return {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto save_jpg(const image::Image& image) noexcept
      -> std::expected<std::vector<Byte>, image::Image::Error> {
        using uchar_ptr = unsigned char*;

        auto output_ptr = uchar_ptr { nullptr };

        auto image_rgb = image.convert_to(Format::RGB8_UNORM);

        auto info      = jpeg_compress_struct {};
        auto error_mgr = jpeg_error_mgr {};

        auto error_data = jpg::ErrorData {};

        info.err             = jpeg_std_error(&error_mgr);
        info.client_data     = &error_data;
        error_mgr.error_exit = jpg::error_callback;

        auto        data   = image_rgb.data(0, 0, 0);
        const auto& extent = image_rgb.extent(0);

        jpeg_create_compress(&info);

        using ulong   = unsigned long;
        auto out_size = ulong { 0 };
        jpeg_mem_dest(&info, &output_ptr, &out_size);

        info.image_width      = extent.width;
        info.image_height     = extent.height;
        info.input_components = get_format_channel_count(Format::RGB8_UNORM);
        info.in_color_space   = JCS_RGB;
        jpeg_set_defaults(&info);
        jpeg_set_quality(&info, 75, TRUE);

        jpeg_start_compress(&info, TRUE);

        auto row_ptr = std::array<Byte*, 1> { nullptr };
        while (info.next_scanline < info.image_height) {
            const auto index = info.next_scanline * 3u * info.image_width;
            row_ptr[0]       = stdr::data(data) + index;

            jpeg_write_scanlines(&info, reinterpret_cast<JSAMPARRAY>(stdr::data(row_ptr)), 1);
        }

        jpeg_finish_compress(&info);
        jpeg_destroy_compress(&info);

        if (setjmp(error_data.setjmp_buffer)) {
            jpeg_destroy_compress(&info);
            return std::unexpected(Error { .reason    = Reason::FAILED_TO_SAVE,
                                           .str_error = error_data.msg });
        }

        auto output = std::vector<Byte> {};
        output.reserve((out_size));

        std::ranges::copy(as_bytes(output_ptr, out_size), std::back_inserter(output));
        if (output_ptr != nullptr) std::free(output_ptr);

        return output;
    }
} // namespace stormkit::image::details
