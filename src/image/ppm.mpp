// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/contract_macro.hpp>

export module stormkit.image:ppm;

import std;

import stormkit.core;
import stormkit.image;

export namespace stormkit::image::details {
    [[nodiscard]]
    auto load_ppm(std::span<const Byte> data) noexcept
      -> std::expected<image::Image, image::Image::Error>;

    [[nodiscard]]
    auto save_ppm(const image::Image&          image,
                  image::Image::CodecArgs      args,
                  const std::filesystem::path& filepath) noexcept
      -> std::expected<void, image::Image::Error>;

    [[nodiscard]]
    auto save_ppm(const image::Image& image, image::Image::CodecArgs args) noexcept
      -> std::expected<std::vector<Byte>, image::Image::Error>;
} // namespace stormkit::image::details

using namespace std::literals;

namespace stormkit::image::details {
    template<class E>
    using Unexpected = std::unexpected<E>;
    using Error      = image::Image::Error;
    using Reason     = image::Image::Error::Reason;
    using Format     = image::Image::Format;

    /////////////////////////////////////
    /////////////////////////////////////
    auto load_ppm(std::span<const Byte>) noexcept
      -> std::expected<image::Image, image::Image::Error> {
        return std::unexpected(Error { .reason    = Reason::NOT_IMPLEMENTED,
                                       .str_error = "loader from memory" });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto save_ppm(const image::Image&          image,
                  image::Image::CodecArgs      args,
                  const std::filesystem::path& filepath) noexcept
      -> std::expected<void, image::Image::Error> {
        auto result = save_ppm(image, args);

        if (!result) return std::unexpected(result.error());

        auto stream = std::ofstream {};

        if (args == image::Image::CodecArgs::ASCII) stream.open(filepath);
        else
            stream.open(filepath, std::ios::binary);

        io::write(stream, *result);

        return {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto save_ppm(const image::Image& image, image::Image::CodecArgs args) noexcept
      -> std::expected<std::vector<Byte>, image::Image::Error> {
        const auto  output_image = image.convert_to(Format::RGB8_UNORM);
        const auto& data         = output_image.image_data();

        auto output = std::vector<Byte> {};
        if (args == image::Image::CodecArgs::ASCII) {
            auto result = std::format("P3\n{}\n{}\n255\n"sv, data.extent.width, data.extent.height);

            const auto& extent = output_image.extent();
            for (auto [i, j] : multi_range(extent.height, extent.width)) {
                const auto pixel = output_image.pixel(i * output_image.extent().width + j);

                result += std::format("{} {} {}\n"sv,
                                      as<u16>(pixel[0]),
                                      as<u16>(pixel[1]),
                                      as<u16>(pixel[2]));

                if (j == extent.width) result += '\n';
            }

            output.reserve(std::size(result));
            std::ranges::copy(as_bytes(result), std::back_inserter(output));
        } else if (args == image::Image::CodecArgs::BINARY) {
            auto header = std::format("P3\n{}\n{}\n255\n"sv, data.extent.width, data.extent.height);
            output.reserve(std::size(output) + std::size(output_image));

            std::ranges::copy(as_bytes(header), std::back_inserter(output));
            std::ranges::copy(output_image, std::back_inserter(output));
        }

        return output;
    }
} // namespace stormkit::image::details
