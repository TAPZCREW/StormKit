// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <glm/glm.hpp>

#include <glm/gtc/quaternion.hpp>
#include <glm/integer.hpp>

export module stormkit.Image:KTXImage;

import std;

import stormkit.core;
import stormkit.Image;

export namespace stormkit::image::details {
    [[nodiscard]] auto loadKTX(std::span<const Byte> data) noexcept
        -> std::expected<image::Image, image::Image::Error>;

    [[nodiscard]] auto saveKTX(const image::Image&          image,
                               const std::filesystem::path& filepath) noexcept
        -> std::expected<void, image::Image::Error>;

    [[nodiscard]] auto saveKTX(const image::Image& image) noexcept
        -> std::expected<std::vector<Byte>, image::Image::Error>;
} // namespace stormkit::image::details

namespace stormkit::image::details {
    template<class E>
    using Unexpected = std::unexpected<E>;
    using Error      = image::Image::Error;
    using Reason     = image::Image::Error::Reason;
    using Format     = image::Image::Format;

    /////////////////////////////////////
    /////////////////////////////////////
    /*constexpr auto toStormFormat(gli::format format) noexcept {*/
    /*switch (format) {*/
    /*    case gli::format_R8_SNORM_PACK8: return Format::R8_SNorm;*/
    /*    case gli::format_R8_UNORM_PACK8: return Format::R8_UNorm;*/
    /*    case gli::format_R16_SNORM_PACK16: return Format::R16_SNorm;*/
    /*    case gli::format_R16_UNORM_PACK16: return Format::R16_UNorm;*/
    /*    case gli::format_R8_SINT_PACK8: return Format::R8I;*/
    /*    case gli::format_R8_UINT_PACK8: return Format::R8U;*/
    /*    case gli::format_R16_SINT_PACK16: return Format::R16I;*/
    /*    case gli::format_R16_UINT_PACK16: return Format::R16U;*/
    /*    case gli::format_R32_SINT_PACK32: return Format::R32I;*/
    /*    case gli::format_R32_UINT_PACK32: return Format::R32U;*/
    /*    case gli::format_R16_SFLOAT_PACK16: return Format::R16F;*/
    /*    case gli::format_R32_SFLOAT_PACK32: return Format::R32F;*/
    /**/
    /*    case gli::format_RG8_SNORM_PACK8: return Format::RG8_SNorm;*/
    /*    case gli::format_RG8_UNORM_PACK8: return Format::RG8_UNorm;*/
    /*    case gli::format_RG16_SNORM_PACK16: return Format::RG16_SNorm;*/
    /*    case gli::format_RG16_UNORM_PACK16: return Format::RG16_UNorm;*/
    /*    case gli::format_RG8_SINT_PACK8: return Format::RG8I;*/
    /*    case gli::format_RG8_UINT_PACK8: return Format::RG8U;*/
    /*    case gli::format_RG16_SINT_PACK16: return Format::RG16I;*/
    /*    case gli::format_RG16_UINT_PACK16: return Format::RG16U;*/
    /*    case gli::format_RG32_SINT_PACK32: return Format::RG32I;*/
    /*    case gli::format_RG32_UINT_PACK32: return Format::RG32U;*/
    /*    case gli::format_RG16_SFLOAT_PACK16: return Format::RG16F;*/
    /*    case gli::format_RG32_SFLOAT_PACK32: return Format::RG32F;*/
    /**/
    /*    case gli::format_RGB8_SNORM_PACK8: return Format::RGB8_SNorm;*/
    /*    case gli::format_RGB8_UNORM_PACK8: return Format::RGB8_UNorm;*/
    /*    case gli::format_RGB16_SNORM_PACK16: return Format::RGB16_SNorm;*/
    /*    case gli::format_RGB16_UNORM_PACK16: return Format::RGB16_UNorm;*/
    /*    case gli::format_BGR8_UNORM_PACK8: return Format::RGB16_UNorm;*/
    /*    case gli::format_RGB8_SINT_PACK8: return Format::RGB8I;*/
    /*    case gli::format_RGB8_UINT_PACK8: return Format::RGB8U;*/
    /*    case gli::format_RGB16_SINT_PACK16: return Format::RGB16I;*/
    /*    case gli::format_RGB16_UINT_PACK16: return Format::RGB16U;*/
    /*    case gli::format_RGB32_SINT_PACK32: return Format::RGB32I;*/
    /*    case gli::format_RGB32_UINT_PACK32: return Format::RGB32U;*/
    /*    case gli::format_RGB16_SFLOAT_PACK16: return Format::RGB16F;*/
    /*    case gli::format_RGB32_SFLOAT_PACK32: return Format::RGB32F;*/
    /*    case gli::format_RGB8_SRGB_PACK8: return Format::sRGB8;*/
    /*    case gli::format_BGR8_SRGB_PACK8: return Format::sBGR8;*/
    /**/
    /*    case gli::format_RGBA8_SNORM_PACK8: return Format::RGBA8_SNorm;*/
    /*    case gli::format_RGBA8_UNORM_PACK8: return Format::RGBA8_UNorm;*/
    /*    case gli::format_RGBA16_SNORM_PACK16: return Format::RGBA16_SNorm;*/
    /*    case gli::format_RGBA16_UNORM_PACK16: return Format::RGBA16_UNorm;*/
    /*    case gli::format_BGRA8_UNORM_PACK8: return Format::RGBA16_UNorm;*/
    /*    case gli::format_RGBA8_SINT_PACK8: return Format::RGBA8I;*/
    /*    case gli::format_RGBA8_UINT_PACK8: return Format::RGBA8U;*/
    /*    case gli::format_RGBA16_SINT_PACK16: return Format::RGBA16I;*/
    /*    case gli::format_RGBA16_UINT_PACK16: return Format::RGBA16U;*/
    /*    case gli::format_RGBA32_SINT_PACK32: return Format::RGBA32I;*/
    /*    case gli::format_RGBA32_UINT_PACK32: return Format::RGBA32U;*/
    /*    case gli::format_RGBA16_SFLOAT_PACK16: return Format::RGBA16F;*/
    /*    case gli::format_RGBA32_SFLOAT_PACK32: return Format::RGBA32F;*/
    /*    case gli::format_RGBA8_SRGB_PACK8: return Format::sRGBA8;*/
    /*    case gli::format_BGRA8_SRGB_PACK8: return Format::sBGRA8;*/
    /*    default: break;*/
    /*}*/
    /**/
    /*    return Format::Undefined;*/
    /*}*/

    /////////////////////////////////////
    /////////////////////////////////////
    auto loadKTX([[maybe_unused]] std::span<const Byte> data) noexcept
        -> std::expected<image::Image, image::Image::Error> {
        /*auto image = gli::load_ktx(reinterpret_cast<const char*>(std::data(data)),
         * std::size(data));*/
        /**/
        /*const auto faces      = as<UInt32>(image.faces());*/
        /*const auto layers     = as<UInt32>(image.layers());*/
        /*const auto mip_levels = as<UInt32>(image.levels());*/
        /*const auto format     = toStormFormat(image.format());*/
        /**/
        /*if (format == Format::Undefined)*/
        /*    return std::unexpected(Error { .reason    = Reason::Failed_To_Parse,*/
        /*                                   .str_error = "Unsupported pixel format" });*/
        /**/
        /*auto image_memory = std::vector<Byte> {};*/
        /*image_memory.resize(image.size());*/
        /**/
        /*std::ranges::copy(as_bytes(image.data(), image.size()), std::begin(image_memory));*/
        /**/
        /*auto image_data = image::Image::ImageData {};*/
        /**/
        /*image_data.extent = math::ExtentI { image.extent().x, image.extent().y, image.extent().z
         * };*/
        /*image_data.channel_count     = getChannelCountFor(format);*/
        /*image_data.bytes_per_channel = getSizeof(format);*/
        /*image_data.mip_levels        = mip_levels;*/
        /*image_data.faces             = faces;*/
        /*image_data.layers            = layers;*/
        /*image_data.data              = std::move(image_memory);*/
        /*image_data.format            = format;*/
        /**/
        /*return Image { std::move(image_data) };*/
        return std::unexpected(
            Error { .reason = Reason::Not_Implemented, .str_error = "load to memory" });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto saveKTX(const image::Image& image, const std::filesystem::path& filepath) noexcept
        -> std::expected<void, image::Image::Error> {
        auto result = saveKTX(image);

        if (!result) return std::unexpected(result.error());

        auto& output = *result;

        auto stream = std::ofstream { filepath, std::ios::binary };
        write(stream, as_bytes(output));

        return {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto saveKTX([[maybe_unused]] const image::Image& image) noexcept
        -> std::expected<std::vector<Byte>, image::Image::Error> {
        return std::unexpected(
            Error { .reason = Reason::Not_Implemented, .str_error = "save to memory" });
    }
} // namespace stormkit::image::details
