// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <xcb/xcb.h>
#include <xcb/xcb_atom.h>
#include <xcb/xcb_errors.h>
#include <xcb/xcb_keysyms.h>
#include <xcb/xinput.h>

#include <stormkit/Core/MemoryMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Wsi:Linux.X11.XCB;

import std;

import stormkit.core;

import :Linux.X11.Log;

export namespace stormkit::wsi::linux::x11 {
    struct Error {
        std::string message;
    };

    auto getXCBConnection() noexcept -> Ref<xcb_connection_t>;
    auto getXCBAtom(std::string_view name, bool only_if_exists) noexcept
        -> std::expected<xcb_atom_t, Error>;
    auto getXCBAtomName(xcb_atom_t atom) -> std::expected<std::string, Error>;

    auto getXCBErrorContext() noexcept -> Ref<xcb_errors_context_t>;
    auto getXCBError(Ref<xcb_generic_error_t> error) -> std::string;

    auto getXIDeviceInfo(xcb_input_device_id_t device_id)
        -> std::expected<Ref<xcb_input_xi_device_info_t>, Error>;
} // namespace stormkit::wsi::linux::x11

namespace stormkit::wsi::linux::x11 {
    STORMKIT_RAII_CAPSULE(XCBConnection, xcb_connection_t, xcb_disconnect)
    STORMKIT_RAII_CAPSULE(XCBErrorContext, xcb_errors_context_t, xcb_errors_context_free)
    STORMKIT_RAII_CAPSULE(XCBGenericError, xcb_generic_error_t, std::free)
    STORMKIT_RAII_CAPSULE(XCBInternAtomReply, xcb_intern_atom_reply_t, std::free)
    STORMKIT_RAII_CAPSULE(XCBGetAtomReply, xcb_get_atom_name_reply_t, std::free)
    STORMKIT_RAII_CAPSULE(XCBInputXiQueryDeviceReply, xcb_input_xi_query_device_reply_t, std::free)

    using XCBGenericErrorPtr = xcb_generic_error_t*;

    namespace {
        constinit auto xcb_connection    = XCBConnectionScoped {};
        constinit auto xcb_error_context = XCBErrorContextScoped {};

        auto xcb_atoms = stormkit::StringHashMap<xcb_atom_t> {};
    } // namespace

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto getXCBConnection() noexcept -> Ref<xcb_connection_t> {
        if (!xcb_connection) [[unlikely]] {
            xcb_connection.reset(xcb_connect(nullptr, nullptr));
            dlog("New xcb connection {}", std::bit_cast<void*>(xcb_connection.get()));
        }

        ensures(xcb_connection != nullptr and not xcb_connection_has_error(xcb_connection.get()),
                "Failed to connect to X server");

        return as_ref_mut(xcb_connection);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto getXCBAtom(std::string_view name, bool only_if_exists) noexcept
        -> std::expected<xcb_atom_t, Error> {
        auto it = xcb_atoms.find(name);

        if (it != std::ranges::end(xcb_atoms)) return it->second;

        const auto connection = getXCBConnection();

        const auto cookie = xcb_intern_atom(connection,
                                            (only_if_exists) ? 1 : 0,
                                            std::ranges::size(name),
                                            std::ranges::data(name));
        auto       error  = XCBGenericErrorPtr { nullptr };
        const auto reply
            = XCBInternAtomReplyScoped { xcb_intern_atom_reply(connection.get(), cookie, &error) };

        if (error || !reply)
            return std::unexpected { Error { (error) ? getXCBError(as_ref_mut(error))
                                                     : std::string { " " } } };

        auto atom = reply->atom;
        xcb_atoms.emplace(name, atom);

        return atom;
    }

    STORMKIT_INLINE auto getXCBAtomName(xcb_atom_t atom) -> std::expected<std::string, Error> {
        const auto connection = getXCBConnection();

        const auto cookie = xcb_get_atom_name(connection, atom);
        auto       error  = XCBGenericErrorPtr { nullptr };
        const auto reply
            = XCBGetAtomReplyScoped { xcb_get_atom_name_reply(connection, cookie, &error) };

        if (error) return std::unexpected { Error { getXCBError(as_ref_mut(error)) } };

        return std::string { xcb_get_atom_name_name(reply.get()),
                             as<RangeExtent>(xcb_get_atom_name_name_length(reply.get())) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto getXCBErrorContext() noexcept -> Ref<xcb_errors_context_t> {
        if (!xcb_error_context) [[unlikely]] {
            using XCBErrorCtxPtr = xcb_errors_context_t*;
            auto ctx             = XCBErrorCtxPtr { nullptr };
            xcb_errors_context_new(getXCBConnection(), &ctx);
            xcb_error_context.reset(ctx);
            dlog("New xcb error context {}", std::bit_cast<void*>(ctx));
        }

        ensures(xcb_error_context != nullptr, "Failed to allocate XCB errors context");
        return as_ref_mut(xcb_error_context);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto getXCBError(Ref<xcb_generic_error_t> error) -> std::string {
        expects(error);

        auto guard = XCBGenericErrorScoped { error };

        auto ctx = getXCBErrorContext();

        const auto major = xcb_errors_get_name_for_major_code(ctx, error->major_code);
        const auto minor
            = xcb_errors_get_name_for_minor_code(ctx, error->major_code, error->minor_code);

        const auto* extension = CZString { nullptr };
        const auto  str_error = xcb_errors_get_name_for_error(ctx, error->major_code, &extension);

        return std::format("{} extension: {} major: {} minor: {}\n",
                           str_error,
                           (extension) ? extension : " ",
                           major,
                           (minor) ? minor : " ");
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto getXIDeviceInfo(xcb_input_device_id_t device_id)
        -> std::expected<Ref<xcb_input_xi_device_info_t>, Error> {
        auto connection = getXCBConnection();

        auto error  = XCBGenericErrorPtr {};
        auto cookie = xcb_input_xi_query_device(connection, device_id);
        auto reply  = XCBInputXiQueryDeviceReplyScoped {
            xcb_input_xi_query_device_reply(connection, cookie, &error)
        };

        if (error) return std::unexpected { Error { getXCBError(as_ref_mut(error)) } };

        auto device_info_it = xcb_input_xi_query_device_infos_iterator(reply.get());
        for (; device_info_it.rem; xcb_input_xi_device_info_next(&device_info_it)) {
            auto info = device_info_it.data;

            if (info->deviceid == device_id) return as_ref_mut(info);
        }

        return std::unexpected { Error { "Device ID not found" } };
    }
} // namespace stormkit::wsi::linux::x11
