// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <pointer-constraints-unstable-v1.h>
#include <relative-pointer-unstable-v1.h>
#include <wayland-client.h>
#include <xdg-decoration-unstable-v1.h>
#include <xdg-shell.h>

export module stormkit.Wsi:Linux.Wayland.Callbacks;

import std;

import stormkit.core;

import :Linux.Wayland.Log;

namespace stormkit::wsi::linux::wayland {
    /////////////////////////////////////
    /////////////////////////////////////
    auto registryHandler(void*        data,
                         wl_registry* registry,
                         UInt32       id,
                         const char*  interface,
                         UInt32       version) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto registryRemoverHandler(void* data, wl_registry* registry, UInt32 id) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surfaceEnterHandler(void* data, wl_surface* surface, wl_output* output) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surfaceLeaveHandler(void* data, wl_surface* surface, wl_output* output) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto toplevelConfigureHandler(void*         data,
                                  xdg_toplevel* xdg_tl,
                                  Int32         width,
                                  Int32         height,
                                  wl_array*     states) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto toplevelCloseHandler(void* data, xdg_toplevel* xdg_tl) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surfaceConfigureHandler(void* data, xdg_surface* surface, UInt32 serial) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto shellPingHandler(void* data, xdg_wm_base* xdg_shell, UInt32 serial) noexcept -> void;

    auto shellSurfaceConfigureHandler(void*             data,
                                      wl_shell_surface* shell_surface,
                                      UInt32            edges,
                                      Int32             width,
                                      Int32             height) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto shellPingHandler(void* data, wl_shell_surface* shell_surface, UInt32 serial) noexcept
        -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto relativePointerRelativeMotionHandler(void*                    data,
                                              zwp_relative_pointer_v1* pointer,
                                              UInt32                   time_hi,
                                              UInt32                   time_lw,
                                              wl_fixed_t               dx,
                                              wl_fixed_t               dy,
                                              wl_fixed_t               dx_unaccel,
                                              wl_fixed_t               dy_unaccel) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto lockedPointerLockedHandler(void* data, zwp_locked_pointer_v1* locked_pointer) noexcept
        -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto lockedPointerUnlockedHandler(void* data, zwp_locked_pointer_v1* locked_pointer) noexcept
        -> void;
} // namespace stormkit::wsi::linux::wayland

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////
