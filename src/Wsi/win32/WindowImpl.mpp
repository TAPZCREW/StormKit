// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <windows.h>

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Wsi:Win32.WindowImpl;

import std;

import stormkit.core;
import stormkit.Wsi;

import :Common.WindowImplBase;
import :Win32.utils;

export namespace stormkit::wsi::win32 {
    class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
      public:
        WindowImpl(WM wm);
        WindowImpl(WM wm, std::string title, const math::ExtentU& size, WindowStyle style);
        ~WindowImpl();

        WindowImpl(const WindowImpl&) noexcept;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl&;

        WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const math::ExtentU& size, WindowStyle style) -> void;
        auto close() noexcept -> void;

        [[nodiscard]] auto pollEvent(Event& event) noexcept -> bool;
        [[nodiscard]] auto waitEvent(Event& event) noexcept -> bool;

        auto setTitle(std::string title) noexcept -> void;

        auto setExtent(const math::ExtentU& extent) noexcept -> void;

        auto setFullscreenEnabled(bool enabled) noexcept -> void;

        auto lockMouse() noexcept -> void;
        auto unlockMouse() noexcept -> void;

        auto hideMouse() noexcept -> void;
        auto unhideMouse() noexcept -> void;

        [[nodiscard]] auto extent() const noexcept -> const math::ExtentU&;
        [[nodiscard]] auto title() const noexcept -> const std::string&;

        [[nodiscard]] auto isOpen() const noexcept -> bool;
        [[nodiscard]] auto visible() const noexcept -> bool;

        [[nodiscard]] auto nativeHandle() const noexcept -> NativeHandle;
        [[nodiscard]] auto win32Handles() const noexcept -> HWND;

        [[nodiscard]] auto mouseLocked() const noexcept -> bool;
        [[nodiscard]] auto mouseHided() const noexcept -> bool;
        [[nodiscard]] auto fullscreen() const noexcept -> bool;

        auto               setKeyRepeatEnabled(bool enabled) noexcept -> void;
        [[nodiscard]] auto keyRepeatEnabled() const noexcept -> bool;

        auto setVirtualKeyboardVisible(bool visible) noexcept -> void;

        auto        setMousePosition(const math::Vector2I& position) noexcept -> void;
        static auto setMousePositionOnDesktop(WM wm, const math::Vector2U& position) noexcept
            -> void;

        [[nodiscard]] static auto getMonitorSettings(WM wm) -> std::vector<Monitor>;

      private:
        static auto CALLBACK globalOnEvent(HWND   handle,
                                           UINT   message,
                                           WPARAM w_param,
                                           LPARAM l_param) -> LRESULT;

        auto registerWindowClass() -> void;
        auto processEvents(UINT message, WPARAM w_param, LPARAM l_param) -> void;

        bool m_is_open       = false;
        bool m_is_visible    = false;
        bool m_is_fullscreen = false;
        bool m_resizing      = false;
        bool m_mouse_inside  = false;

        WindowStyle m_style;

        LONG                  m_last_style;
        LONG                  m_last_style_ex;
        mutable math::ExtentU m_current_size  = { 0u, 0u };
        math::ExtentU         m_last_size     = { 0u, 0u };
        math::Vector2U        m_last_position = { 0u, 0u };

        HWND m_window_handle = nullptr;

        std::string m_title;
        bool        m_mouse_locked       = false;
        bool        m_mouse_hided        = false;
        bool        m_key_repeat_enabled = false;
    };
} // namespace stormkit::wsi::win32

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::win32 {
    namespace {
        constexpr auto CLASS_NAME = L"Stormkit_Window";

        /////////////////////////////////////
        /////////////////////////////////////
        auto fromStdString(std::string_view str) -> std::wstring {
            const auto size
                = as<std::size_t>(MultiByteToWideChar(CP_UTF8, 0, std::data(str), -1, nullptr, 0));
            auto wstr = std::wstring {};
            wstr.resize(size);

            MultiByteToWideChar(CP_UTF8, 0, std::data(str), -1, std::data(wstr), as<int>(size));

            return wstr;
        }
    } // namespace

    /////////////////////////////////////
    /////////////////////////////////////
    WindowImpl::WindowImpl([[maybe_unused]] WM wm) {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    WindowImpl::WindowImpl(WM wm, std::string title, const math::ExtentU& size, WindowStyle style)
        : WindowImpl { wm } {
        create(std::move(title), size, style);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    WindowImpl::~WindowImpl() {
        if (m_window_handle) DestroyWindow(m_window_handle);

        UnregisterClassW(CLASS_NAME, GetModuleHandleW(nullptr));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::operator=(WindowImpl&&) noexcept -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::create(std::string title, const math::ExtentU& size, WindowStyle style)
        -> void {
        registerWindowClass();

        auto _style     = DWORD { WS_BORDER };
        auto h_instance = GetModuleHandleW(nullptr);

        if ((style & WindowStyle::TitleBar) == WindowStyle::TitleBar) _style |= WS_CAPTION;
        if ((style & WindowStyle::Close) == WindowStyle::Close) _style |= WS_SYSMENU;
        if ((style & WindowStyle::Minimizable) == WindowStyle::Minimizable)
            _style |= WS_MINIMIZEBOX;
        if ((style & WindowStyle::Resizable) == WindowStyle::Resizable)
            _style |= WS_MAXIMIZEBOX | WS_THICKFRAME;

        const auto w_title = fromStdString(title);

        m_window_handle = CreateWindowExW(0l,
                                          CLASS_NAME,
                                          std::data(w_title),
                                          _style,
                                          CW_USEDEFAULT,
                                          CW_USEDEFAULT,
                                          size.width,
                                          size.height,
                                          nullptr,
                                          nullptr,
                                          h_instance,
                                          this);

        ShowWindow(m_window_handle, SW_SHOWNORMAL);

        m_is_open       = true;
        m_is_visible    = true;
        m_is_fullscreen = false;
        m_resizing      = false;
        m_mouse_inside  = false;
        m_style         = style;

        m_title = std::move(title);

        m_last_size    = size;
        m_current_size = size;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::close() noexcept -> void {
        m_is_open    = false;
        m_is_visible = false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::title() const noexcept -> const std::string& {
        return m_title;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::isOpen() const noexcept -> bool {
        return m_is_open;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::visible() const noexcept -> bool {
        return m_is_visible;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::mouseLocked() const noexcept -> bool {
        return m_mouse_locked;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::mouseHided() const noexcept -> bool {
        return m_mouse_hided;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::fullscreen() const noexcept -> bool {
        return m_is_fullscreen;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::keyRepeatEnabled() const noexcept -> bool {
        return m_key_repeat_enabled;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::nativeHandle() const noexcept -> NativeHandle {
        return static_cast<NativeHandle>(win32Handles());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::win32Handles() const noexcept -> HWND {
        return m_window_handle;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::pollEvent(Event& event) noexcept -> bool {
        auto message = MSG {};
        ZeroMemory(&message, sizeof(MSG));

        while (PeekMessageW(&message, nullptr, 0, 0, PM_REMOVE)) {
            TranslateMessage(&message);
            DispatchMessageW(&message);
        }

        return WindowImplBase::pollEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::waitEvent(Event& event) noexcept -> bool {
        auto message = MSG {};
        ZeroMemory(&message, sizeof(MSG));

        auto has_message = WaitMessage();
        while (has_message and PeekMessageW(&message, nullptr, 0, 0, PM_REMOVE)) {
            TranslateMessage(&message);
            DispatchMessageW(&message);
        }

        return WindowImplBase::waitEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setTitle(std::string title) noexcept -> void {
        const auto w_title = fromStdString(title);
        SetWindowTextW(m_window_handle, std::data(w_title));

        m_title = std::move(title);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setExtent(const math::ExtentU& extent) noexcept -> void {
        SetWindowPos(m_window_handle,
                     HWND_TOP,
                     0,
                     0,
                     extent.width,
                     extent.height,
                     SWP_NOMOVE | SWP_FRAMECHANGED);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setFullscreenEnabled(bool enabled) noexcept -> void {
        if (enabled) {
            if (!m_is_fullscreen) {
                m_last_style    = GetWindowLongW(m_window_handle, GWL_STYLE);
                m_last_style_ex = GetWindowLongW(m_window_handle, GWL_EXSTYLE);

                auto rect = RECT {};
                ZeroMemory(&rect, sizeof(RECT));

                GetWindowRect(m_window_handle, &rect);

                m_last_position = { rect.left, rect.top };
            }

            SetWindowLongW(m_window_handle,
                           GWL_STYLE,
                           m_last_style & ~(WS_CAPTION | WS_THICKFRAME));
            SetWindowLongW(m_window_handle,
                           GWL_EXSTYLE,
                           m_last_style_ex
                               & ~(WS_EX_DLGMODALFRAME
                                   | WS_EX_WINDOWEDGE
                                   | WS_EX_CLIENTEDGE
                                   | WS_EX_STATICEDGE));

            SetWindowPos(m_window_handle,
                         nullptr,
                         0,
                         0,
                         m_current_size.width,
                         m_current_size.height,
                         SWP_NOZORDER | SWP_NOACTIVATE | SWP_FRAMECHANGED);

            m_is_fullscreen = true;
        } else {
            SetWindowLongW(m_window_handle, GWL_STYLE, m_last_style);
            SetWindowLongW(m_window_handle, GWL_EXSTYLE, m_last_style_ex);

            SetWindowPos(m_window_handle,
                         nullptr,
                         m_last_position.x,
                         m_last_position.y,
                         m_last_size.width,
                         m_last_size.height,
                         SWP_NOZORDER | SWP_NOACTIVATE | SWP_FRAMECHANGED);

            m_is_fullscreen = false;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::lockMouse() noexcept -> void {
        auto rect = RECT {};
        ZeroMemory(&rect, sizeof(RECT));

        GetClientRect(m_window_handle, &rect);

        ClipCursor(&rect);
        m_mouse_locked = true;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::unlockMouse() noexcept -> void {
        ClipCursor(nullptr);
        m_mouse_locked = false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::hideMouse() noexcept -> void {
        ShowCursor(TRUE);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::unhideMouse() noexcept -> void {
        ShowCursor(FALSE);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::extent() const noexcept -> const math::ExtentU& {
        auto rect = RECT {};
        ZeroMemory(&rect, sizeof(RECT));

        GetClientRect(m_window_handle, &rect);

        m_current_size.width  = as<UInt32>(rect.right - rect.left);
        m_current_size.height = as<UInt32>(rect.bottom - rect.top);

        return m_current_size;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setKeyRepeatEnabled([[maybe_unused]] bool enabled) noexcept -> void {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setVirtualKeyboardVisible([[maybe_unused]] bool visible) noexcept -> void {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setMousePosition(const math::Vector2I& position) noexcept -> void {
        auto point = POINT { as<long>(position.x), as<long>(position.y) };
        ClientToScreen(m_window_handle, &point);
        SetCursorPos(point.x, point.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::setMousePositionOnDesktop([[maybe_unused]] WM   wm,
                                               const math::Vector2U& position) noexcept -> void {
        SetCursorPos(position.x, position.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto loadMonitor(HMONITOR                _monitor,
                     [[maybe_unused]] HDC    hdc,
                     [[maybe_unused]] LPRECT rect,
                     LPARAM                  data) -> BOOL {
        if (_monitor == nullptr) return TRUE;

        auto& monitors = *reinterpret_cast<std::vector<Monitor>*>(data);

        auto monitor_info = MONITORINFOEX {};
        ZeroMemory(&monitor_info, sizeof(MONITORINFOEX));
        monitor_info.cbSize = sizeof(MONITORINFOEX);

        GetMonitorInfo(_monitor, &monitor_info);

        auto& monitor  = monitors.emplace_back();
        monitor.handle = _monitor;
        if ((monitor_info.dwFlags & MONITORINFOF_PRIMARY) == MONITORINFOF_PRIMARY)
            monitor.flags = Monitor::Flags::Primary;

        monitor.name = std::string { monitor_info.szDevice };

        auto dm = DEVMODE {};
        ZeroMemory(&dm, sizeof(DEVMODE));

        for (auto i = 0; EnumDisplaySettings(monitor_info.szDevice, i, &dm) != 0; ++i) {
            monitor.extents.emplace_back(as<UInt32>(dm.dmPelsWidth), as<UInt32>(dm.dmPelsHeight));
        }

        monitor.extents.erase(std::unique(std::begin(monitor.extents), std::end(monitor.extents)),
                              std::end(monitor.extents));
        std::ranges::sort(monitor.extents);

        return TRUE;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::getMonitorSettings([[maybe_unused]] WM wm) -> std::vector<Monitor> {
        auto monitors = std::vector<Monitor> {};

        EnumDisplayMonitors(nullptr, nullptr, loadMonitor, reinterpret_cast<LPARAM>(&monitors));

        return monitors;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::globalOnEvent(HWND handle, UINT message, WPARAM w_param, LPARAM l_param)
        -> LRESULT {
        if (message == WM_CREATE) {
            auto lp_create_params = reinterpret_cast<CREATESTRUCT*>(l_param)->lpCreateParams;

            SetWindowLongPtrW(handle, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(lp_create_params));
        }

        auto window = handle
                          ? reinterpret_cast<WindowImpl*>(GetWindowLongPtrW(handle, GWLP_USERDATA))
                          : nullptr;
        if (window) window->processEvents(message, w_param, l_param);

        if (message == WM_CLOSE) return 0;

        if ((message == WM_SYSCOMMAND) and (w_param == SC_KEYMENU)) return 0;

        return DefWindowProcW(handle, message, w_param, l_param);
    } // namespace stormkit::wsi::details::win32

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::registerWindowClass() -> void {
        auto window_class = WNDCLASSW {};
        ZeroMemory(&window_class, sizeof(WNDCLASSW));

        window_class.lpfnWndProc   = &WindowImpl::globalOnEvent;
        window_class.hInstance     = GetModuleHandleW(nullptr);
        window_class.lpszClassName = CLASS_NAME;

        RegisterClassW(&window_class);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto WindowImpl::processEvents(UINT message, WPARAM w_param, LPARAM l_param) -> void {
        if (!m_window_handle) return;

        switch (message) {
            case WM_CLOSE: closeEvent(); break;
            case WM_SIZE:
                if ((w_param != SIZE_MINIMIZED) and !m_resizing and (m_last_size != extent())) {
                    m_last_size = extent();

                    resizeEvent(m_last_size.width, m_last_size.height);
                }
                break;
            case WM_ENTERSIZEMOVE: m_resizing = true; break;
            case WM_EXITSIZEMOVE:
                m_resizing = false;

                if (m_last_size != extent()) {
                    m_last_size = extent();

                    resizeEvent(m_last_size.width, m_last_size.height);
                }
                break;
            case WM_LBUTTONDOWN: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseDownEvent(MouseButton::Left, x, y);
                break;
            }
            case WM_LBUTTONUP: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseUpEvent(MouseButton::Left, x, y);
                break;
            }
            case WM_RBUTTONDOWN: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseDownEvent(MouseButton::Right, x, y);
                break;
            }
            case WM_RBUTTONUP: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseUpEvent(MouseButton::Right, x, y);
                break;
            }
            case WM_MBUTTONDOWN: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseDownEvent(MouseButton::Middle, x, y);
                break;
            }
            case WM_MBUTTONUP: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));
                mouseUpEvent(MouseButton::Middle, x, y);
                break;
            }
            case WM_XBUTTONDOWN: {
                auto x      = as<Int32>(LOWORD(l_param));
                auto y      = as<Int32>(HIWORD(l_param));
                auto button = HIWORD(w_param);
                if (button == XBUTTON1) mouseDownEvent(MouseButton::Button1, x, y);
                else if (button == XBUTTON2)
                    mouseDownEvent(MouseButton::Button1, x, y);
                break;
            }
            case WM_XBUTTONUP: {
                auto x      = as<Int32>(LOWORD(l_param));
                auto y      = as<Int32>(HIWORD(l_param));
                auto button = HIWORD(w_param);
                if (button == XBUTTON1) mouseUpEvent(MouseButton::Button2, x, y);
                else if (button == XBUTTON2)
                    mouseUpEvent(MouseButton::Button2, x, y);
                break;
            }
            case WM_MOUSEMOVE: {
                auto x = as<Int32>(LOWORD(l_param));
                auto y = as<Int32>(HIWORD(l_param));

                auto area = RECT {};
                GetClientRect(m_window_handle, &area);

                if ((w_param & (MK_LBUTTON | MK_MBUTTON | MK_RBUTTON | MK_XBUTTON1 | MK_XBUTTON2))
                    == 0) {
                    if (GetCapture() == m_window_handle) ReleaseCapture();
                } else if (GetCapture() != m_window_handle)
                    SetCapture(m_window_handle);

                if ((x < area.left) or (x > area.right) or (y < area.top) or (y > area.bottom)) {
                    if (m_mouse_inside) {
                        m_mouse_inside = false;

                        auto mouseEvent        = TRACKMOUSEEVENT {};
                        mouseEvent.cbSize      = sizeof(TRACKMOUSEEVENT);
                        mouseEvent.dwFlags     = TME_CANCEL;
                        mouseEvent.hwndTrack   = m_window_handle;
                        mouseEvent.dwHoverTime = HOVER_DEFAULT;
                        TrackMouseEvent(&mouseEvent);

                        mouseExitedEvent();
                    }
                } else {
                    if (!m_mouse_inside) {
                        m_mouse_inside = true;

                        auto mouseEvent        = TRACKMOUSEEVENT {};
                        mouseEvent.cbSize      = sizeof(TRACKMOUSEEVENT);
                        mouseEvent.dwFlags     = TME_LEAVE;
                        mouseEvent.hwndTrack   = m_window_handle;
                        mouseEvent.dwHoverTime = HOVER_DEFAULT;
                        TrackMouseEvent(&mouseEvent);

                        mouseEnteredEvent();
                    }
                }

                mouseMoveEvent(x, y);
                break;
            }
            case WM_KEYDOWN: [[fallthrough]];
            case WM_SYSKEYDOWN: {
                auto key        = win32KeyToStormKitKey(w_param, l_param);
                auto charactere = win32KeyToChar(w_param, l_param);

                keyDownEvent(key, charactere);
                break;
            }
            case WM_KEYUP: [[fallthrough]];
            case WM_SYSKEYUP: {
                auto key        = win32KeyToStormKitKey(w_param, l_param);
                auto charactere = win32KeyToChar(w_param, l_param);

                keyUpEvent(key, charactere);
                break;
            }
        }
    }
} // namespace stormkit::wsi::win32
