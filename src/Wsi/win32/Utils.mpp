// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <windows.h>

export module stormkit.Wsi:Win32.utils;

import stormkit.core;
import stormkit.Wsi;

export namespace stormkit::wsi::win32 {
    auto win32KeyToStormKitKey(WPARAM key, LPARAM flags) noexcept -> Key;
    auto stormKitKeyToWin32(Key key) noexcept -> int;
    auto win32KeyToChar(WPARAM key, LPARAM flags) noexcept -> char;
} // namespace stormkit::wsi::win32

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::win32 {
    /////////////////////////////////////
    /////////////////////////////////////
    auto win32KeyToStormKitKey(WPARAM key, LPARAM flags) noexcept -> Key {
        switch (key) {
            case VK_SHIFT: {
                static const auto l_shift  = MapVirtualKey(VK_LSHIFT, MAPVK_VK_TO_VSC);
                auto              scancode = as<UInt32>((flags & (0xFF << 16)) >> 16);
                return scancode == l_shift ? Key::L_Shift : Key::R_Shift;
            }
            case VK_MENU: return (HIWORD(flags) & KF_EXTENDED) ? Key::R_Alt : Key::L_Alt;
            case VK_CONTROL: return (HIWORD(flags) & KF_EXTENDED) ? Key::R_Control : Key::L_Control;
            case VK_LWIN: return Key::L_System;
            case VK_RWIN: return Key::R_System;
            case VK_APPS: return Key::Menu;
            case VK_OEM_1: return Key::Semi_Colon;
            case VK_OEM_2: return Key::Slash;
            case VK_OEM_PLUS: return Key::Equal;
            case VK_OEM_MINUS: return Key::Hyphen;
            case VK_OEM_4: return Key::L_Bracket;
            case VK_OEM_6: return Key::R_Bracket;
            case VK_OEM_COMMA: return Key::Comma;
            case VK_OEM_PERIOD: return Key::Period;
            case VK_OEM_7: return Key::Quote;
            case VK_OEM_5: return Key::Back_Slash;
            case VK_OEM_3: return Key::Tilde;
            case VK_ESCAPE: return Key::Escape;
            case VK_SPACE: return Key::Space;
            case VK_RETURN: return Key::Enter;
            case VK_BACK: return Key::Back_Space;
            case VK_TAB: return Key::Tab;
            case VK_PRIOR: return Key::Page_Up;
            case VK_NEXT: return Key::Page_Down;
            case VK_END: return Key::End;
            case VK_HOME: return Key::Home;
            case VK_INSERT: return Key::Insert;
            case VK_DELETE: return Key::Delete;
            case VK_ADD: return Key::Add;
            case VK_SUBTRACT: return Key::Substract;
            case VK_MULTIPLY: return Key::Multiply;
            case VK_DIVIDE: return Key::Divide;
            case VK_PAUSE: return Key::Pause;
            case VK_F1: return Key::F1;
            case VK_F2: return Key::F2;
            case VK_F3: return Key::F3;
            case VK_F4: return Key::F4;
            case VK_F5: return Key::F5;
            case VK_F6: return Key::F6;
            case VK_F7: return Key::F7;
            case VK_F8: return Key::F8;
            case VK_F9: return Key::F9;
            case VK_F10: return Key::F10;
            case VK_F11: return Key::F11;
            case VK_F12: return Key::F12;
            case VK_F13: return Key::F13;
            case VK_F14: return Key::F14;
            case VK_F15: return Key::F15;
            case VK_LEFT: return Key::Left;
            case VK_RIGHT: return Key::Right;
            case VK_UP: return Key::Up;
            case VK_DOWN: return Key::Down;
            case VK_NUMPAD0: return Key::Numpad0;
            case VK_NUMPAD1: return Key::Numpad1;
            case VK_NUMPAD2: return Key::Numpad2;
            case VK_NUMPAD3: return Key::Numpad3;
            case VK_NUMPAD4: return Key::Numpad4;
            case VK_NUMPAD5: return Key::Numpad5;
            case VK_NUMPAD6: return Key::Numpad6;
            case VK_NUMPAD7: return Key::Numpad7;
            case VK_NUMPAD8: return Key::Numpad8;
            case VK_NUMPAD9: return Key::Numpad9;
            case 'A': return Key::A;
            case 'Z': return Key::Z;
            case 'E': return Key::E;
            case 'R': return Key::R;
            case 'T': return Key::T;
            case 'Y': return Key::Y;
            case 'U': return Key::U;
            case 'I': return Key::I;
            case 'O': return Key::O;
            case 'P': return Key::P;
            case 'Q': return Key::Q;
            case 'S': return Key::S;
            case 'D': return Key::D;
            case 'F': return Key::F;
            case 'G': return Key::G;
            case 'H': return Key::H;
            case 'J': return Key::J;
            case 'K': return Key::K;
            case 'L': return Key::L;
            case 'M': return Key::M;
            case 'W': return Key::W;
            case 'X': return Key::X;
            case 'C': return Key::C;
            case 'V': return Key::V;
            case 'B': return Key::B;
            case 'N': return Key::N;
            case '0': return Key::Num0;
            case '1': return Key::Num1;
            case '2': return Key::Num2;
            case '3': return Key::Num3;
            case '4': return Key::Num4;
            case '5': return Key::Num5;
            case '6': return Key::Num6;
            case '7': return Key::Num7;
            case '8': return Key::Num8;
            case '9': return Key::Num9;
            default: break;
        }

        return Key::Unknow;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto stormKitKeyToWin32(Key key) noexcept -> int {
        int vkey = 0;
        switch (key) {
            case Key::A: vkey = 'A'; break;
            case Key::B: vkey = 'B'; break;
            case Key::C: vkey = 'C'; break;
            case Key::D: vkey = 'D'; break;
            case Key::E: vkey = 'E'; break;
            case Key::F: vkey = 'F'; break;
            case Key::G: vkey = 'G'; break;
            case Key::H: vkey = 'H'; break;
            case Key::I: vkey = 'I'; break;
            case Key::J: vkey = 'J'; break;
            case Key::K: vkey = 'K'; break;
            case Key::L: vkey = 'L'; break;
            case Key::M: vkey = 'M'; break;
            case Key::N: vkey = 'N'; break;
            case Key::O: vkey = 'O'; break;
            case Key::P: vkey = 'P'; break;
            case Key::Q: vkey = 'Q'; break;
            case Key::R: vkey = 'R'; break;
            case Key::S: vkey = 'S'; break;
            case Key::T: vkey = 'T'; break;
            case Key::U: vkey = 'U'; break;
            case Key::V: vkey = 'V'; break;
            case Key::W: vkey = 'W'; break;
            case Key::X: vkey = 'X'; break;
            case Key::Y: vkey = 'Y'; break;
            case Key::Z: vkey = 'Z'; break;
            case Key::Num0: vkey = '0'; break;
            case Key::Num1: vkey = '1'; break;
            case Key::Num2: vkey = '2'; break;
            case Key::Num3: vkey = '3'; break;
            case Key::Num4: vkey = '4'; break;
            case Key::Num5: vkey = '5'; break;
            case Key::Num6: vkey = '6'; break;
            case Key::Num7: vkey = '7'; break;
            case Key::Num8: vkey = '8'; break;
            case Key::Num9: vkey = '9'; break;
            case Key::Escape: vkey = VK_ESCAPE; break;
            case Key::L_Control: vkey = VK_LCONTROL; break;
            case Key::L_Shift: vkey = VK_LSHIFT; break;
            case Key::L_Alt: vkey = VK_LMENU; break;
            case Key::L_System: vkey = VK_LWIN; break;
            case Key::R_Control: vkey = VK_RCONTROL; break;
            case Key::R_Shift: vkey = VK_RSHIFT; break;
            case Key::R_Alt: vkey = VK_RMENU; break;
            case Key::R_System: vkey = VK_RWIN; break;
            case Key::Menu: vkey = VK_APPS; break;
            case Key::L_Bracket: vkey = VK_OEM_4; break;
            case Key::R_Bracket: vkey = VK_OEM_6; break;
            case Key::Semi_Colon: vkey = VK_OEM_1; break;
            case Key::Comma: vkey = VK_OEM_COMMA; break;
            case Key::Period: vkey = VK_OEM_PERIOD; break;
            case Key::Quote: vkey = VK_OEM_7; break;
            case Key::Slash: vkey = VK_OEM_2; break;
            case Key::Back_Slash: vkey = VK_OEM_5; break;
            case Key::Tilde: vkey = VK_OEM_3; break;
            case Key::Equal: vkey = VK_OEM_PLUS; break;
            case Key::Hyphen: vkey = VK_OEM_MINUS; break;
            case Key::Space: vkey = VK_SPACE; break;
            case Key::Enter: vkey = VK_RETURN; break;
            case Key::Back_Space: vkey = VK_BACK; break;
            case Key::Tab: vkey = VK_TAB; break;
            case Key::Page_Up: vkey = VK_PRIOR; break;
            case Key::Page_Down: vkey = VK_NEXT; break;
            case Key::End: vkey = VK_END; break;
            case Key::Home: vkey = VK_HOME; break;
            case Key::Insert: vkey = VK_INSERT; break;
            case Key::Delete: vkey = VK_DELETE; break;
            case Key::Add: vkey = VK_ADD; break;
            case Key::Substract: vkey = VK_SUBTRACT; break;
            case Key::Multiply: vkey = VK_MULTIPLY; break;
            case Key::Divide: vkey = VK_DIVIDE; break;
            case Key::Left: vkey = VK_LEFT; break;
            case Key::Right: vkey = VK_RIGHT; break;
            case Key::Up: vkey = VK_UP; break;
            case Key::Down: vkey = VK_DOWN; break;
            case Key::Numpad0: vkey = VK_NUMPAD0; break;
            case Key::Numpad1: vkey = VK_NUMPAD1; break;
            case Key::Numpad2: vkey = VK_NUMPAD2; break;
            case Key::Numpad3: vkey = VK_NUMPAD3; break;
            case Key::Numpad4: vkey = VK_NUMPAD4; break;
            case Key::Numpad5: vkey = VK_NUMPAD5; break;
            case Key::Numpad6: vkey = VK_NUMPAD6; break;
            case Key::Numpad7: vkey = VK_NUMPAD7; break;
            case Key::Numpad8: vkey = VK_NUMPAD8; break;
            case Key::Numpad9: vkey = VK_NUMPAD9; break;
            case Key::F1: vkey = VK_F1; break;
            case Key::F2: vkey = VK_F2; break;
            case Key::F3: vkey = VK_F3; break;
            case Key::F4: vkey = VK_F4; break;
            case Key::F5: vkey = VK_F5; break;
            case Key::F6: vkey = VK_F6; break;
            case Key::F7: vkey = VK_F7; break;
            case Key::F8: vkey = VK_F8; break;
            case Key::F9: vkey = VK_F9; break;
            case Key::F10: vkey = VK_F10; break;
            case Key::F11: vkey = VK_F11; break;
            case Key::F12: vkey = VK_F12; break;
            case Key::F13: vkey = VK_F13; break;
            case Key::F14: vkey = VK_F14; break;
            case Key::F15: vkey = VK_F15; break;
            case Key::Pause: vkey = VK_PAUSE; break;
            default: vkey = 0; break;
        }

        return vkey;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto win32KeyToChar(WPARAM key, [[maybe_unused]] LPARAM flags) noexcept -> char {
        switch (key) {
            case VK_OEM_COMMA: return ',';
            case VK_OEM_PERIOD: return '.';
            case VK_SPACE: return ' ';
            case VK_RETURN: return '\n';
            case VK_TAB: return '\t';
            case VK_OEM_PLUS: [[fallthrough]];
            case VK_ADD: return '+';
            case VK_OEM_MINUS: [[fallthrough]];
            case VK_SUBTRACT: return '-';
            case VK_MULTIPLY: return '*';
            case VK_DIVIDE: return '/';
            case 'A': return 'A';
            case 'Z': return 'Z';
            case 'E': return 'E';
            case 'R': return 'R';
            case 'T': return 'T';
            case 'Y': return 'Y';
            case 'U': return 'U';
            case 'I': return 'I';
            case 'O': return 'O';
            case 'P': return 'P';
            case 'Q': return 'Q';
            case 'S': return 'S';
            case 'D': return 'D';
            case 'F': return 'F';
            case 'G': return 'G';
            case 'H': return 'H';
            case 'J': return 'J';
            case 'K': return 'K';
            case 'L': return 'L';
            case 'M': return 'M';
            case 'W': return 'W';
            case 'X': return 'X';
            case 'C': return 'C';
            case 'V': return 'V';
            case 'B': return 'B';
            case 'N': return 'N';
            case VK_NUMPAD0: [[fallthrough]];
            case '0': return '0';
            case VK_NUMPAD1: [[fallthrough]];
            case '1': return '1';
            case VK_NUMPAD2: [[fallthrough]];
            case '2': return '2';
            case VK_NUMPAD3: [[fallthrough]];
            case '3': return '3';
            case VK_NUMPAD4: [[fallthrough]];
            case '4': return '4';
            case VK_NUMPAD5: [[fallthrough]];
            case '5': return '5';
            case VK_NUMPAD6: [[fallthrough]];
            case '6': return '6';
            case VK_NUMPAD7: [[fallthrough]];
            case '7': return '7';
            case VK_NUMPAD8: [[fallthrough]];
            case '8': return '8';
            case VK_NUMPAD9: [[fallthrough]];
            case '9': return '9';
            default: break;
        }

        return '\0';
    }

} // namespace stormkit::wsi::win32
