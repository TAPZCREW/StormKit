// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Wsi:Common.WindowImplBase;

import std;

import stormkit.core;
import stormkit.Wsi;

export namespace stormkit::wsi::common {
    class WindowImplBase {
      public:
        [[nodiscard]] auto pollEvent(Event& event) noexcept -> bool;
        [[nodiscard]] auto waitEvent(Event& event) noexcept -> bool;

        auto mouseDownEvent(MouseButton button, Int32 x, Int32 y) noexcept -> void;
        auto mouseUpEvent(MouseButton button, Int32 x, Int32 y) noexcept -> void;

        auto mouseMoveEvent(Int32 x, Int32 y) noexcept -> void;

        auto mouseEnteredEvent() noexcept -> void;
        auto mouseExitedEvent() noexcept -> void;

        auto keyDownEvent(Key key, char character) noexcept -> void;
        auto keyUpEvent(Key key, char character) noexcept -> void;

        auto closeEvent() noexcept -> void;

        auto resizeEvent(UInt32 width, UInt32 height) noexcept -> void;
        auto minimizeEvent() noexcept -> void;
        auto maximizeEvent() noexcept -> void;

        auto lostFocusEvent() noexcept -> void;
        auto gainedFocusEvent() noexcept -> void;

      protected:
        auto pushEvent(const Event& event) noexcept -> void;

        std::queue<Event> m_events;
    };
} // namespace stormkit::wsi::common

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::common {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::pollEvent(Event& event) noexcept -> bool {
        auto has_event = not m_events.empty();

        if (has_event) {
            event = m_events.front();
            m_events.pop();
        }

        return has_event;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::waitEvent(Event& event) noexcept -> bool {
        auto has_event = not m_events.empty();

        if (has_event) {
            event = m_events.front();
            m_events.pop();
        }

        return has_event;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto
        WindowImplBase::mouseDownEvent(MouseButton button, Int32 x, Int32 y) noexcept -> void {
        auto event = Event {};
        event.type = EventType::MouseButtonPushed;
        event.data = MouseButtonPushedEventData {
            .position = { x, y },
            .button   = button
        };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::mouseUpEvent(MouseButton button, Int32 x, Int32 y) noexcept
        -> void {
        auto event = Event {};
        event.type = EventType::MouseButtonReleased;
        event.data = MouseButtonReleasedEventData {
            .position = { x, y },
            .button   = button
        };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::mouseMoveEvent(Int32 x, Int32 y) noexcept -> void {
        auto event = Event {};
        event.type = EventType::MouseMoved;
        event.data = MouseMovedEventData {
            .position = { x, y }
        };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::mouseEnteredEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::MouseEntered;
        event.data = MouseEnteredEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::mouseExitedEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::MouseExited;
        event.data = MouseExitedEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::keyDownEvent(Key key, char character) noexcept -> void {
        auto event = Event {};
        event.type = EventType::KeyPressed;
        event.data = KeyPressedEventData { .key = key, .character = character };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::keyUpEvent(Key key, char character) noexcept -> void {
        auto event = Event {};
        event.type = EventType::KeyReleased;
        event.data = KeyReleasedEventData { .key = key, .character = character };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::closeEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::Closed;
        event.data = ClosedEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::resizeEvent(UInt32 width, UInt32 height) noexcept -> void {
        auto event = Event {};
        event.type = EventType::Resized;
        event.data = ResizedEventData {
            .extent { width, height }
        };

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::minimizeEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::Minimized;
        event.data = MinimizedEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::maximizeEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::Maximized;
        event.data = MaximizedEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::lostFocusEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::LostFocus;
        event.data = LostFocusEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::gainedFocusEvent() noexcept -> void {
        auto event = Event {};
        event.type = EventType::GainedFocus;
        event.data = GainedFocusEventData {};

        pushEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto WindowImplBase::pushEvent(const Event& event) noexcept -> void {
        m_events.emplace(event);
    }
} // namespace stormkit::wsi::common
