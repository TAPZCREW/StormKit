// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.wsi:linux.window_impl;

import std;

import stormkit.core;
import stormkit.wsi;

import :common.window_impl_base;
import :linux.x11.window_impl;
import :linux.wayland.window_impl;

export namespace stormkit::wsi::linux {
    class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
      public:
        explicit WindowImpl(WM wm);
        WindowImpl(WM wm, std::string title, const math::Extent2<u32>& size, WindowFlag flags);
        ~WindowImpl();

        WindowImpl(const WindowImpl&) noexcept                    = delete;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

        WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const math::Extent2<u32>& size, WindowFlag flags) noexcept
          -> void;
        auto close() noexcept -> void;

        auto clear(const RGBColorU& color = RGBColorDef::BLACK<u8>) noexcept -> void;
        auto set_pixels_to(std::span<const RGBColorU> colors) noexcept -> void;

        [[nodiscard]]
        auto is_open() const noexcept -> bool;

        [[nodiscard]]
        auto poll_event(Event& event) noexcept -> bool;
        [[nodiscard]]
        auto wait_event(Event& event) noexcept -> bool;

        [[nodiscard]]
        auto visible() const noexcept -> bool;

        auto set_title(std::string title) noexcept -> void;
        [[nodiscard]]
        auto title() const noexcept -> const std::string&;

        auto set_extent(const math::Extent2<u32>& extent) noexcept -> void;
#ifdef STORMKIT_OS_MACOS
        [[nodiscard]]
        auto extent() const noexcept -> math::Extent2<u32>;
#else
        [[nodiscard]]
        auto extent() const noexcept -> const math::Extent2<u32>&;
#endif

        auto set_fullscreen(bool fullscreen) noexcept -> void;
        [[nodiscard]]
        auto fullscreen() const noexcept -> bool;

        auto confine_mouse(bool confined = true, u32 mouse_id = 0) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_confined(u32 mouse_id) const noexcept -> bool;

        auto lock_mouse(bool locked = true, u32 mouse_id = 0) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_locked(u32 mouse_id) const noexcept -> bool;

        auto hide_mouse(bool hidden = true, u32 mouse_id = 0) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_hidden(u32 mouse_id) const noexcept -> bool;

        auto set_relative_mouse(bool enabled, u32 mouse_id = 0) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_relative(u32 mouse_id = 0) const noexcept -> bool;

        auto set_key_repeat(bool enabled, u32 keyboard_id = 0) noexcept -> void;
        [[nodiscard]]
        auto is_key_repeat_enabled(u32 keyboard_id = 0) const noexcept -> bool;

        auto show_virtual_keyboard(bool visible = true) noexcept -> void;
        [[nodiscard]]
        auto is_virtual_keyboard_visible() const noexcept -> bool;

        auto set_mouse_position(const math::vec2i& position, u32 mouse_id = 0) noexcept -> void;
        static auto set_mouse_position_on_desktop(WM                 wm,
                                                  const math::vec2u& position,
                                                  u32                mouse_id = 0) noexcept -> void;

        [[nodiscard]]
        static auto get_monitor_settings(WM wm) -> std::vector<Monitor>;

        [[nodiscard]]
        auto native_handle() const noexcept -> NativeHandle;

      private:
        struct Sentinelle {};

        using BackendWindowImpl = std::variant<x11::WindowImpl, wayland::WindowImpl>;

        WM m_wm;

        DeferInit<BackendWindowImpl> m_impl;
    };
} // namespace stormkit::wsi::linux

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

#define CASE_DO(case_, namespace_, work) \
    case case_: as<namespace_::WindowImpl>(m_impl.get()).work; return
#define CASE_DO_RETURN(case_, namespace_, work) \
    case case_: return as<namespace_::WindowImpl>(m_impl.get()).work

namespace stormkit::wsi::linux {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl(WM wm)
        : m_wm { wm } {
        if (m_wm == WM::X11) m_impl = x11::WindowImpl {};
        else if (m_wm == WM::WAYLAND)
            m_impl = wayland::WindowImpl {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::~WindowImpl() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl(WM                        wm,
                                  std::string               title,
                                  const math::Extent2<u32>& extent,
                                  WindowFlag                flags)
        : m_wm { wm } {
        if (m_wm == WM::X11) m_impl = x11::WindowImpl { std::move(title), extent, flags };
        else if (m_wm == WM::WAYLAND)
            m_impl = wayland::WindowImpl { title, extent, flags };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::operator=(WindowImpl&&) noexcept -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::create(std::string               title,
                                   const math::Extent2<u32>& extent,
                                   WindowFlag                flags) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, create(std::move(title), extent, flags))
                ;
            CASE_DO (WM::WAYLAND, wayland, create(std::move(title), extent, flags))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::close() noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, close())
                ;
            CASE_DO (WM::WAYLAND, wayland, close())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::clear(const RGBColorU& color) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, clear(color))
                ;
            CASE_DO (WM::WAYLAND, wayland, clear(color))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_pixels_to(std::span<const RGBColorU> colors) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_pixels_to(colors))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_pixels_to(colors))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_open() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_open())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_open())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::poll_event(Event& event) noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, poll_event(event))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, poll_event(event))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::wait_event(Event& event) noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, wait_event(event))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, wait_event(event))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::visible() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, visible())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, visible())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_title(std::string title) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_title(std::move(title)))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_title(std::move(title)))
                ;

            default: break;
        }
        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::title() const noexcept -> const std::string& {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, title())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, title())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_extent(const math::Extent2<u32>& extent) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_extent(extent))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_extent(extent))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::extent() const noexcept -> const stormkit::math::Extent2<u32>& {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, extent())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, extent())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_fullscreen(bool enabled) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_fullscreen(enabled))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_fullscreen(enabled))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::fullscreen() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, fullscreen())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, fullscreen())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::confine_mouse(bool confined, u32 mouse_id) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, confine_mouse(confined, mouse_id))
                ;
            CASE_DO (WM::WAYLAND, wayland, confine_mouse(confined, mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_confined(u32 mouse_id) const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_mouse_confined(mouse_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_mouse_confined(mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::lock_mouse(bool locked, u32 mouse_id) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, lock_mouse(locked, mouse_id))
                ;
            CASE_DO (WM::WAYLAND, wayland, lock_mouse(locked, mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_locked(u32 mouse_id) const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_mouse_locked(mouse_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_mouse_locked(mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::hide_mouse(bool hidden, u32 mouse_id) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, hide_mouse(hidden, mouse_id))
                ;
            CASE_DO (WM::WAYLAND, wayland, hide_mouse(hidden, mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_hidden(u32 mouse_id) const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_mouse_hidden(mouse_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_mouse_hidden(mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_relative_mouse(bool enabled, u32 mouse_id) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_relative_mouse(enabled, mouse_id))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_relative_mouse(enabled, mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_relative(u32 mouse_id) const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_mouse_relative(mouse_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_mouse_relative(mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_key_repeat(bool enabled, u32 keyboard_id) noexcept -> void {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, set_key_repeat(enabled, keyboard_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, set_key_repeat(enabled, keyboard_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_key_repeat_enabled(u32 keyboard_id) const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_key_repeat_enabled(keyboard_id))
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_key_repeat_enabled(keyboard_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::show_virtual_keyboard(bool visible) noexcept -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, show_virtual_keyboard(visible))
                ;
            CASE_DO (WM::WAYLAND, wayland, show_virtual_keyboard(visible))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_virtual_keyboard_visible() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, is_virtual_keyboard_visible())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, is_virtual_keyboard_visible())
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_mouse_position(const math::vec2i& position, u32 mouse_id) noexcept
      -> void {
        switch (m_wm) {
            CASE_DO (WM::X11, x11, set_mouse_position(position, mouse_id))
                ;
            CASE_DO (WM::WAYLAND, wayland, set_mouse_position(position, mouse_id))
                ;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_mouse_position_on_desktop(WM                 wm,
                                                          const math::vec2u& position,
                                                          u32 mouse_id) noexcept -> void {
        switch (wm) {
            case WM::X11: x11::WindowImpl::set_mouse_position_on_desktop(position, mouse_id); break;
            case WM::WAYLAND:
                wayland::WindowImpl::set_mouse_position_on_desktop(position, mouse_id);
                break;

            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::get_monitor_settings(WM wm) -> std::vector<Monitor> {
        switch (wm) {
            case WM::X11: return x11::WindowImpl::get_monitor_settings(); break;
            case WM::WAYLAND: return wayland::WindowImpl::get_monitor_settings(); break;
            default: break;
        }

        std::unreachable();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::native_handle() const noexcept -> NativeHandle {
        switch (m_wm) {
            CASE_DO_RETURN (WM::X11, x11, native_handle())
                ;
            CASE_DO_RETURN (WM::WAYLAND, wayland, native_handle())
                ;

            default: break;
        }

        std::unreachable();
    }
} // namespace stormkit::wsi::linux

#undef CASE_DO
#undef CASE_DO_RETURN
