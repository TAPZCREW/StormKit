// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <xcb/xcb.h>
#include <xcb/xcb_atom.h>
#include <xcb/xcb_errors.h>
#include <xcb/xcb_keysyms.h>
#include <xcb/xinput.h>

#include <stormkit/core/platform_macro.hpp>

export module stormkit.wsi:linux.x11.xcb;

import std;

import stormkit.core;

import :linux.x11.log;

export namespace stormkit::wsi::linux::x11 {
    struct Error {
        std::string message;
    };

    namespace xcb {
        using Connection   = RAIICapsule<xcb_connection_t*,
                                         xcb_connect,
                                         xcb_disconnect,
                                         struct ConnectionTag,
                                         nullptr>;
        using ErrorContext = RAIICapsule<
          xcb_errors_context_t*,
          monadic::init_by<xcb_errors_context_t*,
                           [](xcb_errors_context_t*& val,
                              xcb_connection_t*      connection) static noexcept {
                               xcb_errors_context_new(connection, &val);
                           }>(),
          xcb_errors_context_free,
          struct ErrorContextTag,
          nullptr>;
        using GenericError            = RAIICapsule<xcb_generic_error_t*,
                                                    monadic::noop(),
                                                    std::free,
                                                    struct GenericErrorTag,
                                                    nullptr>;
        using InternAtomReply         = RAIICapsule<xcb_intern_atom_reply_t*,
                                                    xcb_intern_atom_reply,
                                                    std::free,
                                                    struct InternAtomReplyTag,
                                                    nullptr>;
        using AtomNameReply           = RAIICapsule<xcb_get_atom_name_reply_t*,
                                                    xcb_get_atom_name_reply,
                                                    std::free,
                                                    struct AtomNameReplyTag,
                                                    nullptr>;
        using InputXIQueryDeviceReply = RAIICapsule<xcb_input_xi_query_device_reply_t*,
                                                    xcb_input_xi_query_device_reply,
                                                    std::free,
                                                    struct InputXIQueryDeviceReplyTag,
                                                    nullptr>;
        using KeySymbols              = RAIICapsule<xcb_key_symbols_t*,
                                                    xcb_key_symbols_alloc,
                                                    xcb_key_symbols_free,
                                                    struct KeySymbolsTag,
                                                    nullptr>;

        constexpr auto atom_error(std::string_view msg, std::string_view atom_name)
          -> decltype(auto);
    } // namespace xcb
} // namespace stormkit::wsi::linux::x11

export namespace stormkit::wsi::linux::x11::xcb {
    STORMKIT_FORCE_INLINE STORMKIT_CONST
    constexpr auto atom_error(std::string_view atom_name) -> decltype(auto) {
        return [atom_name]<typename Error>(Error&& error) noexcept -> Error {
            elog("Failed to get atom "
                 "{}\n        > reason: {}",
                 atom_name,
                 error.message);
            return std::forward<Error>(error);
        };
    }
} // namespace stormkit::wsi::linux::x11::xcb
