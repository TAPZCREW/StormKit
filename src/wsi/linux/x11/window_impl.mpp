// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#include <xkbcommon/xkbcommon.h>

#include <xcb/xcb.h>
#include <xcb/xcb_keysyms.h>
STORMKIT_PUSH_WARNINGS
#pragma GCC diagnostic ignored "-Wkeyword-macro"
#define explicit _explicit
#include <xcb/xkb.h>
#undef explicit
STORMKIT_POP_WARNINGS

export module stormkit.wsi:linux.x11.window_impl;

import std;

import stormkit.core;
import stormkit.wsi;

import :common.window_impl_base;

import :linux.common.xkb;

import :linux.x11.context;
import :linux.x11.xcb;
import :linux.x11.log;
import :linux.x11.utils;

namespace stdr = std::ranges;

export namespace stormkit::wsi::linux::x11 {
    namespace xcb {
        template<auto Destructor>
        inline constexpr auto XCB_DELETER = [](auto val) {
            auto& globals = get_globals();

            Destructor(globals.connection, val);
        };
        using Window = RAIICapsule<xcb_window_t,
                                   xcb_generate_id,
                                   XCB_DELETER<xcb_destroy_window>,
                                   struct WindowTag,
                                   XCB_WINDOW_NONE>;
    } // namespace xcb

    class WindowImpl: public stormkit::wsi::common::WindowImplBase {
      public:
        struct Handles {
            xcb_connection_t*  connection;
            xcb_window_t       window;
            xcb_key_symbols_t* key_symbols;
            xkb_state*         state;
        };

        WindowImpl() noexcept;
        WindowImpl(std::string title, const math::Extent2<u32>& size, WindowFlag flags) noexcept;
        ~WindowImpl() noexcept;

        WindowImpl(const WindowImpl&) noexcept                    = delete;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

        WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const math::Extent2<u32>& size, WindowFlag flags) noexcept
          -> void;
        auto close() noexcept -> void;

        auto clear(const RGBColorU& color) noexcept -> void;
        auto set_pixels_to(std::span<const RGBColorU> colors) noexcept -> void;

        [[nodiscard]]
        auto is_open() const noexcept -> bool;

        [[nodiscard]]
        auto poll_event(Event& event) noexcept -> bool;
        [[nodiscard]]
        auto wait_event(Event& event) noexcept -> bool;

        [[nodiscard]]
        auto visible() const noexcept -> bool;

        auto set_title(std::string title) noexcept -> void;
        [[nodiscard]]
        auto title() const noexcept -> const std::string&;

        auto set_extent(const math::Extent2<u32>& extent) noexcept -> void;
        [[nodiscard]]
        auto extent() const noexcept -> math::Extent2<u32>;
        [[nodiscard]]
        auto framebuffer_extent() const noexcept -> math::Extent2<u32>;

        auto set_fullscreen(bool fullscreen) noexcept -> void;
        [[nodiscard]]
        auto fullscreen() const noexcept -> bool;

        auto confine_mouse(bool confined, u32 mouse_id) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_confined(u32 mouse_id) const noexcept -> bool;

        auto lock_mouse(bool locked, u32 mouse_id) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_locked(u32 mouse_id) const noexcept -> bool;

        auto hide_mouse(bool hidden, u32 mouse_id) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_hidden(u32 mouse_id) const noexcept -> bool;

        auto set_relative_mouse(bool enabled, u32 mouse_id) noexcept -> void;
        [[nodiscard]]
        auto is_mouse_relative(u32 mouse_id) const noexcept -> bool;

        auto set_key_repeat(bool enabled, u32 keyboard_id) noexcept -> void;
        [[nodiscard]]
        auto is_key_repeat_enabled(u32 keyboard_id) const noexcept -> bool;

        auto show_virtual_keyboard(bool visible) noexcept -> void;
        [[nodiscard]]
        auto is_virtual_keyboard_visible() const noexcept -> bool;

        auto        set_mouse_position(const math::vec2i& position, u32 mouse_id) noexcept -> void;
        static auto set_mouse_position_on_desktop(const math::vec2u& position,
                                                  u32                mouse_id) noexcept -> void;

        [[nodiscard]]
        static auto get_monitor_settings() -> std::vector<Monitor>;

        [[nodiscard]]
        auto native_handle() const noexcept -> NativeHandle;

      private:
        struct KeyboardState {
            common::xkb::Keymap keymap;
            common::xkb::State  state;
            common::xkb::Mods   mods;
        };

        struct MouseState {
            bool hidden   = false;
            bool locked   = false;
            bool relative = false;
            bool confined = false;

            math::vec2u locked_at;
            math::vec2u last_position;
        };

        auto process_events(xcb_generic_event_t* xevent) -> void;
        auto update_keymap() -> void;

        auto handle_key_event(xcb_keycode_t keycode, bool up) noexcept -> void;

        bool m_open                     = false;
        bool m_key_repeat_enabled       = false;
        bool m_virtual_keyboard_visible = false;

        int m_xi_opcode = 0;

        std::string m_title;

        Handles m_handles;

        xcb::Window     m_window;
        xcb::KeySymbols m_key_symbols;

        struct {
            bool               visible    = false;
            bool               maximized  = false;
            bool               minimized  = false;
            bool               has_focus  = false;
            bool               fullscreen = false;
            f32                dpi        = 1.f;
            math::Extent2<u32> extent;
            math::Extent2<u32> framebuffer_extent;
        } m_state;

        KeyboardState m_keyboard_state;
        MouseState    m_mouse_state;
    };
} // namespace stormkit::wsi::linux::x11

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::linux::x11 {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl() noexcept {
        xcb::init();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl(std::string               title,
                                  const math::Extent2<u32>& extent,
                                  WindowFlag                flags) noexcept {
        create(std::move(title), extent, flags);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::operator=(WindowImpl&&) noexcept -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_open() const noexcept -> bool {
        return m_open;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::visible() const noexcept -> bool {
        return m_state.visible;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::title() const noexcept -> const std::string& {
        return m_title;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto WindowImpl::set_extent(const math::Extent2<u32>& extent) noexcept -> void {
        m_state.extent = extent;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::extent() const noexcept -> math::Extent2<u32> {
        return m_state.extent;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::framebuffer_extent() const noexcept -> math::Extent2<u32> {
        return m_state.framebuffer_extent;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::fullscreen() const noexcept -> bool {
        return m_state.fullscreen;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_confined(u32) const noexcept -> bool {
        return m_mouse_state.confined;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_locked(u32) const noexcept -> bool {
        return m_mouse_state.locked;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_hidden(u32) const noexcept -> bool {
        return m_mouse_state.hidden;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_mouse_relative(u32) const noexcept -> bool {
        return m_mouse_state.relative;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_key_repeat_enabled(u32) const noexcept -> bool {
        return m_key_repeat_enabled;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_virtual_keyboard_visible() const noexcept -> bool {
        return m_virtual_keyboard_visible;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::native_handle() const noexcept -> NativeHandle {
        return std::bit_cast<NativeHandle>(&m_handles);
    }
} // namespace stormkit::wsi::linux::x11
