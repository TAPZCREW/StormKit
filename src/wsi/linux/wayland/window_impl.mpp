// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <wayland-client-protocol.h>
#include <xdg-shell.h>

#include <xdg-decoration-unstable-v1.h>

#include <stormkit/core/flags_macro.hpp>
#include <stormkit/core/memory_macro.hpp>
#include <stormkit/core/platform_macro.hpp>

export module stormkit.wsi:linux.wayland.window_impl;

import std;

import stormkit.core;
import stormkit.wsi;

import :common.window_impl_base;

import :linux.wayland;
import :linux.wayland.context;

export {
    namespace stormkit::wsi::linux::wayland {
        class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
          public:
            struct Handles {
                wl_display* display;
                wl_surface* surface;
            };

            WindowImpl();
            WindowImpl(std::string title, const math::Extent2<u32>& extent, WindowStyle style);
            ~WindowImpl();

            WindowImpl(const WindowImpl&) noexcept                    = delete;
            auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

            WindowImpl(WindowImpl&&) noexcept;
            auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

            auto create(std::string               title,
                        const math::Extent2<u32>& size,
                        WindowStyle               style) noexcept -> void;
            auto close() noexcept -> void;

            auto clear(const RGBColorU& color) noexcept -> void;
            auto set_pixels_to(std::span<const RGBColorU> colors) noexcept -> void;

            [[nodiscard]]
            auto is_open() const noexcept -> bool;

            [[nodiscard]]
            auto poll_event(Event& event) noexcept -> bool;
            [[nodiscard]]
            auto wait_event(Event& event) noexcept -> bool;

            [[nodiscard]]
            auto visible() const noexcept -> bool;

            auto set_title(std::string title) noexcept -> void;
            [[nodiscard]]
            auto title() const noexcept -> const std::string&;

            auto set_extent(const math::Extent2<u32>& extent) noexcept -> void;
            [[nodiscard]]
            auto extent() const noexcept -> const math::Extent2<u32>&;

            auto set_fullscreen(bool fullscreen) noexcept -> void;
            [[nodiscard]]
            auto fullscreen() const noexcept -> bool;

            auto confine_mouse(bool confined, u32 mouse_id) noexcept -> void;
            [[nodiscard]]
            auto is_mouse_confined(u32 mouse_id) const noexcept -> bool;

            auto lock_mouse(bool locked, u32 mouse_id) noexcept -> void;
            [[nodiscard]]
            auto is_mouse_locked(u32 mouse_id) const noexcept -> bool;

            auto hide_mouse(bool hidden, u32 mouse_id) noexcept -> void;
            [[nodiscard]]
            auto is_mouse_hidden(u32 mouse_id) const noexcept -> bool;

            auto set_relative_mouse(bool enabled, u32 mouse_id) noexcept -> void;
            [[nodiscard]]
            auto is_mouse_relative(u32 mouse_id) const noexcept -> bool;

            auto set_key_repeat(bool enabled, u32 keyboard_id) noexcept -> void;
            [[nodiscard]]
            auto is_key_repeat_enabled(u32 keyboard_id) const noexcept -> bool;

            auto show_virtual_keyboard(bool visible) noexcept -> void;
            [[nodiscard]]
            auto is_virtual_keyboard_visible() const noexcept -> bool;

            auto set_mouse_position(const math::vec2i& position, u32 mouse_id) noexcept -> void;
            static auto set_mouse_position_on_desktop(const math::vec2u& position,
                                                      u32                mouse_id) noexcept -> void;

            [[nodiscard]]
            static auto get_monitor_settings() -> std::vector<Monitor>;

            [[nodiscard]]
            auto native_handle() const noexcept -> NativeHandle;

            auto handle_xdg_surface_configure(u32) noexcept -> void;
            auto handle_xdg_surface_close() noexcept -> void;

            auto handle_xdg_top_level_configure(u32,
                                                u32,
                                                std::span<const xdg_toplevel_state>) noexcept
              -> void;
            auto handle_surface_enter(wl_surface*, wl_output*) noexcept -> void;

            auto handle_keyboard_key(Key, char, bool) noexcept -> void;

            auto handle_pointer_enter(wl_pointer*, wl::PointerState&) noexcept -> void;
            auto handle_pointer_leave() noexcept -> void;
            auto handle_pointer_motion(wl_fixed_t, wl_fixed_t) noexcept -> void;
            auto handle_pointer_button(u32, u32, wl_fixed_t, wl_fixed_t) noexcept -> void;

          private:
            auto reallocate_pixel_buffer() noexcept -> void;

            auto hide_mouse(bool hidden, wl_pointer*, wl::PointerState&) noexcept -> void;
            auto set_cursor(std::string_view, wl_pointer*, wl::PointerState&) noexcept -> void;

            auto handle_key_repeat() noexcept -> void;

            u8 m_scale = 2u;

            bool        m_configured         = false;
            bool        m_open               = false;
            bool        m_key_repeat_enabled = false;
            bool        m_scale_content      = true;
            WindowStyle m_style;
            wl_output*  m_current_output = nullptr;

            wl::Surface               m_surface;
            wl::XDGSurface            m_xdg_surface;
            wl::XDGTopLevel           m_xdg_top_level;
            wl::XDGTopLevelDecoration m_xdg_top_level_decoration;
            wl::ContentType           m_content_type;
            wl::Viewport              m_viewport;

            DeferInit<SHMBuffer> m_shm_buffer;
            wl::ShmPool          m_shm_pool;
            wl::Buffer           m_pixel_buffer;

            std::string m_title;

            Handles m_handles;

            struct {
                bool               visible    = false;
                bool               maximized  = false;
                bool               minimized  = false;
                bool               has_focus  = false;
                bool               fullscreen = false;
                math::Extent2<u32> extent;
            } m_state;

            struct {
                std::optional<bool> maximized;
                std::optional<bool> activated;
                std::optional<bool> fullscreen;
                std::optional<bool> suspended;

                std::optional<math::Extent2<u32>> resizing;
            } m_pending_state;
        };
    } // namespace stormkit::wsi::linux::wayland
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::linux::wayland {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_open() const noexcept -> bool {
        return m_open;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::visible() const noexcept -> bool {
        return m_state.visible;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::title() const noexcept -> const std::string& {
        return m_title;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::extent() const noexcept -> const math::Extent2<u32>& {
        return m_state.extent;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::fullscreen() const noexcept -> bool {
        return m_state.fullscreen;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    inline auto WindowImpl::is_virtual_keyboard_visible() const noexcept -> bool {
        return false;
    }
} // namespace stormkit::wsi::linux::wayland
