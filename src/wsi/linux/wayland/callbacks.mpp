// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <pointer-constraints-unstable-v1.h>
#include <relative-pointer-unstable-v1.h>
#include <wayland-client.h>
#include <xdg-decoration-unstable-v1.h>
#include <xdg-shell.h>

export module stormkit.wsi:linux.wayland.callbacks;

import std;

import stormkit.core;

import :linux.wayland.log;

namespace stormkit::wsi::linux::wayland {
    /////////////////////////////////////
    /////////////////////////////////////
    auto registry_handler(void*        data,
                          wl_registry* registry,
                          u32       id,
                          const char*  interface,
                          u32       version) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto registry_remover_handler(void* data, wl_registry* registry, u32 id) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surface_enter_handler(void* data, wl_surface* surface, wl_output* output) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surface_leave_handler(void* data, wl_surface* surface, wl_output* output) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto top_level_configure_handler(void*         data,
                                     xdg_toplevel* xdg_tl,
                                     i32         width,
                                     i32         height,
                                     wl_array*     states) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto top_level_close_handler(void* data, xdg_toplevel* xdg_tl) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto surface_configure_handler(void* data, xdg_surface* surface, u32 serial) noexcept
        -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto shell_ping_handler(void* data, xdg_wm_base* xdg_shell, u32 serial) noexcept -> void;

    auto shell_surface_configure_handler(void*             data,
                                         wl_shell_surface* shell_surface,
                                         u32            edges,
                                         i32             width,
                                         i32             height) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto shell_ping_handler(void* data, wl_shell_surface* shell_surface, u32 serial) noexcept
        -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto relative_pointer_relative_motion_handler(void*                    data,
                                                  zwp_relative_pointer_v1* pointer,
                                                  u32                   time_hi,
                                                  u32                   time_lw,
                                                  wl_fixed_t               dx,
                                                  wl_fixed_t               dy,
                                                  wl_fixed_t               dx_unaccel,
                                                  wl_fixed_t dy_unaccel) noexcept -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto locker_pointer_locker_handler(void* data, zwp_locked_pointer_v1* locked_pointer) noexcept
        -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    auto locker_pointer_unlocker_handler(void* data, zwp_locked_pointer_v1* locked_pointer) noexcept
        -> void;
} // namespace stormkit::wsi::linux::wayland

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////
