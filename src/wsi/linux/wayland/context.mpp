
// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <wayland-client.h>
#include <xdg-shell.h>

#include <pointer-constraints-unstable-v1.h>
#include <relative-pointer-unstable-v1.h>
#include <xdg-decoration-unstable-v1.h>

#include <stormkit/core/flags_macro.hpp>

export module stormkit.wsi:linux.wayland.context;

import std;

import stormkit.core;

import :linux.common.fd;
import :linux.common.xkb;
import :linux.wayland;
import :linux.wayland.input;

export namespace stormkit::wsi::linux::wayland {
    class WindowImpl;

    namespace wl {
        struct WaylandMonitor {
            uptr         id;
            wsi::Monitor monitor;
        };

        struct Globals {
            bool                         initialized = false;
            wl::Display                  display;
            wl::Registry                 registry;
            wl::Compositor               compositor;
            std::vector<wl::Output>      outputs;
            wl::XDGWmBase                xdg_wm_base;
            wl::Shm                      shm;
            wl::XDGDecorationManager     decoration_manager;
            wl::Seat                     seat;
            wl::SinglePixelBufferManager single_pixel_buffer_manager;
            wl::Viewporter               viewporter;
            wl::CursorShapeManager       cursor_shape_manager;
            wl::CursorShapeDevice        cursor_shape_device;
            wl::PointerWarp              pointer_warp;
            wl::PointerConstraints       pointer_constraints;
            wl::ContentTypeManager       content_type_manager;

            wl::CursorTheme cursor_theme;
            wl::CursorTheme cursor_theme_high_dpi;

            std::vector<std::pair<Keyboard, KeyboardState>> keyboards;
            std::vector<std::pair<Pointer, PointerState>>   pointers;
            std::vector<std::pair<Touch, TouchState>>       touchs;

            wl::RelativePointerManager relative_pointer_manager;

            std::vector<WaylandMonitor> monitors;

            std::vector<std::pair<wl_surface*, WindowImpl*>> windows;

            common::xkb::Context xkb_context;
        };

        auto init() noexcept -> bool;
        auto get_globals() noexcept -> Globals&;
    } // namespace wl
} // namespace stormkit::wsi::linux::wayland

FLAG_ENUM(stormkit::wsi::linux::wayland::wl::PointerState::Flag);
