// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include "macos_window.hpp"

#include <stormkit/core/platform_macro.hpp>

export module stormkit.wsi:macos.window_impl;

import std;

import stormkit.core;
import stormkit.wsi;

import :common.window_impl_base;

export namespace stormkit::wsi::macos {
    class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
      public:
        WindowImpl(WM wm) noexcept;
        WindowImpl(WM wm, std::string title, const math::Extent2<u32>& size, WindowStyle style);
        ~WindowImpl();

        WindowImpl(const WindowImpl&) noexcept                    = delete;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

        WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const math::Extent2<u32>& size, WindowStyle style) -> void;
        auto close() noexcept -> void;

        [[nodiscard]]
        auto poll_event(Event& event) noexcept -> bool;
        [[nodiscard]]
        auto wait_event(Event& event) noexcept -> bool;

        auto set_title(std::string title) noexcept -> void;

        auto set_extent(const math::Extent2<u32>& extent) noexcept -> void;

        auto toggle_fullscreen(bool enabled) noexcept -> void;

        auto lock_mouse() noexcept -> void;
        auto unlock_mouse() noexcept -> void;

        auto hide_mouse() noexcept -> void;
        auto unhide_mouse() noexcept -> void;

        [[nodiscard]]
        auto extent() const noexcept -> math::Extent2<u32>;
        [[nodiscard]]
        auto title() const noexcept -> const std::string&;

        [[nodiscard]]
        auto is_open() const noexcept -> bool;
        [[nodiscard]]
        auto visible() const noexcept -> bool;

        [[nodiscard]]
        auto native_handle() const noexcept -> NativeHandle;

        [[nodiscard]]
        auto is_mouse_locked() const noexcept -> bool;
        [[nodiscard]]
        auto is_mouse_hided() const noexcept -> bool;
        [[nodiscard]]
        auto fullscreen() const noexcept -> bool;

        auto toggle_key_repeat(bool enabled) noexcept -> void;
        [[nodiscard]]
        auto is_key_repeat_enabled() const noexcept -> bool;

        auto toggle_virtual_keyboard_visibility(bool visible) noexcept -> void;

        auto        set_mouse_position(const math::Vector2I& position) noexcept -> void;
        static auto set_mouse_position_on_desktop(WM wm, const math::Vector2U& position) noexcept
            -> void;

        [[nodiscard]]
        static auto get_monitor_settings(WM wm) -> std::vector<Monitor>;

      private:
        std::unique_ptr<macOSWindow> m_window;
    };
} // namespace stormkit::wsi::macos

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::macos {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::WindowImpl(WM _) noexcept {};

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    WindowImpl::WindowImpl(WM wm, std::string title, const math::Extent2<u32>& size, WindowStyle style)
        : WindowImpl { wm } {
        create(std::move(title), size, style);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::~WindowImpl() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::operator=(WindowImpl&&) noexcept
        -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::create(std::string          title,
                                                  const math::Extent2<u32>& size,
                                                  WindowStyle          style) -> void {
        m_window = allocate<macOSWindow>(std::move(title),
                                         size.width,
                                         size.height,
                                         as<int>(as<Underlying>(style)))
                       .transform_error(monadic::assert())
                       .value();

        m_window->mouse_down_event = [this](int button, i32 x, i32 y) noexcept {
            WindowImplBase::mouse_down_event(as<MouseButton>(as<u8>(button)), x, y);
        };
        m_window->mouse_up_event = [this](int button, i32 x, i32 y) noexcept {
            WindowImplBase::mouse_up_event(as<MouseButton>(as<u8>(button)), x, y);
        };
        m_window->mouse_move_event
            = [this](i32 x, i32 y) noexcept { WindowImplBase::mouse_move_event(x, y); };
        m_window->mouse_entered_event
            = [this]() noexcept { WindowImplBase::mouse_entered_event(); };
        m_window->mouse_exited_event = [this]() noexcept { WindowImplBase::mouse_exited_event(); };
        m_window->key_down_event     = [this](int key, char c) noexcept {
            WindowImplBase::key_down_event(as<Key>(as<u8>(key)), c);
        };
        m_window->key_up_event = [this](int key, char c) noexcept {
            WindowImplBase::key_up_event(as<Key>(as<u8>(key)), c);
        };
        m_window->close_event  = [this]() noexcept { WindowImplBase::close_event(); };
        m_window->resize_event = [this](u32 width, u32 height) noexcept {
            WindowImplBase::resize_event(width, height);
        };
        m_window->minimize_event     = [this]() noexcept { WindowImplBase::minimize_event(); };
        m_window->maximize_event     = [this]() noexcept { WindowImplBase::maximize_event(); };
        m_window->lost_focus_event   = [this]() noexcept { WindowImplBase::lost_focus_event(); };
        m_window->gained_focus_event = [this]() noexcept { WindowImplBase::gained_focus_event(); };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::poll_event(Event& event) noexcept -> bool {
        expects(m_window != nullptr);
        m_window->poll_event();

        return WindowImplBase::poll_event(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::wait_event(Event& event) noexcept -> bool {
        expects(m_window != nullptr);
        m_window->wait_event();

        return WindowImplBase::wait_event(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::set_title(std::string title) noexcept -> void {
        expects(m_window != nullptr);
        m_window->set_title(std::move(title));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::set_extent(const math::Extent2<u32>& extent) noexcept
        -> void {
        expects(m_window != nullptr);
        m_window->set_extent(extent.width, extent.height);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::toggle_fullscreen(bool enabled) noexcept -> void {
        expects(m_window != nullptr);
        m_window->toggle_fullscreen(enabled);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::lock_mouse() noexcept -> void {
        expects(m_window != nullptr);
        m_window->lock_mouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::unlock_mouse() noexcept -> void {
        expects(m_window != nullptr);
        m_window->unlock_mouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::hide_mouse() noexcept -> void {
        expects(m_window != nullptr);
        m_window->hide_mouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::unhide_mouse() noexcept -> void {
        expects(m_window != nullptr);
        m_window->unhide_mouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::extent() const noexcept -> math::Extent2<u32> {
        expects(m_window != nullptr);
        return { m_window->width(), m_window->height() };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::toggle_key_repeat(bool enabled) noexcept -> void {
        expects(m_window != nullptr);
        m_window->toggle_key_repeat(enabled);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::toggle_virtual_keyboard_visibility(bool visible) noexcept
        -> void {
        expects(m_window != nullptr);
        m_window->toggle_virtual_keyboard_visibility(visible);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        WindowImpl::set_mouse_position(const math::Vector2I& position) noexcept -> void {
        expects(m_window != nullptr);
        m_window->set_mouse_position(position.x, position.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        WindowImpl::set_mouse_position_on_desktop(WM _, const math::Vector2U& position) noexcept
        -> void {
        macOSWindow::set_mouse_position_on_desktop(position.x, position.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::get_monitor_settings(WM _) -> std::vector<Monitor> {
        return macOSWindow::get_monitor_settings()
               | std::views::transform([](auto&& monitor) noexcept {
                     return Monitor {
                         .flags   = narrow<Monitor::Flags>(monitor.flags),
                         .name    = std::move(monitor.name),
                         .extents = monitor.extents
                                    | std::views::transform([](auto&& extent) noexcept {
                                          return math::Extent2<u32> { extent.width, extent.height };
                                      })
                                    | std::ranges::to<std::vector>(),
                         .handle = monitor.handle,
                     };
                 })
               | std::ranges::to<std::vector>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::close() noexcept -> void {
        m_window.reset();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::title() const noexcept -> const std::string& {
        expects(m_window != nullptr);
        return m_window->title();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::is_open() const noexcept -> bool {
        return m_window != nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::visible() const noexcept -> bool {
        expects(m_window != nullptr);
        return m_window->visible();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::is_mouse_locked() const noexcept -> bool {
        expects(m_window != nullptr);
        return m_window->is_mouse_locked();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::is_mouse_hided() const noexcept -> bool {
        expects(m_window != nullptr);
        return m_window->is_mouse_hided();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::fullscreen() const noexcept -> bool {
        expects(m_window != nullptr);
        return m_window->fullscreen();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::is_key_repeat_enabled() const noexcept -> bool {
        expects(m_window != nullptr);
        return m_window->is_key_repeat_enabled();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::native_handle() const noexcept -> NativeHandle {
        expects(m_window != nullptr);
        return std::bit_cast<NativeHandle>(&m_window->macos_handles());
    }
} // namespace stormkit::wsi::macos
