

#ifdef STORMKIT_BUILD_MODULES
export module Renderer;

import std;

import stormkit.core;
import stormkit.Wsi;
import stormkit.Gpu;

export {
#else
    #include <stormkit/std.hpp>

    #include <stormkit.core.hpp>
    #include <stormkit/Gpu.hpp>
    #include <stormkit/Wsi.hpp>
#endif

    class Renderer {
      public:
        Renderer(const stormkit::wsi::Window& window);
        ~Renderer();

        Renderer(const Renderer&)                    = delete;
        auto operator=(const Renderer&) -> Renderer& = delete;

        Renderer(Renderer&&) noexcept;
        auto operator=(Renderer&&) noexcept -> Renderer&;

        auto renderFrame() -> void;

        auto updateBoard(const stormkit::image::Image& board) -> void;

      private:
        auto doInitBaseRenderObjects() -> void;
        auto doInitMeshRenderObjects() -> void;
        auto doInitPerFrameObjects() -> void;

        const stormkit::wsi::Window* m_window = nullptr;

        std::unique_ptr<stormkit::gpu::Instance> m_instance;
        std::unique_ptr<stormkit::gpu::Device>   m_device;
        std::unique_ptr<stormkit::gpu::Surface>  m_surface;
        stormkit::gpu::Fence*                    m_current_fence = nullptr;

        const stormkit::gpu::Queue*           m_queue = nullptr;
        std::vector<stormkit::gpu::ImageView> m_surface_views;

        std::unique_ptr<stormkit::gpu::DescriptorSetLayout> m_descriptor_set_layout;
        std::unique_ptr<stormkit::gpu::DescriptorPool>      m_descriptor_pool;

        std::unique_ptr<stormkit::gpu::RenderPass> m_render_pass;

        struct Board {
            std::vector<stormkit::gpu::Image>       images;
            std::vector<stormkit::gpu::ImageView>   image_views;
            std::unique_ptr<stormkit::gpu::Sampler> sampler;

            stormkit::UInt32 current_image = 0;

            std::unique_ptr<stormkit::gpu::Shader> vertex_shader;
            std::unique_ptr<stormkit::gpu::Shader> fragment_shader;

            std::unique_ptr<stormkit::gpu::GraphicsPipeline> pipeline;

            std::unique_ptr<stormkit::gpu::DescriptorSet> descriptor_set;
        } m_board;

        std::vector<stormkit::gpu::CommandBuffer> m_command_buffers;
        std::vector<stormkit::gpu::Framebuffer>   m_framebuffers;
    };

#ifdef STORMKIT_BUILD_MODULES
}
#endif
