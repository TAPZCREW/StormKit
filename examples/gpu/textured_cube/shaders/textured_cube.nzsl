[nzsl_version("1.0")]

module Shader;

struct VertIn {
    [location(0)]
    position: vec3[f32],
    [location(1)]
    uv: vec2[f32]
}

struct VertOut {
    [builtin(position)]
    position: vec4[f32],
    [location(0)]
    uv: vec2[f32]
}

[layout(std140)]
struct ViewerData {
    proj: mat4[f32],
    view: mat4[f32],
    model: mat4[f32]
}

external {
    [binding(0)]
    viewer: uniform[ViewerData]
}

[entry(vert)]
fn main(input: VertIn) -> VertOut {
    let output: VertOut;

    output.position = viewer.proj * viewer.view * viewer.model * vec4[f32](input.position, 1.);
    output.uv = input.uv;

    return output;
}

struct FragOut {
    [location(0)]
    color: vec4[f32]
}

external {
    [binding(1)]
    texture: sampler2D[f32]
}

[entry(frag)]
fn main(input: VertOut) -> FragOut {
    let output: FragOut;
    output.color = texture.Sample(input.uv);

    return output;
}
