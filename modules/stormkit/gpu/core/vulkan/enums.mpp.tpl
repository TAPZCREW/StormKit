/*
    AUTOGENERATED FILE, DO NOT MODIFY
*/

module;

#include <stormkit/core/platform_macro.hpp>
#include <stormkit/core/flags_macro.hpp>

#include <volk.h>

export module stormkit.gpu.core:vulkan.enums;

import std;
import stormkit.core;

import :vulkan.volk;
{%
    import("core.base.json")
    local json_data = json.loadfile("modules/stormkit/gpu/core/vulkan/mapping.json")
%}

export {
    namespace stormkit::gpu {
        namespace details {
            template <meta::IsEnumeration>
            inline constexpr auto IS_VULKAN_ENUMERATION = false;
        }

        namespace meta {
            template<typename T>
            concept IsVulkanEnumeration = core::meta::IsEnumeration<T> and details::IS_VULKAN_ENUMERATION<T>;
        }

        inline constexpr auto QUEUE_FAMILY_IGNORED = std::numeric_limits<u32>::max();
        {% for name, enumeration in table.orderpairs(json_data) do %}
        enum class {% outfile:write(name) %} : {% outfile:write(enumeration["type"]) %} {
           {% for val_name, value in table.orderpairs(enumeration["values"]) do outfile:write(val_name) %} = {% outfile:write(value["vulkan"]) %},
           {% end %}
        };

        template <>
        inline constexpr auto details::IS_VULKAN_ENUMERATION<{% outfile:write(name) %}> = true;
        {% end %}

        template<typename T = VkFlags, meta::IsVulkanEnumeration U>
            requires(core::meta::IsPlainEnumeration<T> or core::meta::Is<T, VkFlags>)
        [[nodiscard]]
        constexpr auto to_vk(U value) noexcept -> T;

        template<meta::IsVulkanEnumeration T, typename U>
            requires(core::meta::IsPlainEnumeration<U> or core::meta::Is<U, VkFlags>)
        [[nodiscard]]
        constexpr auto from_vk(U value) noexcept -> T;

        [[nodiscard]]
        constexpr auto is_depth_only_format(PixelFormat format) noexcept -> bool;
        [[nodiscard]]
        constexpr auto is_depth_stencil_format(PixelFormat format) noexcept -> bool;
        [[nodiscard]]
        constexpr auto is_depth_format(PixelFormat format) noexcept -> bool;

        [[nodiscard]]
        constexpr auto get_format_channel_count(PixelFormat format) noexcept -> u8;
        [[nodiscard]]
        constexpr auto get_format_element_count(PixelFormat format) noexcept -> u8;
    }
    {% for name, enumeration in table.orderpairs(json_data) do %}FLAG_ENUM(stormkit::gpu::{% outfile:write(name) %})
    template<>
    STORMKIT_FORCE_INLINE
    STORMKIT_CONST
    constexpr auto stormkit::core::meta::enumerate<stormkit::gpu::{% outfile:write(name) %}>() noexcept -> decltype(auto) {
        return std::array {
           {% for val_name, value in table.orderpairs(enumeration["values"]) do %}stormkit::gpu::{% outfile:write(name) %}::{% outfile:write(val_name) %},
           {% end %}
        };
    }
    template<>
    STORMKIT_FORCE_INLINE
    STORMKIT_CONST
    constexpr auto stormkit::core::as_string<stormkit::gpu::{% outfile:write(name) %}>(stormkit::gpu::{% outfile:write(name) %} value) noexcept -> std::string_view {
        switch(value) {
           {% for val_name, value in table.orderpairs(enumeration["values"]) do %}case stormkit::gpu::{% outfile:write(name) %}::{% outfile:write(val_name) %}: return "{%  outfile:write(name) %}::{% outfile:write(val_name) %}";
           {% end %}
        }
        std::unreachable();
    }
    template<>
    STORMKIT_FORCE_INLINE
    STORMKIT_CONST
    constexpr auto stormkit::core::to_string<stormkit::gpu::{% outfile:write(name) %}>(stormkit::gpu::{% outfile:write(name) %} value) noexcept -> std::string {
        switch(value) {
           {% for val_name, value in table.orderpairs(enumeration["values"]) do %}case stormkit::gpu::{% outfile:write(name) %}::{% outfile:write(val_name) %}: return "{%  outfile:write(name) %}::{% outfile:write(val_name) %}";
           {% end %}
        }
        std::unreachable();
    }
    {% end %}
        // enum class Format : u8 {
        //     BYTE,
        //     BYTE2,
        //     BYTE3,
        //     BYTE4,

        //    BYTE_NORM,
        //    BYTE2_NORM,
        //    BYTE3_NORM,
        //    BYTE4_NORM,

        //    BYTE_SCALED,
        //    BYTE2_SCALED,
        //    BYTE3_SCALED,
        //    BYTE4_SCALED,

        //    UBYTE,
        //    UBYTE2,
        //    UBYTE3,
        //    UBYTE4,

        //    UBYTE_NORM,
        //    UBYTE2_NORM,
        //    UBYTE3_NORM,
        //    UBYTE4_NORM,

        //    UBYTE_UCALED,
        //    UBYTE2_UCALED,
        //    UBYTE3_UCALED,
        //    UBYTE4_UCALED,

        //    SHORT,
        //    SHORT2,
        //    SHORT3,
        //    SHORT4,

        //    SHORT_NORM,
        //    SHORT2_NORM,
        //    SHORT3_NORM,
        //    SHORT4_NORM,

        //    SHORT_SCALED,
        //    SHORT2_SCALED,
        //    SHORT3_SCALED,
        //    SHORT4_SCALED,

        //    USHORT,
        //    USHORT2,
        //    USHORT3,
        //    USHORT4,

        //    USHORT_NORM,
        //    USHORT2_NORM,
        //    USHORT3_NORM,
        //    USHORT4_NORM,

        //    USHORT_UCALED,
        //    USHORT2_UCALED,
        //    USHORT3_UCALED,
        //    USHORT4_UCALED,

        //    INT,
        //    INT2,
        //    INT3,
        //    INT4,

        //    UINT,
        //    UINT2,
        //    UINT3,
        //    UINT4,

        //    LONG,
        //    LONG2,
        //    LONG3,
        //    LONG4,

        //    ULONG,
        //    ULONG2,
        //    ULONG3,
        //    ULONG4,

        //    FLOAT,
        //    FLOAT2,
        //    FLOAT3,
        //    FLOAT4,

        //    DOUBLE,
        //    DOUBLE2,
        //    DOUBLE3,
        //    DOUBLE4,

        //    UNDEFINED,
        // };
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto is_depth_only_format(PixelFormat format) noexcept -> bool {
        return format == PixelFormat::DEPTH16_UNORM
               or format == PixelFormat::DEPTH24_UNORM_PACK32
               or format == PixelFormat::DEPTH32F;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto is_depth_stencil_format(PixelFormat format) noexcept -> bool {
        return format == PixelFormat::DEPTH16_UNORM_STENCIL8U
               or format == PixelFormat::DEPTH24_UNORM_STENCIL8U
               or format == PixelFormat::DEPTH32F_STENCIL8U;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto is_depth_format(PixelFormat format) noexcept -> bool {
        return is_depth_only_format(format) or is_depth_stencil_format(format);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto get_format_channel_count(PixelFormat format) noexcept -> u8 {
        switch (format) {
            case PixelFormat::R8_SNORM:
            case PixelFormat::R8_UNORM:
            case PixelFormat::R16_SNORM:
            case PixelFormat::R16_UNORM:
            case PixelFormat::R8I:
            case PixelFormat::R8U:
            case PixelFormat::R16I:
            case PixelFormat::R16U:
            case PixelFormat::R32I:
            case PixelFormat::R32U:
            case PixelFormat::R16F:
            case PixelFormat::R32F:
            case PixelFormat::DEPTH16_UNORM:
            case PixelFormat::DEPTH24_UNORM_PACK32:
            case PixelFormat::DEPTH32F: return 1;

            case PixelFormat::RG8_SNORM:
            case PixelFormat::RG8_UNORM:
            case PixelFormat::RG16_SNORM:
            case PixelFormat::RG16_UNORM:
            case PixelFormat::RG8I:
            case PixelFormat::RG8U:
            case PixelFormat::RG16I:
            case PixelFormat::RG16U:
            case PixelFormat::RG32I:
            case PixelFormat::RG32U:
            case PixelFormat::RG16F:
            case PixelFormat::RG32F:
            case PixelFormat::DEPTH16_UNORM_STENCIL8U:
            case PixelFormat::DEPTH24_UNORM_STENCIL8U:
            case PixelFormat::DEPTH32F_STENCIL8U: return 2;

            case PixelFormat::RGB8_SNORM:
            case PixelFormat::RGB8_UNORM:
            case PixelFormat::RGB16_SNORM:
            case PixelFormat::RGB16_UNORM:
            case PixelFormat::BGR8_UNORM:
            case PixelFormat::RGB8I:
            case PixelFormat::RGB8U:
            case PixelFormat::RGB16I:
            case PixelFormat::RGB16U:
            case PixelFormat::RGB32I:
            case PixelFormat::RGB32U:
            case PixelFormat::RGB16F:
            case PixelFormat::RGB32F:
            case PixelFormat::SRGB8:
            case PixelFormat::SBGR8:
            case PixelFormat::R5_G6_B5_UNORM_PACK16:
            case PixelFormat::B10_GR11UF_PACK32: return 3;

            case PixelFormat::RGBA8_SNORM:
            case PixelFormat::RGBA8_UNORM:
            case PixelFormat::RGBA16_SNORM:
            case PixelFormat::RGBA16_UNORM:
            case PixelFormat::BGRA8_UNORM:
            case PixelFormat::RGBA8I:
            case PixelFormat::RGBA8U:
            case PixelFormat::RGBA16I:
            case PixelFormat::RGBA16U:
            case PixelFormat::RGBA32I:
            case PixelFormat::RGBA32U:
            case PixelFormat::RGBA16F:
            case PixelFormat::RGBA32F:
            case PixelFormat::SRGBA8:
            case PixelFormat::SBGRA8: return 4;

            default: break;
        }

        return 0u;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto get_format_element_count(PixelFormat format) noexcept -> u8 {
        switch (format) {
            case PixelFormat::R8_SNORM:
            case PixelFormat::R8_UNORM:
            case PixelFormat::RG8_SNORM:
            case PixelFormat::RG8_UNORM:
            case PixelFormat::R8I:
            case PixelFormat::R8U:
            case PixelFormat::RG8I:
            case PixelFormat::RG8U:
            case PixelFormat::RGB8_SNORM:
            case PixelFormat::RGB8_UNORM:
            case PixelFormat::BGR8_UNORM:
            case PixelFormat::RGB8I:
            case PixelFormat::RGB8U:
            case PixelFormat::RGBA8_SNORM:
            case PixelFormat::RGBA8_UNORM:
            case PixelFormat::RGBA16_SNORM:
            case PixelFormat::BGRA8_UNORM:
            case PixelFormat::SRGB8:
            case PixelFormat::SBGR8:
            case PixelFormat::SRGBA8:
            case PixelFormat::SBGRA8: return 1u;

            case PixelFormat::R16_SNORM:
            case PixelFormat::R16_UNORM:
            case PixelFormat::R16I:
            case PixelFormat::R16U:
            case PixelFormat::RG16_SNORM:
            case PixelFormat::RG16_UNORM:
            case PixelFormat::RG16I:
            case PixelFormat::RG16U:
            case PixelFormat::RG16F:
            case PixelFormat::RGB16I:
            case PixelFormat::RGB16U:
            case PixelFormat::RGB16F:
            case PixelFormat::RGBA16I:
            case PixelFormat::RGBA16U:
            case PixelFormat::RGBA16F:
            case PixelFormat::R16F: return 2u;

            case PixelFormat::R32I:
            case PixelFormat::R32U:
            case PixelFormat::R32F:
            case PixelFormat::RG32I:
            case PixelFormat::RG32U:
            case PixelFormat::RG32F:
            case PixelFormat::RGB16_SNORM:
            case PixelFormat::RGB32I:
            case PixelFormat::RGB32U:
            case PixelFormat::RGB32F:
            case PixelFormat::RGBA8I:
            case PixelFormat::RGBA8U:
            case PixelFormat::RGBA32I:
            case PixelFormat::RGBA32U:
            case PixelFormat::RGBA32F: return 4u;

            default: break;
        }

        return 0u;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T = VkFlags, meta::IsVulkanEnumeration U>
        requires(core::meta::IsPlainEnumeration<T> or core::meta::Is<T, VkFlags>)
    STORMKIT_FORCE_INLINE
    STORMKIT_INTRINSIC
    constexpr auto to_vk(U value) noexcept -> T{
        return narrow<T>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsVulkanEnumeration T, typename U>
        requires(core::meta::IsPlainEnumeration<U> or core::meta::Is<U, VkFlags>)
    STORMKIT_FORCE_INLINE
    STORMKIT_INTRINSIC
    constexpr auto from_vk(U value) noexcept -> T {
        return narrow<T>(value);
    }
}

{% for name, enumeration in table.orderpairs(json_data) do %}
    template stormkit::gpu::{% outfile:write(name) %} stormkit::gpu::from_vk<stormkit::gpu::{% outfile:write(name) %}, VkFlags>(VkFlags);
    template stormkit::gpu::{% outfile:write(name) %} stormkit::gpu::from_vk<stormkit::gpu::{% outfile:write(name) %}, {% outfile:write(enumeration.vktype) %}>({% outfile:write(enumeration.vktype) %});
    template VkFlags stormkit::gpu::to_vk<VkFlags>(stormkit::gpu::{% outfile:write(name) %});
    template {% outfile:write(enumeration.vktype) %} stormkit::gpu::to_vk<{% outfile:write(enumeration.vktype) %}>(stormkit::gpu::{% outfile:write(name) %});
{% end %}

