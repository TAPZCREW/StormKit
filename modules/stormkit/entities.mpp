// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#include <stormkit/core/memory_macro.hpp>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.entities;

import std;

import stormkit.core;

namespace stdr = std::ranges;
namespace stdv = std::views;

export namespace stormkit::entities {
    using Entity                         = u32;
    inline constexpr auto INVALID_ENTITY = Entity { 0 };
    class System;

    struct EntityHashFunc {
#ifdef STORMKIT_COMPILER_MSVC
        [[nodiscard]]
        auto operator()(Entity k) const noexcept -> Hash64;
#else
        [[nodiscard]]
        static auto operator()(Entity k) noexcept -> Hash64;
#endif
    };

    struct Component {
        using Type = u64;

        static constexpr Type INVALID_TYPE = 0;
        static constexpr Type TYPE         = INVALID_TYPE;
    };

    namespace meta {
        template<typename T>
        concept IsComponentType = core::meta::Is<Component, T> and requires(T&& component) {
            T::TYPE;
        };

        template<typename T>
        concept IsSystem = core::meta::Is<T, System>;
    } // namespace meta

    template<class Result>
    constexpr auto component_hash(std::string_view str) noexcept -> Result;

    constexpr auto component_hash(CZString str, usize size) noexcept -> Component::Type;

    constexpr auto component_hash(std::string_view str) noexcept -> Component::Type;

    namespace literals {
        constexpr auto operator""_component_type(CZString str, usize size) -> Component::Type;
    } // namespace literals

    struct Message {
        u32                 id;
        std::vector<Entity> entities;
    };

    class STORMKIT_API MessageBus {
      public:
        MessageBus();
        ~MessageBus();

        MessageBus(const MessageBus&)                    = delete;
        auto operator=(const MessageBus&) -> MessageBus& = delete;

        MessageBus(MessageBus&&);
        auto operator=(MessageBus&&) -> MessageBus&;

        auto push(Message&& message) -> void;
        [[nodiscard]]
        auto top() const -> const Message&;
        auto pop() -> void;

        [[nodiscard]]
        auto empty() const noexcept -> bool;

      private:
        std::queue<Message> m_messages;
    };

    class EntityManager;

    class STORMKIT_API System {
      public:
        using ComponentTypes = HashSet<Component::Type>;

        System(EntityManager& manager, u32 priority, ComponentTypes types);

        System(const System&)                    = delete;
        auto operator=(const System&) -> System& = delete;

        System(System&&) noexcept;
        auto operator=(System&&) noexcept -> System&;

        virtual ~System();

        virtual auto pre_update() -> void;
        virtual auto update(Secondf delta) -> void = 0;
        virtual auto post_update() -> void;

        [[nodiscard]]
        auto priority() const noexcept -> u32;
        [[nodiscard]]
        auto components_used() const noexcept -> const ComponentTypes&;

        auto add_entity(Entity e) -> void;
        auto remove_entity(Entity e) -> void;

        struct Predicate {
#ifdef STORMKIT_COMPILER_MSVC
            [[nodiscard]]
            auto operator()(const std::unique_ptr<System>& s1,
                            const std::unique_ptr<System>& s2) const noexcept
#else
            [[nodiscard]]
            static auto operator()(const std::unique_ptr<System>& s1,
                                   const std::unique_ptr<System>& s2) noexcept
#endif
              -> bool {
                return s1->priority() < s2->priority();
            }
        };

      protected:
        virtual auto on_message_received(const Message& message) -> void = 0;

        Ref<const EntityManager> m_manager;
        HashSet<Entity>          m_entities;

        friend class EntityManager;

      private:
        u32            m_priority;
        ComponentTypes m_types;
    };

    class STORMKIT_API EntityManager {
      public:
        static constexpr auto ADDED_ENTITY_MESSAGE_ID   = 1;
        static constexpr auto REMOVED_ENTITY_MESSAGE_ID = 2;

        explicit EntityManager();
        ~EntityManager();

        EntityManager(const EntityManager&)                    = delete;
        auto operator=(const EntityManager&) -> EntityManager& = delete;

        EntityManager(EntityManager&&);
        auto operator=(EntityManager&&) -> EntityManager&;

        auto make_entity() -> Entity;
        auto destroy_entity(Entity entity) -> void;
        auto destroy_all_entities() -> void;
        auto has_entity(Entity entity) const -> bool;

        template<meta::IsComponentType T, typename... Args>
        auto add_component(Entity entity, Args&&... args) -> T&;

        template<meta::IsComponentType T>
        auto destroy_component(Entity entity) -> void;

        template<meta::IsComponentType T>
        auto has_component(Entity entity) const -> bool;

        auto has_component(Entity entity, Component::Type type) const -> bool;

        auto entities() const noexcept -> const std::vector<Entity>&;

        template<meta::IsComponentType T>
        auto entities_with_component() const -> std::vector<Entity>;

        template<meta::IsComponentType T, class Self>
        auto getComponent(this Self& self, Entity entity) -> core::meta::ForwardConst<Self, T&>;

        template<class Self>
        auto components(this Self& self, Entity entity)
          -> std::vector<Ref<core::meta::ForwardConst<Self, Component>>>;

        template<meta::IsComponentType T, class Self>
        auto components_of_type(this Self& self) noexcept
          -> std::vector<Ref<core::meta::ForwardConst<Self, T>>>;

        template<meta::IsSystem T, typename... Args>
        auto add_system(Args&&... args) -> T&;

        template<meta::IsSystem T>
        auto has_system() const noexcept -> bool;

        template<class Self>
        auto systems(this Self& self) noexcept
          -> std::vector<Ref<core::meta::ForwardConst<Self, System>>>;

        template<meta::IsSystem T, class Self>
        auto get_system(this Self& self) noexcept -> core::meta::ForwardConst<Self, T&>;

        auto step(Secondf delta) -> void;

        auto entity_count() const noexcept -> usize;

        // void commit(Entity e);

      private:
        using ComponentKey = u64;

        static constexpr auto component_key_for(Entity e, Component::Type type) noexcept
          -> ComponentKey;
        static constexpr auto is_key_entity(Entity e, ComponentKey key) noexcept -> bool;

        auto purpose_to_systems(Entity e) -> void;
        auto remove_from_systems(Entity e) -> void;
        auto get_needed_entities(System& system) -> void;

        Entity             m_next_valid_entity = 1;
        std::queue<Entity> m_free_entities;

        HashSet<Entity> m_entities;

        HashSet<Entity> m_added_entities;
        HashSet<Entity> m_updated_entities;
        HashSet<Entity> m_removed_entities;

        HashMap<Entity, std::vector<Component::Type>>        m_registered_components_for_entities;
        std::set<std::unique_ptr<System>, System::Predicate> m_systems;
        HashMap<ComponentKey, std::unique_ptr<Component>>    m_components;

        MessageBus m_message_bus;
    };
} // namespace stormkit::entities

namespace stormkit::entities {
    /////////////////////////////////////
    /////////////////////////////////////
#ifdef STORMKIT_COMPILER_MSVC
    inline auto EntityHashFunc::operator()(Entity k) const noexcept -> Hash64 {
#else
    inline auto EntityHashFunc::operator()(Entity k) noexcept -> Hash64 {
#endif
        return as<Hash64>(k);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class Result>
    constexpr auto component_hash(std::string_view str) noexcept -> Result {
        return std::empty(str)
                 ? 0xcbf29ce484222325UL
                 : (as<Hash64>(str[0]) ^ component_hash<Result>(str.substr(1, std::size(str) - 1)))
                     * 0x100000001b3UL;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto component_hash(CZString str, usize size) noexcept -> Component::Type {
        return size == 0
                 ? 0xcbf29ce484222325UL
                 : (as<usize>(str[0]) ^ component_hash(std::string_view { str + 1, size - 1 }))
                     * 0x100000001b3UL;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto component_hash(std::string_view str) noexcept -> Component::Type {
        return component_hash(std::data(str), std::size(str));
    }

    namespace literals {
        /////////////////////////////////////
        /////////////////////////////////////
        constexpr auto operator""_component_type(CZString str, usize size) -> Component::Type {
            return stormkit::entities::component_hash(str, size);
        }
    } // namespace literals

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto MessageBus::empty() const noexcept -> bool {
        return std::empty(m_messages);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto System::priority() const noexcept -> u32 {
        return m_priority;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto System::components_used() const noexcept -> const ComponentTypes& {
        return m_types;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T, typename... Args>
    auto EntityManager::add_component(Entity entity, Args&&... args) -> T& {
        static_assert(std::is_base_of<Component, T>::value, "T must be a Component");
        static_assert(T::TYPE != Component::INVALID_TYPE, "T must have T::type defined");

        EXPECTS(has_entity(entity));
        EXPECTS(not has_component<T>(entity));

        auto component = std::make_unique<T>(std::forward<Args>(args)...);

        auto type                                     = T::TYPE;
        m_components[component_key_for(entity, type)] = std::move(component);
        m_registered_components_for_entities.at(entity).emplace_back(type);

        m_updated_entities.emplace(entity);

        return getComponent<T>(entity);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T>
    auto EntityManager::destroy_component(Entity entity) -> void {
        static_assert(std::is_base_of<Component, T>::value, "T must be a Component");
        static_assert(T::TYPE != Component::INVALID_TYPE, "T must have T::type defined");

        EXPECTS(has_entity(entity));
        EXPECTS(has_component<T>(entity));

        const auto key = component_key_for(entity, T::TYPE);

        if (m_components.find(key) != stdr::cend(m_components)) m_components.erase(key);

        m_updated_entities.emplace(entity);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T>
    auto EntityManager::has_component(Entity entity) const -> bool {
        static_assert(std::is_base_of<Component, T>::value, "T must be a Component");
        static_assert(T::TYPE != Component::INVALID_TYPE, "T must have T::type defined");

        return has_component(entity, T::TYPE);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto EntityManager::entities() const noexcept -> const std::vector<Entity>& {
        return m_entities.values();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T>
    auto EntityManager::entities_with_component() const -> std::vector<Entity> {
        // clang-format off
        return entities() 
               | stdv::filter([](auto&& entity) static noexcept { return stdr::any_of(entity, T::TYPE); })
               | stdr::to<std::vector>();
        // clang-format on
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T, class Self>
    auto EntityManager::getComponent(this Self& self, Entity entity)
      -> core::meta::ForwardConst<Self, T&> {
        EXPECTS(self.template has_component<T>(entity));
        EXPECTS(self.has_entity(entity));

        const auto key = component_key_for(entity, T::TYPE);
        return *std::bit_cast<T*>(self.m_components.at(key).get());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class Self>
    auto EntityManager::components(this Self& self, Entity entity)
      -> std::vector<Ref<core::meta::ForwardConst<Self, Component>>> {
        if (not self.has_entity(entity)) [[unlikely]]
            return {};
        // clang-format off
        return self.m_components 
               | stdv::filter([entity](auto&& pair) noexcept {
                   return EntityManager::is_key_entity(entity, pair.first);
               }) 
               | stdv::values 
               | stdv::transform(monadic::as_ref()) 
               | stdr::to<std::vector>();
        // clang-format on
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsComponentType T, class Self>
    auto EntityManager::components_of_type(this Self& self) noexcept
      -> std::vector<Ref<core::meta::ForwardConst<Self, T>>> {
        // clang-format off
        return self.m_entities 
               | stdv::filter(bind_front(&EntityManager::has_component<T>, &self))
               | stdv::transform(bind_front(&EntityManager::getComponent<T>, &self))
               | stdv::transform(monadic::forward_like<Self>())
               | stdv::transform(monadic::as_ref())
               | stdr::to<std::vector>();
        // clang-format on
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsSystem T, typename... Args>
    auto EntityManager::add_system(Args&&... args) -> T& {
        m_systems.emplace(std::make_unique<T>(std::forward<Args>(args)..., *this));

        auto& system = get_system<T>();

        get_needed_entities(system);

        return system;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsSystem T>
    auto EntityManager::has_system() const noexcept -> bool {
        return stdr::any_of(m_systems, monadic::is<T>());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class Self>
    auto EntityManager::systems(this Self& self) noexcept
      -> std::vector<Ref<core::meta::ForwardConst<Self, System>>> {
        constexpr auto as_refer = [] {
            if constexpr (core::meta::IsConst<Self>) return monadic::as_ref();
            else
                return monadic::as_ref_mut();
        }();

        return self.m_systems | stdv::transform(as_refer) | stdr::to<std::vector>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsSystem T, class Self>
    auto EntityManager::get_system(this Self& self) noexcept -> core::meta::ForwardConst<Self, T&> {
        EXPECTS(self.template has_system<T>());

        auto it = stdr::find_if(self.m_systems, monadic::is<T>());

        return as<core::meta::ForwardConst<Self, T&>>(*it->get());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto EntityManager::entity_count() const noexcept -> usize {
        return std::size(m_entities);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto EntityManager::component_key_for(Entity e, Component::Type type) noexcept
      -> ComponentKey {
        return (static_cast<u64>(e) << 32) | static_cast<u64>(type);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto EntityManager::is_key_entity(Entity e, ComponentKey type) noexcept -> bool {
        return static_cast<u64>(e) == (type >> 32);
    }
} // namespace stormkit::entities
