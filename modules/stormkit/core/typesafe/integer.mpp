// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#ifdef STORMKIT_COMPILER_MSVC
    #include <__msvc_int128.hpp>
#endif

export module stormkit.core:typesafe.integer;

import std;

import :meta.concepts;

export {
    namespace stormkit { inline namespace core {
        namespace cpp {
            using UChar     = unsigned short;
            using UShort    = unsigned short;
            using UInt      = unsigned int;
            using ULong     = unsigned long;
            using ULongLong = unsigned long long;

            using SChar    = signed char;
            using Short    = signed short;
            using Int      = signed int;
            using Long     = signed long;
            using LongLong = signed long long;

            using LongDouble = long double;
        } // namespace cpp

#define STORMKIT_ALLOW_PRIMITIVE_TYPE_IMPLICIT_CONVERSION
#ifdef STORMKIT_ALLOW_PRIMITIVE_TYPE_IMPLICIT_CONVERSION
        using u8  = std::uint8_t;
        using u16 = std::uint16_t;
        using u32 = std::uint32_t;
        using u64 = std::uint64_t;
    #ifdef __SIZEOF_INT128__
        using u128 = unsigned __int128;
    #elif defined(STORMKIT_COMPILER_MSVC)
        using u128 = std::_Unsigned128;
    #endif

        using i8  = std::int8_t;
        using i16 = std::int16_t;
        using i32 = std::int32_t;
        using i64 = std::int64_t;
    #ifdef __SIZEOF_INT128__
        using i128 = __int128;
    #elif defined(STORMKIT_COMPILER_MSVC)
        using i128 = std::_Signed128;
    #else
    #endif

        using usize   = std::size_t;
        using isize   = std::ptrdiff_t;
        using ioffset = std::ptrdiff_t;
#else
        enum class u8 : std::uint8_t {
        };
        enum class u16 : std::uint16_t {
        };
        enum class u32 : std::uint32_t {
        };
        enum class u64 : std::uint64_t {
        };

    #ifdef __SIZEOF_INT128__
        enum class u128 : unsigned __int128 {
        };
    #elif defined(STORMKIT_COMPILER_MSVC)
        enum class u128 : std::_Unsigned128 {
        };
    #endif

        enum class i8 : std::int8_t {
        };
        enum class i16 : std::int16_t {
        };
        enum class i32 : std::int32_t {
        };
        enum class i64 : std::int64_t {
        };
    #ifdef __SIZEOF_INT128__
        enum class i128 : __int128 {
        };
    #elif defined(STORMKIT_COMPILER_MSVC)
        enum class i128 : std::_Signed128 {
        };
    #else
    #endif

        enum class usize : std::size_t {
        };
        enum class isize : std::ptrdiff_t {
        };
        enum class ioffset : std::ptrdiff_t {
        };
#endif

        template<meta::IsIntegral T>
        class Integer {
          public:
            using Type = T;

            Integer() = delete;

            constexpr Integer(T value);

          private:
            T m_value;
        };

        template<meta::IsIntegral T>
        Integer(T) -> Integer<T>;
    }} // namespace stormkit::core

    template<class T, class CharT>
    struct std::formatter<stormkit::core::Integer<T>, CharT>: std::formatter<T, CharT> {
        template<class FormatContext>
        auto format(stormkit::core::Integer<T> data, FormatContext& ctx) const noexcept
          -> decltype(ctx.out());
    };
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

/////////////////////////////////////
/////////////////////////////////////
template<class T, class CharT>
template<class FormatContext>
STORMKIT_FORCE_INLINE
auto std::formatter<stormkit::core::Integer<T>, CharT>::format(stormkit::core::Integer<T> data,
                                                               FormatContext& ctx) const noexcept
  -> decltype(ctx.out()) {
    return std::formatter<T, CharT>::format(static_cast<T>(data), ctx);
}
