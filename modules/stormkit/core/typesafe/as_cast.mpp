// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.core:typesafe.integer_casts;

import std;

import :utils.contract;
import :typesafe.byte;
import :utils.function_ref;
import :typesafe.ref;
import :meta.concepts;
import :meta.algorithms;
import :meta.traits;
import :meta.priority_tag;
import :typesafe.boolean;
import :typesafe.integer;
import :typesafe.floating_point;

export namespace stormkit { inline namespace core {
    template<typename T, typename U>
    constexpr auto is(T&& first, U&& second) noexcept -> decltype(auto);

    template<typename T, typename U>
    constexpr auto is(U&& value) noexcept -> decltype(auto);

    template<typename T, typename U>
    constexpr auto as(U&&                         value,
                      const std::source_location& location = std::source_location::
                        current()) noexcept -> decltype(auto);

    template<typename T, typename U>
    constexpr auto narrow(U&& value) noexcept -> decltype(auto);

    template<typename To, typename From>
    constexpr auto is_safe_narrowing(const From& from) noexcept -> Boolean {
        if constexpr ((meta::IsArithmetic<From> and meta::IsByte<To>)
                      or (meta::IsByte<From> and meta::IsArithmetic<To>))
            return (static_cast<From>(static_cast<To>(from)) == from);
        else if constexpr (meta::IsArithmetic<From> and meta::IsArithmetic<To>)
            return (static_cast<From>(static_cast<To>(from)) == from)
                   or (meta::IsSigned<To> != meta::IsUnsigned<From>
                       and ((static_cast<To>(from) < To {}) == (from < From {})));
        else
            static_assert(false,
                          "is_safe_narrowing called with argument that are not bytes or "
                          "arithmetic types");
        std::unreachable();
    }

    namespace meta {
        template<typename To, typename From>
        concept IsSignNarrowing = (IsSigned<From> ? !IsSigned<To>
                                                  : IsSigned<To> and sizeof(From) == sizeof(To));

        template<typename To, typename From>
        concept IsByteNarrowing = ((IsArithmetic<To> and IsByte<From>)
                                   or (IsByte<To> and IsArithmetic<From>))
                                  and (IsByte<To> and sizeof(To) != sizeof(From));

        template<typename To, typename From>
        concept IsNarrowing = (IsFloatingPoint<From> and IsIntegral<To>)
                              or (IsFloatingPoint<From>
                                  and IsFloatingPoint<To>
                                  and sizeof(From) > sizeof(To))
                              or (IsIntegralOrEnumeration<From> and IsFloatingPoint<To>)
                              or (IsIntegral<From>
                                  and IsIntegral<To>
                                  and (sizeof(From) > sizeof(To) or IsSignNarrowing<To, From>))
                              or (IsEnumeration<From>
                                  and IsIntegral<To>
                                  and (sizeof(From) > sizeof(To)
                                       or IsSignNarrowing<UnderlyingType<From>, From>))
                              or (IsPointer<From> and Is<To, bool>);

        template<typename To, typename From>
        concept IsUnsafePointerConvertion = IsPointer<To>
                                            and IsPointer<From>
                                            and not requires(To to, From from) { to = from; };

        template<typename To, auto from>
        concept IsSafeNarrowing = IsArithmetic<To>
                                  and IsArithmetic<CanonicalTypeOf<from>>
                                  and not is_safe_narrowing<To>(from);
    } // namespace meta

    struct Underlying {};

    namespace casts {
        namespace core {
            // Templates
            template<template<typename...> class T1, class T2>
            [[nodiscard]]
            constexpr auto is(T2&&) noexcept -> decltype(auto);

            template<template<typename, auto...> class T1, class T2>
            [[nodiscard]]
            constexpr auto is(T2&&) noexcept -> decltype(auto);

            // Types
            template<typename To, typename From>
            [[nodiscard]]
            constexpr auto is(const From& from) noexcept -> decltype(auto);

            // values
            template<typename T1, typename T2>
            [[nodiscard]]
            constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean;

            template<typename T1, meta::IsUnaryPredicate<T1> T2>
            [[nodiscard]]
            constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean;

            template<meta::IsArrayType T1, meta::IsArrayType T2>
            [[nodiscard]]
            constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean;

            template<typename T1, meta::HasEqualityOperator<T1> T2>
            [[nodiscard]]
            constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean;

            template<meta::IsArithmetic To, auto From>
                requires(meta::IsArithmetic<decltype(From)> and meta::IsSafeNarrowing<To, From>)
            [[nodiscard]]
            constexpr auto as(const std::source_location& location = std::source_location::
                                current()) noexcept -> To;

            template<typename To, typename From>
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> void;

            // cast to boolean
            template<meta::IsStrictOneOf<bool, Boolean> To, typename From>
                requires(std::convertible_to<To, meta::CanonicalType<From>>
                         and not meta::IsVariantType<meta::CanonicalType<From>>
                         and not meta::IsOptionalType<meta::CanonicalType<From>>)
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> To;

            // exact same type
            template<typename To, typename From>
                requires(meta::IsStrict<To, meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> meta::ForwardLike<From, To>;

            // safe narrowing
            template<meta::IsFloatingPoint T1, meta::IsFloatingPoint T2>
                requires(meta::IsFloatingPoint<meta::CanonicalType<T2>>)
            [[nodiscard]]
            constexpr auto is(const T1& first, const T2& second) noexcept -> Boolean;

            template<typename To, typename From>
                requires((meta::IsArithmetic<To> or meta::IsByte<To>)
                         and (meta::IsArithmetic<meta::CanonicalType<From>>
                              or meta::IsByte<meta::CanonicalType<From>>)
                         and not meta::IsStrict<To, meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> To;

            // enumerations
            template<meta::IsStrict<Underlying> To, typename From>
                requires(meta::IsEnumeration<meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept
              -> meta::UnderlyingType<meta::CanonicalType<From>>;

            template<meta::IsIntegral To, typename From>
                requires(meta::IsEnumeration<meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> To;

            template<meta::IsEnumeration To, typename From>
                requires(meta::IsIntegral<meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> To;

            // polymorphism
            template<meta::IsPolymorphicIndirection To, meta::IsRawPointerOrLValueReference From>
                requires(meta::IsPolymorphicPointer<meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> decltype(auto);

            template<meta::IsPolymorphicIndirection To, meta::IsRawPointerOrLValueReference From>
                requires(meta::IsPolymorphic<meta::CanonicalType<From>>)
            [[nodiscard]]
            constexpr auto as(From&&                      value,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> decltype(auto);

            // predicate
            template<typename T>
            [[nodiscard]]
            constexpr auto is(const T& value, FunctionRef<const T&> predicate) noexcept -> Boolean;

            // std::variant
            template<typename T1, meta::IsVariantType T2>
            [[nodiscard]]
            constexpr auto is(const T2& variant) noexcept -> Boolean;

            template<typename T1, meta::IsVariantType T2>
            [[nodiscard]]
            constexpr auto is(const T2& variant, T1&& value) noexcept -> Boolean;

            template<typename To, meta::IsVariantType From>
            [[nodiscard]]
            constexpr auto as(From&&                      variant,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> meta::ForwardLike<From, To>;

            // std::optional
            template<typename T1, meta::IsOptionalType T2>
            [[nodiscard]]
            constexpr auto is(const T2& optional) noexcept -> Boolean;

            template<typename T1, meta::IsOptionalType T2>
            [[nodiscard]]
            constexpr auto is(const T2& optional, T1&& value) noexcept -> Boolean;

            template<typename To, meta::IsOptionalType From>
            [[nodiscard]]
            constexpr auto as(From&&                      optional,
                              const std::source_location& location = std::source_location::
                                current()) noexcept -> meta::ForwardLike<From, To>;

            // std::string
            template<meta::IsStrictOneOf<std::string, std::string_view> To,
                     meta::IsEnumeration                                From>
            [[nodiscard]]
            constexpr auto as(const From& value) -> To;

            template<meta::IsStrictOneOf<std::string, std::string_view> To, meta::IsArithmetic From>
            [[nodiscard]]
            constexpr auto as(const From& value) -> To;

            template<meta::IsArithmetic To, meta::Is<std::string_view> From>
            [[nodiscard]]
            constexpr auto as(const From& value) noexcept -> To;

            template<typename To, typename From>
            [[nodiscard]]
            constexpr auto narrow(From&& value) noexcept -> To;
        } // namespace core

        template<typename T, typename U>
        struct IsQueryier {
            template<typename V>
            static constexpr auto operator()(const V&) noexcept -> void = delete;
        };

        template<typename T, typename U>
        struct AsCaster {
            template<typename V>
            static constexpr auto operator()(V&&) noexcept -> void = delete;
        };

        template<typename T, typename U>
        struct NarrowCaster {
            template<typename V>
            static constexpr auto operator()(V&&) noexcept -> void = delete;
        };
    } // namespace casts
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    namespace details {
        template<typename T, typename U>
        concept HasCustomIsQueryier = requires(const U& value) {
            { stormkit::casts::IsQueryier<T, U>::operator()(value) } -> meta::Is<Boolean>;
        };

        template<typename T, typename U>
        concept HasCustomAsCast = requires(const U& value) {
            {
                stormkit::casts::AsCaster<T, U>::operator()(value, std::source_location::current())
            } -> meta::IsStrict<T>;
        };

        template<typename T, typename U>
        concept HasCustomNarrowCast = requires(const U& value) {
            { stormkit::casts::NarrowCaster<T, U>::operator()(value) } -> meta::IsStrict<T>;
        };
    } // namespace details

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename U>
    STORMKIT_FORCE_INLINE
    constexpr auto is(T&& first, U&& second) noexcept -> decltype(auto) {
        if constexpr (details::HasCustomIsQueryier<meta::CanonicalType<T>, meta::CanonicalType<U>>)
            return stormkit::casts::IsQueryier<meta::CanonicalType<T>, meta::CanonicalType<U>>::
              operator()(std::forward<T>(first), std::forward<U>(second));
        else
            return stormkit::casts::core::is<meta::CanonicalType<T>>(std::forward<T>(first),
                                                                     std::forward<U>(second));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename U>
    STORMKIT_FORCE_INLINE
    constexpr auto is(U&& value) noexcept -> decltype(auto) {
        if constexpr (details::HasCustomIsQueryier<T, meta::CanonicalType<U>>)
            return stormkit::casts::IsQueryier<T, meta::CanonicalType<U>>::operator()(std::forward<
                                                                                      U>(value));
        else
            return stormkit::casts::core::is<T>(std::forward<U>(value));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename U>
    STORMKIT_FORCE_INLINE
    constexpr auto as(U&& value, const std::source_location& location) noexcept -> decltype(auto) {
        if constexpr (details::HasCustomAsCast<T, meta::CanonicalType<U>>)
            return stormkit::casts::AsCaster<T, meta::CanonicalType<U>>::
              operator()(std::forward<U>(value), location);
        else
            return stormkit::casts::core::as<T>(std::forward<U>(value), location);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename U>
    STORMKIT_FORCE_INLINE
    constexpr auto narrow(U&& value) noexcept -> decltype(auto) {
        if constexpr (details::HasCustomNarrowCast<T, meta::CanonicalType<U>>)
            return stormkit::casts::NarrowCaster<T, meta::CanonicalType<U>>::
              operator()(std::forward<U>(value));
        else
            return stormkit::casts::core::narrow<T>(std::forward<U>(value));
    }

    namespace casts::core {
        // Templates
        /////////////////////////////////////
        /////////////////////////////////////
        template<template<typename...> class T1, class T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T2&) noexcept -> decltype(auto) {
            if constexpr (meta::IsSpecializationOf<T2, T1>) return std::true_type {};
            else
                return std::false_type {};
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<template<typename, auto...> class T1, class T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T2&) noexcept -> decltype(auto) {
            if constexpr (meta::IsSpecializationWithNTTPOf<T2, T1>) return std::true_type {};
            else
                return std::false_type {};
        }

        // Types
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, typename From>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const From& value) noexcept -> decltype(auto) {
            if constexpr (meta::IsStrict<To, From>) return std::true_type {};
            else if constexpr (meta::IsPolymorphicPointer<From> and meta::IsPolymorphic<To>)
                return dynamic_cast<const To* const>(std::to_address(value)) != nullptr;
            else if constexpr (meta::IsPolymorphic<From> and meta::IsPolymorphic<To>)
                return dynamic_cast<const To* const>(&value) != nullptr;
            else if constexpr ((meta::Is<From, std::nullptr_t> or requires {
                                   *value;
                                   From {};
                               }) and meta::Is<To, void>)
                return value == From {};
            else if constexpr (meta::IsPointer<From> and meta::IsPointer<To>) {
                if (value != nullptr) return bool { is<meta::DecayType<To>>(*value) };
                return false;
            } else
                return std::false_type {};
        }

        // values
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, typename T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T1&, T2&&) noexcept -> Boolean {
            return false;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, meta::IsUnaryPredicate<T1> T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean {
            return std::forward<T2>(second)(first);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsArrayType T1, meta::IsArrayType T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean {
            if (std::ssize(first) == std::ssize(second)) return std::ranges::equal(first, second);
            return false;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, meta::HasEqualityOperator<T1> T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T1& first, T2&& second) noexcept -> Boolean {
            using CanonicalT2 = meta::CanonicalType<T2>;
            if constexpr (meta::IsFloatingPoint<T1> and meta::IsFloatingPoint<CanonicalT2>) {
                using T            = meta::SafeNarrowHelperType<T1, CanonicalT2>;
                using TO           = meta::SafeNarrowHelperOtherType<T1, CanonicalT2>;
                const auto first_  = as<T>(first);
                const auto second_ = as<T>(second);
                const auto epsilon = as<T>(EPSILON<TO>);
                return std::abs(first_ - second_)
                       <= epsilon * std::max({ T { 1 }, std::abs(first_), std::abs(second_) });
            } else if constexpr ((meta::IsFloatingPoint<T1> and meta::IsIntegral<CanonicalT2>)
                                 or (meta::IsIntegral<T1> and meta::IsFloatingPoint<CanonicalT2>)) {
                using T = std::conditional_t<meta::IsFloatingPoint<T1>, T1, CanonicalT2>;

                return is(as<T>(first), as<T>(second));
            } else if constexpr (meta::IsIntegral<T1> and meta::IsIntegral<CanonicalT2>) {
                if (not(is_safe_narrowing<T1>(second) or is_safe_narrowing<CanonicalT2>(first)))
                    return false;

                using T = meta::SafeNarrowHelperType<T1, CanonicalT2>;
                return as<T>(first) == as<T>(std::forward<T2>(second));
            } else
                return first == std::forward<T2>(second);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, typename From>
        STORMKIT_FORCE_INLINE
        constexpr auto as([[maybe_unused]] From&&                      value,
                          [[maybe_unused]] const std::source_location& location) noexcept -> void {
            static_assert(false, "no as caster for this type !");
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsStrictOneOf<bool, Boolean> To, typename From>
            requires(std::convertible_to<To, meta::CanonicalType<From>>
                     and not meta::IsVariantType<meta::CanonicalType<From>>
                     and not meta::IsOptionalType<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& value, const std::source_location&) noexcept -> To {
            return static_cast<bool>(std::forward<From>(value));
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsArithmetic To, auto from>
            requires(meta::IsArithmetic<decltype(from)> and meta::IsSafeNarrowing<To, from>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(const std::source_location& location) noexcept -> To {
            expects(meta::IsSafeNarrowing<To, from>,
                    "Lossy narrowing detected, please use narrow() only if you really "
                    "want unsafe "
                    "narrowing",
                    location);

            return static_cast<To>(from);
        }

        // exact same type
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, typename From>
            requires(meta::IsStrict<To, meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&&                                       value,
                          [[maybe_unused]] const std::source_location& location) noexcept
          -> meta::ForwardLike<From, To> {
            return std::forward<From>(value);
        }

        // safe narrowing
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, typename From>
            requires((meta::IsArithmetic<To> or meta::IsByte<To>)
                     and (meta::IsArithmetic<meta::CanonicalType<From>>
                          or meta::IsByte<meta::CanonicalType<From>>)
                     and not meta::IsStrict<To, meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& value, const std::source_location& location) noexcept -> To {
            if constexpr (meta::IsNarrowing<To, meta::CanonicalType<From>>
                          or meta::IsByteNarrowing<To, meta::CanonicalType<From>>)
                expects(is_safe_narrowing<To>(value),
                        "Lossy narrowing detected, please use narrow() only if you "
                        "really want "
                        "unsafe "
                        "narrowing",
                        location);

            return static_cast<To>(value);
        }

        // enumerations
        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsStrict<Underlying> To, typename From>
            requires(meta::IsEnumeration<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&&                                       value,
                          [[maybe_unused]] const std::source_location& location) noexcept
          -> meta::UnderlyingType<meta::CanonicalType<From>> {
            return static_cast<meta::UnderlyingType<meta::CanonicalType<From>>>(value);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsIntegral To, typename From>
            requires(meta::IsEnumeration<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& value, const std::source_location& location) noexcept -> To {
            if constexpr (meta::IsStrict<To, meta::UnderlyingType<meta::CanonicalType<From>>>)
                return static_cast<To>(std::forward<From>(value));
            else
                return as<To>(as<Underlying>(std::forward<From>(value), location), location);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsEnumeration To, typename From>
            requires(meta::IsIntegral<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& value, const std::source_location& location) noexcept -> To {
            if constexpr (meta::IsStrict<From, meta::UnderlyingType<meta::CanonicalType<To>>>)
                return static_cast<To>(std::forward<From>(value));
            else
                return static_cast<To>(as<meta::UnderlyingType>(std::forward<From>(value),
                                                                location));
        }

        // polymorphism
        template<meta::IsPolymorphicIndirection To, meta::IsRawPointerOrLValueReference From>
            requires(meta::IsPolymorphicPointer<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&&                                       value,
                          [[maybe_unused]] const std::source_location& location) noexcept
          -> decltype(auto) {
            using CanonicalFrom = std::remove_reference_t<From>;

            if constexpr (meta::IsNonOwningPointer<To>) {
                using PointerElement = meta::ElementType<CanonicalFrom>;
                using ToPointerType  = meta::PointerType<To>;
                using ToElementType  = meta::ElementType<To>;
                using To_ = std::conditional_t<meta::IsRawPointer<To>, Ref<ToElementType>, To>;
                static_assert(meta::Is<PointerElement, ToElementType>,
                              "Invalid Polymorphic cast !");

                if constexpr (meta::IsSpecializationOf<To_, Ref>) return as_ref_like(value);
                else
                    return To_ { *static_cast<ToPointerType>(std::to_address(value)) };

            } else {
                static_assert(meta::Is<CanonicalFrom, meta::CanonicalType<To>>,
                              "Invalid Polymorphic cast !");

                return static_cast<To>(*std::to_address(value));
            }
        }

        template<meta::IsPolymorphicIndirection To, meta::IsRawPointerOrLValueReference From>
            requires(meta::IsPolymorphic<meta::CanonicalType<From>>)
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&&                                       value,
                          [[maybe_unused]] const std::source_location& location) noexcept
          -> decltype(auto) {
            using CanonicalFrom = std::remove_reference_t<From>;

            if constexpr (meta::IsPointer<To>) {
                using ToPointerType = meta::PointerType<To>;
                using ToElementType = meta::ElementType<To>;
                using To_ = std::conditional_t<meta::IsRawPointer<To>, Ref<ToElementType>, To>;
                static_assert(meta::Is<CanonicalFrom, ToElementType>, "Invalid Polymorphic cast !");

                const auto ptr = static_cast<ToPointerType>(&value);

                if constexpr (meta::IsSpecializationOf<To_, Ref>) return as_ref_like(value);
                else
                    return To_ { *static_cast<ToPointerType>(&value) };
            } else {
                static_assert(meta::Is<CanonicalFrom, meta::CanonicalType<To>>,
                              "Invalid Polymorphic cast !");

                return static_cast<To>(value);
            }
        }

        // predicate
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T& value, FunctionRef<Boolean(const T&)> predicate) noexcept
          -> Boolean {
            return predicate(value);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, meta::IsVariantType T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T2& variant) noexcept -> Boolean {
            return std::holds_alternative<T1>(variant);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, meta::IsVariantType T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T2& variant, T1&& value) noexcept -> Boolean {
            return variant_type_find_if(variant, [&]<auto Index>() noexcept {
                if (variant.index() == Index) {
                    if constexpr (meta::IsUnaryPredicate<meta::CanonicalType<T1>,
                                                         decltype(std::get<Index>(variant))>)
                        return value(std::get<Index>(variant));
                    else if constexpr (requires {
                                           {
                                               std::get<Index>(variant) == value
                                           } -> meta::IsBooleanTestable;
                                       })
                        return is(std::get<Index>(variant), value);

                    return false;
                }

                return false;
            });
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, meta::IsVariantType From>
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& variant, const std::source_location& location) noexcept
          -> meta::ForwardLike<From, To> {
            /*using PtrType = meta::ForwardConst<From, To>*;*/
            /*auto ptr      = PtrType { nullptr };*/
            /**/
            /*variant_type_find_if(variant, [&]<auto Index, typename T>() noexcept {*/
            /*    if constexpr (meta::IsStrict<To, T>)*/
            /*        if (variant.index() == Index) {*/
            /*            ptr = &std::get<Index>(variant);*/
            /*            return true;*/
            /*        }*/
            /*    return false;*/
            /*});*/

            ensures(is<To>(variant), "Bad variant access detected", location);

            /*return std::forward_like<From>(*ptr);*/
            return std::forward_like<From>(std::get<To>(std::forward<From>(variant)));
        }

        // std::optional
        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, meta::IsOptionalType T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const T2& optional) noexcept -> Boolean {
            if (not optional.has_value()) return false;

            if constexpr (requires { static_cast<const T1&>(*optional); }) return true;

            return false;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T1, typename T2>
        STORMKIT_FORCE_INLINE
        constexpr auto is(const std::optional<T2>& optional, T1&& value) noexcept -> Boolean {
            if constexpr (meta::IsUnaryPredicate<meta::CanonicalType<T1>, T2>)
                return std::forward<T1>(value)(optional);
            else if constexpr (requires {
                                   { optional.value() == value } -> meta::IsBooleanTestable;
                               })
                return optional.has_value() and optional.value() == value();

            return false;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, meta::IsOptionalType From>
        STORMKIT_FORCE_INLINE
        constexpr auto as(From&& optional, const std::source_location& location) noexcept
          -> meta::ForwardLike<From, To> {
            expects(is<To>(optional), "Bad optional access detected", location);

            return std::forward<From>(optional).value();
        }

        /////////////////////////////////////
        /////////////////////////////////////
        // template<meta::IsStrict<std::string> To, meta::IsEnumeration From>
        // [[nodiscard]]
        // constexpr auto as(const From& value) -> To {
        //     return magic_enum::enum_name(value);
        // }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsStrict<std::string> To, meta::IsArithmetic From>
        STORMKIT_FORCE_INLINE
        constexpr auto as(const From& value) noexcept -> To {
            static thread_local auto buf    = std::array<char, 20> {};
            const auto               result = std::to_chars(std::ranges::begin(buf),
                                              std::ranges::end(buf),
                                              value);
            ensures(result.ec == std::errc {}, std::make_error_code(result.ec).message());
            return To { std::begin(buf), static_cast<std::size_t>(result.ptr - std::begin(buf)) };
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<meta::IsArithmetic To, meta::Is<std::string_view> From>
        STORMKIT_FORCE_INLINE
        constexpr auto as(const From& value) noexcept -> To {
            auto       out    = To {};
            const auto result = std::from_chars(std::ranges::cbegin(value),
                                                std::ranges::cend(value),
                                                out);
            ensures(result.ec == std::errc {}, std::make_error_code(result.ec).message());
            return out;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename To, typename From>
        STORMKIT_FORCE_INLINE
        constexpr auto narrow(From&& value) noexcept -> To {
            return static_cast<To>(std::forward<From>(value));
        }
    } // namespace casts::core
}} // namespace stormkit::core
