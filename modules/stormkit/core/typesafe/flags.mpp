// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:typesafe.flags;

import std;

import :meta;

export {
    namespace stormkit { inline namespace core {
        namespace details {
            template<stormkit::meta::IsEnumeration T>
            struct EnableBitmaskOperators {
                constexpr EnableBitmaskOperators() = default;
                static constexpr auto enable       = false;
            };

            template<stormkit::meta::IsEnumeration T>
            inline constexpr auto BITMASK_OPERATORS_ENABLED = EnableBitmaskOperators<T>::enable;
        } // namespace details

        namespace meta {
            template<class T>
            concept IsFlag = (IsScopedEnumeration<meta::CanonicalType<T>>
                              and core::details::BITMASK_OPERATORS_ENABLED<T>)
                             or IsPlainEnumeration<meta::CanonicalType<T>>;
        }

        /// \brief Check if a flag bit is enabled
        /// \requires `Enum` to be an enumeration promoted static_cast a flag with `FLAG_ENUM`
        /// macro
        /// \returns true if the flag big is set and false if not
        template<meta::IsFlag T>
        [[nodiscard]]
        constexpr auto check_flag_bit(const T& value, const T& flag) noexcept -> bool;

        /// \exclude
        template<meta::IsFlag T>
        [[nodiscard]]
        constexpr auto next_value(const T& value) noexcept -> T;
    }} // namespace stormkit::core

    template<stormkit::meta::IsFlag T>
    [[nodiscard]]
    constexpr auto operator|(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    [[nodiscard]]
    constexpr auto operator&(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    [[nodiscard]]
    constexpr auto operator^(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    [[nodiscard]]
    constexpr auto operator~(const T& lhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    constexpr auto operator|=(T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    constexpr auto operator&=(T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::meta::IsFlag T>
    constexpr auto operator^=(T& lhs, const T& rhs) noexcept -> decltype(auto);
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsFlag T>
    STORMKIT_FORCE_INLINE
    constexpr auto check_flag_bit(const T& value, const T& flag) noexcept -> bool {
        return (value & flag) == flag;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsFlag T>
    STORMKIT_FORCE_INLINE
    constexpr auto next_value(const T& value) noexcept -> T {
        using Underlying = meta::UnderlyingType<T>;
        return static_cast<T>(static_cast<Underlying>(value) << 1);
    }
}} // namespace stormkit::core

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator|(const T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    using Underlying = meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<Underlying>(lhs) | static_cast<Underlying>(rhs));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator&(const T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    using Underlying = meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<Underlying>(lhs) & static_cast<Underlying>(rhs));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator^(const T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    using Underlying = meta::UnderlyingType<T>;
    return static_cast<T>(static_cast<Underlying>(lhs) ^ static_cast<Underlying>(rhs));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator~(const T& lhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    using Underlying = meta::UnderlyingType<T>;
    return static_cast<T>(~static_cast<Underlying>(lhs));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator|=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    lhs = lhs | rhs;
    return lhs;
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator&=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    lhs = lhs & rhs;
    return lhs;
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsFlag T>
STORMKIT_FORCE_INLINE
constexpr auto operator^=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit;
    namespace details = stormkit::core::details;

    lhs = lhs ^ rhs;
    return lhs;
}
