// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.core:typesafe.byte;

import std;

import :meta.concepts;
import :meta.traits;
import :typesafe.integer;
import :utils.contract;

namespace stdr = std::ranges;

export namespace stormkit { inline namespace core {
    using Byte     = std::byte;
    using ByteView = std::span<const std::byte>;
    template<usize N>
    using ByteArray       = std::array<std::byte, N>;
    using ByteDynArray    = std::vector<std::byte>;
    using MutableByteView = std::span<std::byte>;

    struct Force {};

    template<typename T>
    constexpr auto zero_bytes(T& value) noexcept -> void;

    template<typename T>
    constexpr auto zeroed() noexcept -> T;

    template<typename T>
    [[nodiscard]]
    constexpr auto byte_swap(const T& value) noexcept -> T;

    template<stdr::range T>
    [[nodiscard]]
    constexpr auto as_bytes(T& container) noexcept -> std::span<meta::ForwardConst<T, Byte>>;

    template<meta::IsPointer T>
    [[nodiscard]]
    constexpr auto as_bytes(T ptr, usize size = 1) noexcept
      -> std::span<meta::ForwardConst<meta::RemoveIndirectionsType<T>, Byte>>;

    template<class T>
    [[nodiscard]]
    constexpr auto as_bytes(T& value) noexcept -> std::span<meta::ForwardConst<T, Byte>>;

    template<class T>
    [[nodiscard]]
    constexpr auto as_bytes(T& value, Force) noexcept -> std::span<meta::ForwardConst<T, Byte>>;

    template<class T, class Bytes>
        requires(stdr::range<T> and meta::IsOneOf<Bytes, ByteView, MutableByteView>)
    [[nodiscard]]
    constexpr auto bytes_as(Bytes& bytes) noexcept -> T;

    template<class T, class Bytes>
        requires(meta::IsOneOf<Bytes, ByteView, MutableByteView>)
    [[nodiscard]]
    constexpr auto bytes_as(Bytes& bytes) noexcept
      -> meta::ForwardConst<typename Bytes::element_type, T&>;

    template<typename T, usize N>
    [[nodiscard]]
    constexpr auto into_bytes(const T (&bytes)[N]) noexcept -> ByteArray<N>;

    namespace literals {
        [[nodiscard]]
        constexpr auto operator""_b(unsigned long long value) noexcept -> Byte;

        [[nodiscard]]
        constexpr auto operator""_kb(unsigned long long x) noexcept -> u64;

        [[nodiscard]]
        constexpr auto operator""_mb(unsigned long long x) noexcept -> u64;

        [[nodiscard]]
        constexpr auto operator""_gb(unsigned long long x) noexcept -> u64;

        [[nodiscard]]
        constexpr auto operator""_kib(unsigned long long x) noexcept -> u64;

        [[nodiscard]]
        constexpr auto operator""_mib(unsigned long long x) noexcept -> u64;

        [[nodiscard]]
        constexpr auto operator""_gib(unsigned long long x) noexcept -> u64;

    } // namespace literals
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE
    inline constexpr auto zero_bytes(T& value) noexcept -> void {
        auto bytes = as_bytes(value);

        std::memset(&bytes[0], 0, stdr::size(bytes));
    }

    template<typename T>
    STORMKIT_FORCE_INLINE
    inline constexpr auto zeroed() noexcept -> T {
        auto data = T {};
        zero_bytes(data);
        return data;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_CONST
    STORMKIT_FORCE_INLINE
    inline constexpr auto byte_swap(const T& value) noexcept -> T {
        auto repr = std::bit_cast<std::array<Byte, sizeof(value)>>(value);

        stdr::reverse(repr);

        return std::bit_cast<T>(repr);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<stdr::range T>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto as_bytes(T& container) noexcept
      -> std::span<meta::ForwardConst<T, Byte>> {
        return as_bytes(stdr::data(container), stdr::size(container));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsPointer T>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto as_bytes(T ptr, usize size) noexcept
      -> std::span<meta::ForwardConst<meta::RemoveIndirectionsType<T>, Byte>> {
        auto raw_ptr = std::to_address(ptr);

        using PtrType     = decltype(raw_ptr);
        using ElementType = meta::ElementType<PtrType>;
        using ByteType    = meta::ForwardConst<ElementType, Byte>;

        constexpr auto byte_count = []() {
            if constexpr (meta::Is<ElementType, void>) return 1;
            else
                return sizeof(ElementType);
        }();

        return std::span<ByteType> { std::bit_cast<ByteType*>(raw_ptr), size * byte_count };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto as_bytes(T& value) noexcept -> std::span<meta::ForwardConst<T, Byte>> {
        return as_bytes(&value, 1);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto as_bytes(T& value, Force) noexcept
      -> std::span<meta::ForwardConst<T, Byte>> {
        return as_bytes(&value, 1);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, class Bytes>
        requires(meta::IsOneOf<Bytes, ByteView, MutableByteView>)
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto bytes_as(Bytes& bytes) noexcept
      -> meta::ForwardConst<typename Bytes::element_type, T&> {
        return *std::bit_cast<
          meta::ForwardConst<typename Bytes::element_type, T>*>(stdr::data(bytes));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, class Bytes>
        requires(stdr::range<T> and meta::IsOneOf<Bytes, ByteView, MutableByteView>)
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline constexpr auto bytes_as(Bytes& bytes) noexcept -> T {
        using ElementType = typename T::element_type;
        return T { std::bit_cast<ElementType*>(stdr::data(bytes)),
                   stdr::size(bytes) * sizeof(ElementType) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, usize N>
    STORMKIT_FORCE_INLINE STORMKIT_PURE
    inline constexpr auto into_bytes(const T (&bytes)[N]) noexcept -> ByteArray<N> {
        EXPECTS(static_cast<T>(static_cast<Byte>(bytes[0])) == bytes[0]);
        auto out = ByteArray<N> {};
        auto i   = 0uz;
        for (auto&& byte : bytes) out[i++] = static_cast<Byte>(byte);
        return out;
    }

    namespace literals {
        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE STORMKIT_INTRINSIC
        inline constexpr auto operator""_b(unsigned long long value) noexcept -> Byte {
            return static_cast<Byte>(value);
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_kb(unsigned long long x) noexcept -> u64 {
            return x * 1000ULL;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_mb(unsigned long long x) noexcept -> u64 {
            return x * 1000_kb;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_gb(unsigned long long x) noexcept -> u64 {
            return x * 1000_mb;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_kib(unsigned long long x) noexcept -> u64 {
            return x * 1024;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_mib(unsigned long long x) noexcept -> u64 {
            return x * 1024_kib;
        }

        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE STORMKIT_PURE
        inline constexpr auto operator""_gib(unsigned long long x) noexcept -> u64 {
            return x * 1024_mib;
        }
    } // namespace literals
}} // namespace stormkit::core
