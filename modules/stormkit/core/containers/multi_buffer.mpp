// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;
#include <stormkit/core/contract_macro.hpp>

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:containers.multi_buffer;

import std;

import :meta.traits;
import :typesafe.integer;
import :functional.monadic;
import :utils.tags;

namespace stdr = std::ranges;
namespace stdv = std::views;

export namespace stormkit { inline namespace core {
    template<typename... T>
    class MultiBuffer {
      public:
        explicit constexpr MultiBuffer(std::array<usize, sizeof...(T)> sizes_in_bytes);
        constexpr ~MultiBuffer();

        constexpr MultiBuffer(const MultiBuffer&);
        constexpr auto operator=(const MultiBuffer&) -> MultiBuffer&;

        constexpr MultiBuffer(MultiBuffer&&) noexcept;
        constexpr auto operator=(MultiBuffer&&) noexcept -> MultiBuffer&;

        [[nodiscard]]
        constexpr auto size() const noexcept -> usize;
        template<typename Self>
        [[nodiscard]]
        constexpr auto data(this Self& self) noexcept -> const meta::ForwardConst<Self, Byte>*;

        template<typename U, stdr::input_range V>
        constexpr auto init_range(V&& init_data) noexcept -> std::span<U>;
        template<usize TYPE_INDEX, stdr::input_range V>
        constexpr auto init_range(V&& init_data) noexcept -> std::span<T...[TYPE_INDEX]>;

        template<typename U, typename Self>
        [[nodiscard]]
        constexpr auto range(this Self& self) noexcept -> std::span<meta::ForwardConst<Self, U>>;

        template<usize TYPE_INDEX, typename Self>
        [[nodiscard]]
        constexpr auto range(this Self& self) noexcept
          -> std::span<meta::ForwardConst<Self, T...[TYPE_INDEX]>>;

      private:
        std::array<usize, sizeof...(T)> m_ranges_sizes;
        std::array<usize, sizeof...(T)> m_ranges_begin;
        usize                           m_size = 0;
        ByteDynArray                    m_data;
    };
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE
    constexpr MultiBuffer<T...>::MultiBuffer(std::array<usize, sizeof...(T)> sizes_in_bytes)
        : m_ranges_sizes { sizes_in_bytes } {
        auto i = 0uz;
        for (auto&& size : m_ranges_sizes) {
            m_ranges_begin[i++] = m_size;
            m_size += size;
        }
        m_data.resize(m_size);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE constexpr MultiBuffer<T...>::MultiBuffer(const MultiBuffer&) = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE
    constexpr auto MultiBuffer<T...>::operator=(const MultiBuffer&) -> MultiBuffer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE constexpr MultiBuffer<T...>::MultiBuffer(MultiBuffer&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE
    constexpr auto MultiBuffer<T...>::operator=(MultiBuffer&&) noexcept -> MultiBuffer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    STORMKIT_FORCE_INLINE constexpr MultiBuffer<T...>::~MultiBuffer() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
  STORMKIT_FORCE_INLINE
    constexpr auto MultiBuffer<T...>::size() const noexcept -> usize {
        return m_size;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    template<typename Self>
    STORMKIT_FORCE_INLINE
    constexpr auto MultiBuffer<T...>::data(this Self& self) noexcept
      -> const meta::ForwardConst<Self, Byte>* {
        return stdr::data(self.m_data);
    }

    //////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    template<typename U, stdr::input_range V>
    constexpr auto MultiBuffer<T...>::init_range(V&& init_data) noexcept -> std::span<U> {
        static_assert(meta::IsOneOf<U, T...>, "U should be a type contained by MultiBuffer");
        static_assert(meta::Is<U, stdr::range_value_t<V>>, "range V should be of type U");
        static constexpr auto TYPE_INDEX = meta::find_type_index_of<U, T...>();
        return init_range<TYPE_INDEX>(std::forward<V>(init_data));
    }

    //////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    template<usize TYPE_INDEX, stdr::input_range V>
    constexpr auto MultiBuffer<T...>::init_range(V&& init_data) noexcept
      -> std::span<T... [TYPE_INDEX]> {
          static_assert(TYPE_INDEX < sizeof...(T), "Index is out of bounds");
          auto span = std::span<Byte> { stdr::data(m_data) + m_ranges_begin[TYPE_INDEX],
                                        m_ranges_sizes[TYPE_INDEX] };

          auto begin = stdr::begin(span);
          for (auto&& bytes :
               std::forward<V>(init_data) | stdv::transform(monadic::as_bytes(Force {}))) {
              stdr::copy(bytes, begin);
              begin += as<isize>(stdr::size(bytes));
          }

          return range<TYPE_INDEX>();
      }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    template<typename U, typename Self>
    constexpr auto MultiBuffer<T...>::range(this Self& self) noexcept
      -> std::span<meta::ForwardConst<Self, U>> {
        static_assert(meta::IsOneOf<U, T...>, "U should be a type contained by MultiBuffer");
        static constexpr auto TYPE_INDEX = meta::find_type_index_of<U, T...>();
        return self.template range<TYPE_INDEX>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... T>
    template<usize TYPE_INDEX, typename Self>
    constexpr auto MultiBuffer<T...>::range(this Self& self) noexcept
      -> std::span<meta::ForwardConst<Self, T... [TYPE_INDEX]>> {
          static_assert(TYPE_INDEX < sizeof...(T), "Index is out of bounds");
          using U        = T...[TYPE_INDEX];
          using OutType  = meta::ForwardConst<Self, U>;
          const auto ptr = stdr::begin(self.m_data) + as<isize>(self.m_ranges_begin[TYPE_INDEX]);
          return std::span {
#if defined(__cpp_lib_start_lifetime_as) and __cpp_lib_start_lifetime_as >= 202207L
              std::start_lifetime_as_array<OutType>(ptr,
                                                    self.m_ranges_sizes[TYPE_INDEX] / sizeof(U)),
#else
              std::launder(std::bit_cast<OutType*>(ptr)),
#endif
              self.m_ranges_sizes[TYPE_INDEX] / sizeof(U)
          };
      }
}} // namespace stormkit::core
