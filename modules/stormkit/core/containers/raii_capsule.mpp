// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:containers.raii_capsule;

import std;

import :utils.tags;

export namespace stormkit { inline namespace core {
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE = T {}>
    class RAIICapsule {
      public:
        using value_type = T;

        constexpr RAIICapsule() noexcept;
        explicit constexpr RAIICapsule(T v) noexcept;
        template<class... Args>
        constexpr RAIICapsule(std::in_place_t, Args&&... args) noexcept;
        constexpr ~RAIICapsule() noexcept;

        constexpr RAIICapsule(RAIICapsule& other)                    = delete;
        constexpr auto operator=(RAIICapsule& other) -> RAIICapsule& = delete;

        constexpr RAIICapsule(RAIICapsule&& other) noexcept;
        constexpr auto operator=(RAIICapsule&& other) noexcept -> RAIICapsule&;

        constexpr      operator T() const noexcept;
        constexpr auto handle() noexcept -> T&;
        constexpr auto handle() const noexcept -> T;
        constexpr auto release() noexcept -> T;
        constexpr auto reset(T handle = RELEASE_VALUE) noexcept -> void;

      private:
        constexpr auto destroy() noexcept -> void;

        T m_handle = RELEASE_VALUE;
    };
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////
namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::
      RAIICapsule() noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::RAIICapsule(T v) noexcept {
        m_handle = v;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    template<class... Args>
    STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::
      RAIICapsule(std::in_place_t, Args&&... args) noexcept {
        m_handle = Constructor(std::forward<Args>(args)...);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::~RAIICapsule() noexcept {
        destroy();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::
      RAIICapsule(RAIICapsule&& other) noexcept {
        m_handle = other.release();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::
      operator=(RAIICapsule&& other) noexcept -> RAIICapsule& {
        m_handle = other.release();
        return *this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    constexpr RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::operator T()
      const noexcept {
        return m_handle;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::handle() noexcept
      -> T& {
        return m_handle;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::handle() const noexcept
      -> T {
        return m_handle;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_CONST STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::release() noexcept
      -> T {
        auto tmp = std::exchange(m_handle, RELEASE_VALUE);
        return tmp;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::
      reset(T handle) noexcept -> void {
        destroy();
        m_handle = handle;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, auto Constructor, auto Deleter, typename Tag, auto RELEASE_VALUE>
    STORMKIT_FORCE_INLINE
    constexpr auto RAIICapsule<T, Constructor, Deleter, Tag, RELEASE_VALUE>::destroy() noexcept
      -> void {
        if (m_handle != RELEASE_VALUE) { Deleter(release()); }
    }
}} // namespace stormkit::core
