// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:math.arithmetic;

import std;

import :meta;
import :hash;
import :typesafe;
import :functional;

using namespace stormkit;

namespace stdr = std::ranges;

export {
    namespace stormkit { inline namespace core { namespace math {
        using std::floor;
        using std::log2;
        using std::max;
        using std::min;

        template<meta::IsArithmetic T, meta::IsArithmetic U>
        [[nodiscard]]
        constexpr auto scale(const U& x,
                             const U& rmin,
                             const U& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;

        template<meta::IsIntegral T>
        [[nodiscard]]
        constexpr auto scale(const T& x,
                             const T& rmin,
                             const T& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;

        template<meta::IsFloatingPoint T>
        [[nodiscard]]
        constexpr auto scale(const T& x,
                             const T& rmin,
                             const T& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;
    }}} // namespace stormkit::core::math
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core { namespace math {
    template<core::meta::IsArithmetic T, core::meta::IsArithmetic U>
        STORMKIT_FORCE_INLINE
    constexpr auto scale(const U& x,
                         const U& rmin,
                         const U& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        return scale(as<T>(x), as<T>(rmin), as<T>(rmax), tmin, tmax);
    }

    template<core::meta::IsIntegral T>
       STORMKIT_FORCE_INLINE
    constexpr auto scale(const T& x,
                         const T& rmin,
                         const T& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        return (x - rmin) * (tmax - tmin) / (rmax - rmin) + tmin;
    }

    template<core::meta::IsFloatingPoint T>
       STORMKIT_FORCE_INLINE
    constexpr auto scale(const T& x,
                         const T& rmin,
                         const T& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        if (x < rmin) return rmin;
        if (x > rmax) return rmax;
        return ((x - rmin) * (tmax - tmin) / (rmax - rmin)) + tmin;
    }
}}} // namespace stormkit::core::math
