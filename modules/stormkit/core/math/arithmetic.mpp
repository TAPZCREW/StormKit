// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#define GLM_FORCE_LEFT_HANDED
#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include <glm/glm.hpp>

#include <glm/gtc/quaternion.hpp>
#include <glm/integer.hpp>

#include <stormkit/core/as_casts_macro.hpp>
#include <stormkit/core/hash_macro.hpp>

#undef assert

export module stormkit.core:math.arithmetic;

import std;

import :meta;
import :hash;
import :typesafe;
import :functional;

using namespace stormkit;

namespace stdr = std::ranges;

export {
    namespace stormkit { inline namespace core { namespace math {
        using glm::abs;
        using glm::ceil;
        using glm::clamp;
        using glm::floatBitsToInt;
        using glm::floatBitsToUint;
        using glm::floor;
        using glm::fma;
        using glm::fract;
        using glm::frexp;
        using glm::intBitsToFloat;
        using glm::isinf;
        using glm::isnan;
        using glm::ldexp;
        using glm::lookAt;
        using glm::max;
        using glm::min;
        using glm::mix;
        using glm::mod;
        using glm::modf;
        using glm::perspective;
        using glm::round;
        using glm::roundEven;
        using glm::sign;
        using glm::smoothstep;
        using glm::step;
        using glm::trunc;
        using glm::uintBitsToFloat;

        using glm::exp;
        using glm::exp2;
        using glm::inversesqrt;
        using glm::log;
        using glm::log2;
        using glm::pow;
        using glm::sqrt;

        using glm::cross;
        using glm::distance;
        using glm::dot;
        using glm::faceforward;
        using glm::length;
        using glm::normalize;
        using glm::reflect;
        using glm::refract;

        using glm::packDouble2x32;
        using glm::packHalf2x16;
        using glm::packSnorm4x8;
        using glm::packUnorm2x16;
        using glm::packUnorm4x8;
        using glm::unpackDouble2x32;
        using glm::unpackHalf2x16;
        using glm::unpackSnorm2x16;
        using glm::unpackSnorm4x8;
        using glm::unpackUnorm2x16;
        using glm::unpackUnorm4x8;

        using glm::acos;
        using glm::acosh;
        using glm::asin;
        using glm::asinh;
        using glm::atan;
        using glm::atanh;
        using glm::cos;
        using glm::cosh;
        using glm::degrees;
        using glm::radians;
        using glm::sin;
        using glm::sinh;
        using glm::tan;
        using glm::tanh;

        using glm::all;
        using glm::any;
        using glm::equal;
        using glm::greaterThan;
        using glm::greaterThanEqual;
        using glm::lessThan;
        using glm::lessThanEqual;
        using glm::not_;
        using glm::notEqual;

        using glm::angleAxis;
        using glm::axis;
        using glm::conjugate;
        using glm::inverse;
        using glm::isinf;
        using glm::isnan;
        using glm::lerp;
        using glm::mix;
        using glm::rotate;
        using glm::slerp;
        using glm::translate;

        using glm::bitCount;
        using glm::bitfieldExtract;
        using glm::bitfieldInsert;
        using glm::bitfieldReverse;
        using glm::findLSB;
        using glm::findMSB;
        using glm::imulExtended;
        using glm::uaddCarry;
        using glm::umulExtended;
        using glm::usubBorrow;

        using glm::eulerAngles;
        using glm::mat3_cast;
        using glm::mat4_cast;
        using glm::pitch;
        using glm::quat_cast;
        using glm::quatLookAt;
        using glm::quatLookAtLH;
        using glm::quatLookAtRH;
        using glm::roll;
        using glm::yaw;

        template<meta::IsArithmetic T, meta::IsArithmetic U>
        [[nodiscard]]
        constexpr auto scale(const U& x,
                             const U& rmin,
                             const U& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;

        template<meta::IsIntegral T>
        [[nodiscard]]
        constexpr auto scale(const T& x,
                             const T& rmin,
                             const T& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;

        template<meta::IsFloatingPoint T>
        [[nodiscard]]
        constexpr auto scale(const T& x,
                             const T& rmin,
                             const T& rmax,
                             const T& tmin,
                             const T& tmax) noexcept -> T;

        template<core::usize size, class T>
        using Vector = glm::vec<size, T, glm::defaultp>;

        /// \group vector-types Math vector types.
        ///
        /// Aliases to `glm::vec*` types.
        ///
        /// \unique_name Vector2<T>
        template<class T>
        using Vector2 = Vector<2, T>;

        /// \group vector-types
        /// \unique_name Vector3<T>
        template<class T>
        using Vector3 = Vector<3, T>;

        /// \group vector-types
        /// \unique_name Vector4<T>
        template<class T>
        using Vector4 = Vector<4, T>;

        /// \group vector-types
        /// \unique_name Vector2F
        using Vector2F = Vector2<f32>;

        /// \group vector-types
        /// \unique_name Vector3F
        using Vector3F = Vector3<f32>;

        /// \group vector-types
        /// \unique_name Vector4F
        using Vector4F = Vector4<f32>;

        /// \group vector-types
        /// \unique_name Vector2U
        using Vector2U = Vector2<u32>;

        /// \group vector-types
        /// \unique_name Vector3U
        using Vector3U = Vector3<u32>;

        /// \group vector-types
        /// \unique_name Vector4U
        using Vector4U = Vector4<u32>;

        /// \group vector-types
        /// \unique_name Vector2I
        using Vector2I = Vector2<i32>;

        /// \group vector-types
        /// \unique_name Vector3I
        using Vector3I = Vector3<i32>;

        /// @ingroup vector-types
        using Vector4I = Vector4<i32>;

        namespace meta {
            template<typename T>
            concept IsVector2Like = requires(T&& value) {
                value.x;
                value.y;
            };

            template<typename T>
            concept IsVector3Like = IsVector2Like<T> and requires(T&& value) { value.z; };

            template<typename T>
            concept IsVector4Like = IsVector3Like<T> and requires(T&& value) { value.w; };

            template<typename T>
            concept IsVectorLike = IsVector2Like<T> or IsVector3Like<T> or IsVector4Like<T>;

            template<class T>
            concept IsVectorType = core::meta::IsOneOf<T,
                                                       Vector2F,
                                                       Vector3F,
                                                       Vector4F,
                                                       Vector2U,
                                                       Vector3U,
                                                       Vector4U,
                                                       Vector2I,
                                                       Vector3I,
                                                       Vector4I>;
        } // namespace meta

        /// @group matrices-types Math matrices types.
        ///
        /// Aliases to `glm::mat*`.
        ///
        template<class T>
        using Matrix = glm::mat<4, 4, T, glm::defaultp>;

        /// @group matrices-types
        using Matrixu = Matrix<u32>;

        /// @group matrices-types
        using Matrixi = Matrix<i32>;

        /// @group matrices-types
        using MatrixF = Matrix<f32>;

        /// @brief Quaternion.
        ///
        /// Alias to `glm::quat`.
        using QuaternionF = glm::quat;

    }}} // namespace stormkit::core::math

    ASCASTER_DECLARE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector2Like)
    ASCASTER_DECLARE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector3Like)
    ASCASTER_DECLARE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector4Like)
    // ASCASTER_DECLARE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsExtent2)
    // ASCASTER_DECLARE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsExtent3)

    ASCASTER_DECLARE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsVectorLike)
    // ASCASTER_DECLARE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsExtent)
    // ASCASTER_DECLARE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsExtent)
    // ASCASTER_DECLARE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsVectorLike)

    NARROWCASTER_DECLARE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsVectorLike)
    // NARROWCASTER_DECLARE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsExtent)
    // NARROWCASTER_DECLARE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsExtent)
    // NARROWCASTER_DECLARE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsVectorLike)

    TEMPLATED_HASH_FUNC(stormkit::core::math::Vector2,
                        stormkit::meta::IsArithmetic,
                        T,
                        value.x,
                        value.y)
    TEMPLATED_HASH_FUNC(stormkit::core::math::Vector3,
                        stormkit::meta::IsArithmetic,
                        T,
                        value.x,
                        value.y,
                        value.z)
    TEMPLATED_HASH_FUNC(stormkit::core::math::Vector4,
                        stormkit::meta::IsArithmetic,
                        T,
                        value.x,
                        value.y,
                        value.z,
                        value.w)
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core { namespace math {
    template<core::meta::IsArithmetic T, core::meta::IsArithmetic U>
    STORMKIT_FORCE_INLINE
    constexpr auto scale(const U& x,
                         const U& rmin,
                         const U& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        return scale(as<T>(x), as<T>(rmin), as<T>(rmax), tmin, tmax);
    }

    template<core::meta::IsIntegral T>
    STORMKIT_FORCE_INLINE
    constexpr auto scale(const T& x,
                         const T& rmin,
                         const T& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        return (x - rmin) * (tmax - tmin) / (rmax - rmin) + tmin;
    }

    template<core::meta::IsFloatingPoint T>
    STORMKIT_FORCE_INLINE
    constexpr auto scale(const T& x,
                         const T& rmin,
                         const T& rmax,
                         const T& tmin,
                         const T& tmax) noexcept -> T {
        if (x < rmin) return rmin;
        if (x > rmax) return rmax;
        return ((x - rmin) * (tmax - tmin) / (rmax - rmin)) + tmin;
    }
}}} // namespace stormkit::core::math

/////////////////////////////////////
/////////////////////////////////////
ASCASTER_DEFINE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector2Like) {
    return std::format("[Vector2: .x = {}, .y = {}]", from.x, from.y);
}

/////////////////////////////////////
/////////////////////////////////////
ASCASTER_DEFINE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector3Like) {
    return std::format("[Vector3: .x = {}, .y = {}, .z = {}]", from.x, from.y, from.z);
}

/////////////////////////////////////
/////////////////////////////////////
ASCASTER_DEFINE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsVector4Like) {
    return std::format("[Vector4: .x = {}, .y = {}, .z = {}, .w = {}]",
                       from.x,
                       from.y,
                       from.z,
                       from.w);
}

/////////////////////////////////////
/////////////////////////////////////
// ASCASTER_DEFINE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsExtent2) {
//     return std::format("[Extent: .width = {}, .height = {}]", from.width, from.height);
// }

/////////////////////////////////////
/////////////////////////////////////
// ASCASTER_DEFINE(stormkit::meta::IsStrict<std::string>, stormkit::math::meta::IsExtent3) {
//     return std::format("[Extent: .width = {}, .height = {}, .depth = {}]",
//                        from.width,
//                        from.height,
//                        from.depth);
// }

/////////////////////////////////////
/////////////////////////////////////
ASCASTER_DEFINE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsVectorLike) {
    if constexpr (stormkit::meta::IsStrict<To, From>) return from;
    else {
        using UnderlyingType = decltype(std::declval<To>().x);
        auto to              = To {};
        to.x                 = as<UnderlyingType>(from.x, location);
        to.y                 = as<UnderlyingType>(from.y, location);

        if constexpr (math::meta::IsVector3Like<To> and math::meta::IsVector3Like<From>)
            to.z = as<UnderlyingType>(from.z, location);
        else if constexpr (math::meta::IsVector4Like<To> and math::meta::IsVector4Like<From>)
            to.w = as<UnderlyingType>(from.w, location);

        return to;
    }
}

/////////////////////////////////////
/////////////////////////////////////
// ASCASTER_DEFINE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsExtent) {
//     using UnderlyingType = decltype(std::declval<To>().x);
//     auto to              = To {};
//     to.x                 = as<UnderlyingType>(from.width, location);
//     to.y                 = as<UnderlyingType>(from.height, location);

//    if constexpr (math::meta::IsVector3Like<To> and math::meta::IsExtent3<From>)
//        to.z = as<UnderlyingType>(from.depth, location);

//    return to;
// }

/////////////////////////////////////
/////////////////////////////////////
// ASCASTER_DEFINE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsExtent) {
//     if constexpr (stormkit::meta::IsStrict<To, From>) return from;
//     else {
//         using UnderlyingType = decltype(std::declval<To>().width);
//         auto to              = To {};
//         to.width             = as<UnderlyingType>(from.width, location);
//         to.height            = as<UnderlyingType>(from.height, location);

//    if constexpr (math::meta::IsExtent3<To> and math::meta::IsExtent3<From>)
//        to.depth = as<UnderlyingType>(from.depth, location);

//    return to;
// }
// }

/////////////////////////////////////
/////////////////////////////////////
// ASCASTER_DEFINE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsVectorLike) {
//     using UnderlyingType = decltype(std::declval<To>().x);
//     auto to              = To {};
//     to.width             = as<UnderlyingType>(from.x, location);
//     to.height            = as<UnderlyingType>(from.y, location);

//    if constexpr (math::meta::IsExtent3<To> and math::meta::IsVector3Like<From>)
//        to.depth = as<UnderlyingType>(from.z, location);

//    return to;
// }

/////////////////////////////////////
/////////////////////////////////////
NARROWCASTER_DEFINE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsVectorLike) {
    if constexpr (stormkit::meta::IsStrict<To, From>) return from;
    else {
        using UnderlyingType = decltype(std::declval<To>().x);
        auto to              = To {};
        to.x                 = narrow<UnderlyingType>(from.x);
        to.y                 = narrow<UnderlyingType>(from.y);

        if constexpr (math::meta::IsVector3Like<To> and math::meta::IsVector3Like<From>)
            to.z = narrow<UnderlyingType>(from.z);
        else if constexpr (math::meta::IsVector4Like<To> and math::meta::IsVector4Like<From>)
            to.w = narrow<UnderlyingType>(from.w);

        return to;
    }
}

/////////////////////////////////////
/////////////////////////////////////
// NARROWCASTER_DEFINE(stormkit::math::meta::IsVectorLike, stormkit::math::meta::IsExtent) {
//     using UnderlyingType = decltype(std::declval<To>().x);
//     auto to              = To {};
//     to.x                 = narrow<UnderlyingType>(from.width);
//     to.y                 = narrow<UnderlyingType>(from.height);

//    if constexpr (math::meta::IsVector3Like<To> and math::meta::IsExtent3<From>)
//        to.z = narrow<UnderlyingType>(from.depth);

//    return to;
// }

/////////////////////////////////////
/////////////////////////////////////
// NARROWCASTER_DEFINE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsExtent) {
//     if constexpr (stormkit::meta::IsStrict<To, From>) return from;
//     else {
//         using UnderlyingType = decltype(std::declval<To>().x);
//         auto to              = To {};
//         to.width             = narrow<UnderlyingType>(from.width);
//         to.height            = narrow<UnderlyingType>(from.height);

//    if constexpr (math::meta::IsExtent3<To> and math::meta::IsExtent3<From>)
//        to.depth = narrow<UnderlyingType>(from.depth);

//    return to;
// }
// }

/////////////////////////////////////
/////////////////////////////////////
// NARROWCASTER_DEFINE(stormkit::math::meta::IsExtent, stormkit::math::meta::IsVectorLike) {
//     using UnderlyingType = decltype(std::declval<To>().x);
//     auto to              = To {};
//     to.width             = narrow<UnderlyingType>(from.x);
//     to.height            = narrow<UnderlyingType>(from.y);

//    if constexpr (math::meta::IsExtent3<To> and math::meta::IsVector3Like<From>)
//        to.depth = narrow<UnderlyingType>(from.z);

//    return to;
// }
