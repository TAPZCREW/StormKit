// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:string.operations;

import std;

import :utils.contract;
import :meta.traits;
import :meta.concepts;
import :typesafe.integer;
import :string.czstring;

namespace stdr = std::ranges;
namespace stdv = std::views;

export namespace stormkit { inline namespace core {
    [[nodiscard]]
    constexpr auto split(std::string_view string, std::string_view delim) noexcept
      -> std::vector<std::string_view>;
    [[nodiscard]]
    constexpr auto to_lower(std::string_view string) noexcept -> std::string;
    [[nodiscard]]
    constexpr auto to_upper(std::string_view string) noexcept -> std::string;
    [[nodiscard]]
    auto to_lower(std::string_view string, const std::locale& locale) noexcept -> std::string;
    [[nodiscard]]
    auto to_upper(std::string_view string, const std::locale& locale) noexcept -> std::string;

    [[nodiscard]]
    constexpr auto as_czstring(std::string_view value) noexcept -> CZString;

    [[nodiscard]]
    constexpr auto replace(std::string_view in,
                           std::string_view pattern,
                           std::string_view replacement) noexcept -> std::string;

    template<typename T>
    [[nodiscard]]
    constexpr auto as_string(T) noexcept -> std::string_view
      = delete;

    template<typename T>
    [[nodiscard]]
    constexpr auto to_string(T) noexcept -> std::string
      = delete;

    template<typename T>
    [[nodiscard]]
    constexpr auto from_string(std::string_view) noexcept -> T
      = delete;

    template<meta::IsIntegral T>
    [[nodiscard]]
    constexpr auto to_string(T value, int base = 10) noexcept
      -> std::expected<std::string, std::errc>;

    template<meta::IsFloatingPoint T>
    [[nodiscard]]
    auto to_string(T value, std::chars_format fmt = std::chars_format::general) noexcept
      -> std::expected<std::string, std::errc>;

    template<meta::IsIntegral T>
    [[nodiscard]]
    constexpr auto from_string(std::string_view data, int base = 10) noexcept
      -> std::expected<T, std::errc>;

    template<meta::IsFloatingPoint T>
    [[nodiscard]]
    auto from_string(std::string_view  data,
                     std::chars_format fmt = std::chars_format::general) noexcept
      -> std::expected<T, std::errc>;
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    STORMKIT_FORCE_INLINE
    constexpr auto to_upper(char c) -> char {
        if (c >= 'a' && c <= 'z') return c - 32;
        return c;
    }

    STORMKIT_FORCE_INLINE
    constexpr auto to_lower(char c) -> char {
        if (c >= 'A' && c <= 'Z') return c + 32;
        return c;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto split(std::string_view string, std::string_view delim) noexcept
      -> std::vector<std::string_view> {
        return std::string_view { string }
               | stdv::split(delim)
               | stdv::transform([](auto&& subrange) {
                     return std::string_view { stdr::cbegin(subrange), stdr::cend(subrange) };
                 })
               | stdr::to<std::vector>();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto to_lower(std::string_view string) noexcept -> std::string {
        auto result = std::string { string };
        for (auto& c : result) c = to_lower(c);
        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    inline auto to_lower(std::string_view string, const std::locale& locale) noexcept
      -> std::string {
        auto  result = std::string { string };
        auto& facet  = std::use_facet<std::ctype<typename std::string_view::value_type>>(locale);
        facet.tolower(&result[0], &result[0] + stdr::size(result));

        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto to_upper(std::string_view string) noexcept -> std::string {
        auto result = std::string { string };
        for (auto& c : result) c = to_upper(c);
        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    inline auto to_upper(std::string_view string, const std::locale& locale) noexcept
      -> std::string {
        auto  result = std::string { string };
        auto& facet  = std::use_facet<std::ctype<typename std::string_view::value_type>>(locale);
        facet.toupper(&result[0], &result[0] + stdr::size(result));

        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto as_czstring(std::string_view value) noexcept -> CZString {
        return stdr::data(value);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    inline constexpr auto replace(std::string_view in,
                                  std::string_view pattern,
                                  std::string_view replacement) noexcept -> std::string {
        return in
               | stdv::split(pattern)
               | stdv::transform([replacement](auto&& substr) noexcept {
                     auto out = std::string {};
                     out.reserve(stdr::size(replacement) + stdr::size(substr));
                     out += replacement;
                     out += std::string_view { stdr::cbegin(substr), stdr::cend(substr) };
                     return out;
                 })
               | stdv::join
               | stdv::drop(stdr::size(replacement))
               | stdr::to<std::string>();
    }

    template<meta::IsIntegral T>
    [[nodiscard]]
    constexpr auto to_string(T value, int base) noexcept -> std::expected<std::string, std::errc> {
        auto out = std::expected<std::string, std::errc> { std::in_place };
        out->resize(16);
        auto&& [ptr, errc] = std::to_chars(stdr::data(*out),
                                           stdr::data(*out) + stdr::size(*out),
                                           value,
                                           base);
        if (errc != std::errc {}) [[unlikely]]
            out = std::unexpected<std::errc> { std::in_place, std::move(errc) };
        else {
            const auto size = std::distance(stdr::data(*out), ptr);
            out->resize(size);
        }

        return out;
    }

    // TODO add an argument to customize string buffer size
    template<meta::IsFloatingPoint T>
    [[nodiscard]]
    auto to_string(T value, std::chars_format fmt) noexcept
      -> std::expected<std::string, std::errc> {
        auto out = std::expected<std::string, std::errc> { std::in_place };
        out->resize(16, '\0');

        auto&& [ptr, errc] = std::to_chars(stdr::data(*out),
                                           stdr::data(*out) + stdr::size(*out),
                                           value,
                                           fmt);
        if (errc != std::errc {}) [[unlikely]]
            out = std::unexpected<std::errc> { std::in_place, std::move(errc) };
        else {
            const auto size = std::distance(stdr::data(*out), ptr);
            out->resize(size);
        }

        return out;
    }

    template<meta::IsIntegral T>
    inline constexpr auto from_string(std::string_view data, int base) noexcept
      -> std::expected<T, std::errc> {
        auto value       = T {};
        auto&& [_, errc] = std::from_chars(stdr::data(data),
                                           stdr::data(data) + stdr::size(data),
                                           value,
                                           base);
        if (errc != std::errc {}) [[unlikely]]
            return std::unexpected<std::errc> { std::in_place, std::move(errc) };

        return std::expected<T, std::errc> { std::in_place, value };
    }

    template<meta::IsFloatingPoint T>
    inline auto from_string(std::string_view data, std::chars_format fmt) noexcept
      -> std::expected<T, std::errc> {
        auto value       = T {};
        auto&& [_, errc] = std::from_chars(stdr::data(data),
                                           stdr::data(data) + stdr::size(data),
                                           value,
                                           fmt);
        if (errc != std::errc {}) [[unlikely]]
            return std::unexpected<std::errc> { std::in_place, std::move(errc) };

        return std::expected<T, std::errc> { std::in_place, value };
    }
}} // namespace stormkit::core
