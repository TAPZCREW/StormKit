// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/hash_macro.hpp>

#include <stormkit/core/platform_macro.hpp>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.core:utils.color;

import std;

import :hash;
import :typesafe.integer;
import :math.arithmetic;
import :meta;

export {
    namespace stormkit { inline namespace core {
        constexpr auto color_component_as(u8 component) noexcept -> float;

        constexpr auto color_component_as(float component) noexcept -> u8;

        template<meta::IsColorComponent T>
        constexpr auto max_color_component_value() noexcept -> T;

        template<meta::IsColorComponent T>
        struct RGBColor {
            using ValueType  = T;
            using value_type = ValueType;

            constexpr RGBColor(ValueType red,
                               ValueType green,
                               ValueType blue,
                               ValueType alpha = max_color_component_value<ValueType>()) noexcept;

            constexpr explicit RGBColor(const math::Vector3<ValueType>& vector) noexcept;

            constexpr explicit RGBColor(const math::Vector4<ValueType>& vector) noexcept;

            constexpr RGBColor(const RGBColor<ValueType>& other) noexcept;
            constexpr auto operator=(const RGBColor<ValueType>& other) noexcept -> RGBColor&;

            constexpr RGBColor(RGBColor<ValueType>&& other) noexcept;
            constexpr auto operator=(RGBColor<ValueType>&& other) noexcept -> RGBColor&;

            template<meta::IsColorComponent U>
            constexpr RGBColor(const RGBColor<U>& other) noexcept;

            template<meta::IsColorComponent U>
            constexpr auto operator=(const RGBColor<U>& other) noexcept -> RGBColor&;

            constexpr auto toVector3() const noexcept -> math::Vector3<ValueType>;
            constexpr auto toVector4() const noexcept -> math::Vector4<ValueType>;

            constexpr operator math::Vector3<ValueType>() const noexcept;
            constexpr operator math::Vector4<ValueType>() const noexcept;
            constexpr operator std::array<ValueType, 4>() const noexcept;

            ValueType red;
            ValueType green;
            ValueType blue;
            ValueType alpha;
        };

        using RGBColorU = RGBColor<u8>;
        using RGBColorF = RGBColor<float>;

        /// This namespace contain preset colors, these colors are defined from [HTML 4.01
        /// colors](https://en.wikipedia.org/wiki/Web_colors#HTML_color_names).
        ///```
        /// | name        | red |green|blue |alpha|
        /// |-------------|-----|-----|-----|-----|
        /// | BLACK       | 0   | 0   | 0   | 255 |
        /// | Gray        | 127 | 127 | 127 | 255 |
        /// | SILVER      | 190 | 190 | 190 | 255 |
        /// | WHITE       | 255 | 255 | 255 | 255 |
        /// | Maroon      | 127 | 0   | 0   | 255 |
        /// | RED         | 255 | 0   | 0   | 255 |
        /// | Olive       | 127 | 127 | 0   | 255 |
        /// | YELLOW      | 255 | 255 | 0   | 255 |
        /// | GREEN       | 0   | 127 | 0   | 255 |
        /// | LIME        | 0   | 255 | 0   | 255 |
        /// | TEAL        | 0   | 127 | 127 | 255 |
        /// | AQUA        | 0   | 255 | 255 | 255 |
        /// | NAVY        | 0   | 0   | 127 | 255 |
        /// | BLUE        | 0   | 0   | 255 | 255 |
        /// | PURPLE      | 127 | 0   | 127 | 255 |
        /// | FUSCHIA     | 255 | 0   | 255 | 255 |
        /// | TRANSPARENT | 0   | 0   | 0   | 0   |
        ///```
        namespace RGBColorDef {
            template<meta::IsColorComponent T>
            inline constexpr auto BLACK = RGBColor<T> {
                T { 0 },
                T { 0 },
                T { 0 },
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto Gray = RGBColor<T> { max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto SILVER = RGBColor<T> {
                (max_color_component_value<T>() / T { 2 })
                  + (max_color_component_value<T>() / T { 4 }),
                (max_color_component_value<T>() / T { 2 })
                  + (max_color_component_value<T>() / T { 4 }),
                (max_color_component_value<T>() / T { 2 })
                  + (max_color_component_value<T>() / T { 4 }),
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto WHITE = RGBColor<T> {
                max_color_component_value<T>(),
                max_color_component_value<T>(),
                max_color_component_value<T>(),
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto Maroon = RGBColor<T> {
                max_color_component_value<T>() / T { 2 },
                T { 0 },
                T { 0 },
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto RED = RGBColor<T> { max_color_component_value<T>(),
                                                      T { 0 },
                                                      T { 0 },
                                                      max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto Olive = RGBColor<T> {
                max_color_component_value<T>() / T { 2 },
                max_color_component_value<T>() / T { 2 },
                T { 0 },
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto YELLOW = RGBColor<T> {
                max_color_component_value<T>(),
                max_color_component_value<T>(),
                T { 0 },
                max_color_component_value<T>()
            };
            template<meta::IsColorComponent T>
            inline constexpr auto GREEN = RGBColor<T> {
                T { 0 },
                max_color_component_value<T>() / T { 2 },
                T { 0 },
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto LIME = RGBColor<T> { T { 0 },
                                                       max_color_component_value<T>(),
                                                       T { 0 },
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto TEAL = RGBColor<T> { T { 0 },
                                                       max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto AQUA = RGBColor<T> { T { 0 },
                                                       max_color_component_value<T>(),
                                                       max_color_component_value<T>(),
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto NAVY = RGBColor<T> { T { 0 },
                                                       T { 0 },
                                                       max_color_component_value<T>() / T { 2 },
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto BLUE = RGBColor<T> { T { 0 },
                                                       T { 0 },
                                                       max_color_component_value<T>(),
                                                       max_color_component_value<T>() };

            template<meta::IsColorComponent T>
            inline constexpr auto PURPLE = RGBColor<T> {
                max_color_component_value<T>() / T { 2 },
                T { 0 },
                max_color_component_value<T>() / T { 2 },
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto Fuchsia = RGBColor<T> {
                max_color_component_value<T>(),
                T { 0 },
                max_color_component_value<T>(),
                max_color_component_value<T>()
            };

            template<meta::IsColorComponent T>
            inline constexpr auto TRANSPARENT = RGBColor<T> { T { 0 }, T { 0 }, T { 0 }, T { 0 } };
        } // namespace RGBColorDef
    }} // namespace stormkit::core

    TEMPLATED_HASH_EQUAL_FUNC(stormkit::core::RGBColor,
                              stormkit::meta::IsColorComponent,
                              T,
                              value.r,
                              value.g,
                              value.b,
                              value.a)
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto color_component_as(u8 component) noexcept -> float {
        return as<float>(component) / 255.f;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto color_component_as(float component) noexcept -> u8 {
        EXPECTS(component <= 1.f);
        return as<u8>(component * 255u);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr auto max_color_component_value() noexcept -> T {
        if constexpr (std::is_same_v<T, float>) return 1.f;

        return 255u;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::RGBColor(ValueType _red,
                                    ValueType _green,
                                    ValueType _blue,
                                    ValueType _alpha) noexcept
        : red { _red }, green { _green }, blue { _blue }, alpha { _alpha } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::RGBColor(const math::Vector3<ValueType>& vector) noexcept
        : red { vector.r }, green { vector.g }, blue { vector.b },
          alpha(max_color_component_value<T>()) {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::RGBColor(const math::Vector4<ValueType>& vector) noexcept
        : red { vector.r }, green { vector.g }, blue { vector.b }, alpha { vector.a } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::RGBColor(const RGBColor<ValueType>& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr auto RGBColor<T>::operator=(const RGBColor<ValueType>& other) noexcept
      -> RGBColor& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::RGBColor(RGBColor<ValueType>&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr auto RGBColor<T>::operator=(RGBColor<ValueType>&& other) noexcept
      -> RGBColor& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    template<meta::IsColorComponent U>
    constexpr RGBColor<T>::RGBColor(const RGBColor<U>& other) noexcept
        : red { color_component_as(other.red) }, green { color_component_as(other.green) },
          blue { color_component_as(other.blue) }, alpha { color_component_as(other.alpha) } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    template<meta::IsColorComponent U>
    constexpr auto RGBColor<T>::operator=(const RGBColor<U>& other) noexcept -> RGBColor& {
        red   = color_component_as(other.red);
        green = color_component_as(other.green);
        blue  = color_component_as(other.blue);
        alpha = color_component_as(other.alpha);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr auto RGBColor<T>::toVector3() const noexcept -> math::Vector3<ValueType> {
        return { red, green, blue };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr auto RGBColor<T>::toVector4() const noexcept -> math::Vector4<ValueType> {
        return { red, green, blue, alpha };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::operator math::Vector3<ValueType>() const noexcept {
        return toVector3();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::operator math::Vector4<ValueType>() const noexcept {
        return toVector4();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsColorComponent T>
    constexpr RGBColor<T>::operator std::array<ValueType, 4>() const noexcept {
        return { red, green, blue, alpha };
    }
}} // namespace stormkit::core
