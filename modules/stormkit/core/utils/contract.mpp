// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

#ifndef STORMKIT_ASSERT
    #define STORMKIT_ASSERT 1
#endif

export module stormkit.core:utils.contract;

import std;
import frozen;

import :console;
import :utils.stracktrace;
import :meta.concepts;

namespace stdr = std::ranges;

export namespace stormkit { inline namespace core {
    enum class AssertType {
        Assertion,
        PreCondition,
        PostCondition,
    };

    constexpr auto as_string(AssertType type) noexcept -> std::string_view;
    constexpr auto to_string(AssertType type) noexcept -> std::string;

    auto assert_base(bool             cond,
                     AssertType       type,
                     std::string_view message,
                     const std::source_location&
                       location = std::source_location::current()) noexcept -> void;

    consteval auto consteval_assert_base(bool             cond,
                                         AssertType       type,
                                         std::string_view message) noexcept -> void;

    constexpr auto assert(bool             cond,
                          std::string_view message,
                          const std::source_location&
                            location = std::source_location::current()) noexcept -> void;

    constexpr auto assert(bool cond,
                          const std::source_location&
                            location = std::source_location::current()) noexcept -> void;

    constexpr auto expects(bool             cond,
                           std::string_view message,
                           const std::source_location&
                             location = std::source_location::current()) noexcept -> void;

    constexpr auto expects(bool cond,
                           const std::source_location&
                             location = std::source_location::current()) noexcept -> void;

    constexpr auto ensures(bool             cond,
                           std::string_view message,
                           const std::source_location&
                             location = std::source_location::current()) noexcept -> void;

    constexpr auto ensures(bool cond,
                           const std::source_location&
                             location = std::source_location::current()) noexcept -> void;

    namespace casts::core {
        template<meta::IsStrictOneOf<std::string, std::string_view> To>
        [[nodiscard]]
        constexpr auto as(AssertType t) noexcept -> To;
    }
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

using namespace std::literals;
using namespace frozen::string_literals;

namespace stormkit { inline namespace core {
    namespace casts::core { namespace {
        constexpr auto
          AssertTypeToContractName = frozen::make_unordered_map<AssertType, frozen::string>({
            { AssertType::Assertion,     "Contract check"_s       },
            { AssertType::PreCondition,  "Pre condition check"_s  },
            { AssertType::PostCondition, "Post condition check"_s },
        });

    }} // namespace casts::core

    std::mutex mutex;

    struct StringLiteral {
        std::array<char, 512> buff;
        std::size_t           size;

        consteval auto view() noexcept -> std::string_view { return { std::data(buff), size }; }
    };

    auto constevalFailure(StringLiteral) -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_CONST
    constexpr auto as_string(AssertType type) noexcept -> std::string_view {
        const auto t = casts::core::AssertTypeToContractName.at(type);
        return { stdr::data(t), stdr::size(t) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_CONST
    constexpr auto to_string(AssertType type) noexcept -> std::string {
        const auto t = casts::core::AssertTypeToContractName.at(type);
        return { stdr::data(t), stdr::size(t) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    consteval auto generateConstevalMessage(AssertType type, std::string_view message) noexcept
      -> StringLiteral {
        auto       result = StringLiteral {};
        const auto str    = "[Assertion]"s + to_string(type) + ": " + std::string { message };
        std::ranges::copy(str, std::begin(result.buff));
        result.size = std::size(str);
        return result;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto assert_base(bool                        cond,
                            AssertType                  type,
                            std::string_view            message,
                            const std::source_location& location) noexcept -> void {
        if constexpr (STORMKIT_ASSERT == 1) {
            constexpr auto ASSERTION_PREFIX = ConsoleStyle {
                .fg        = ConsoleColor::BRIGHT_RED,
                .modifiers = StyleModifier::BOLD | StyleModifier::INVERSE
            } | "[Assertion]"s;
            if (not cond) [[unlikely]] {
                auto lock = std::unique_lock { mutex };
                std::println(get_stderr(),
                             "{} {} failed in \n"
                             "    > file:     {}:{}:{}\n"
                             "      function: {}\n"
                             "      reason:   {}",
                             ASSERTION_PREFIX,
                             to_string(type),
                             ConsoleStyle { .fg = ConsoleColor::GREEN } | location.file_name(),
                             ConsoleStyle { .fg = ConsoleColor::BLUE } | location.line(),
                             ConsoleStyle { .fg = ConsoleColor::BLUE } | location.column(),
                             ConsoleStyle { .fg = ConsoleColor::YELLOW } | location.function_name(),
                             ConsoleStyle { .fg        = ConsoleColor::RED,
                                            .modifiers = StyleModifier::BOLD }
                               | message);

                std::terminate();
            }
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    consteval auto consteval_assert_base(bool             cond,
                                         AssertType       type,
                                         std::string_view message) noexcept -> void {
        if (not cond) [[unlikely]] { constevalFailure(generateConstevalMessage(type, message)); }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto assert(bool                                         cond,
                          std::string_view                             message,
                          [[maybe_unused]] const std::source_location& location) noexcept -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            consteval_assert_base(cond, AssertType::Assertion, message);
        } else {
            assert_base(cond, AssertType::Assertion, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto assert(bool cond, const std::source_location& location) noexcept -> void {
        assert(cond, "", location);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto expects(bool                        cond,
                           std::string_view            message,
                           const std::source_location& location) noexcept -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            consteval_assert_base(cond, AssertType::PreCondition, message);
        } else {
            assert_base(cond, AssertType::PreCondition, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto expects(bool cond, const std::source_location& location) noexcept -> void {
        expects(cond, "", location);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto ensures(bool                        cond,
                           std::string_view            message,
                           const std::source_location& location) noexcept -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            consteval_assert_base(cond, AssertType::PostCondition, message);
        } else {
            assert_base(cond, AssertType::PostCondition, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    constexpr auto ensures(bool cond, const std::source_location& location) noexcept -> void {
        ensures(cond, "", location);
    }
}} // namespace stormkit::core
