// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/hash_macro.hpp>

#include <stormkit/core/memory_macro.hpp>

export module stormkit.core:meta.strong_type;

import std;

// import :hash;
import :typesafe.integer;

export {
    namespace stormkit { inline namespace core { namespace meta {
        class NamedTypeBase {};

        template<class T, class Tag> //, class... Skills>
        class NamedType final: public NamedTypeBase {
          public:
            using ElementType = T;
            using RefType     = NamedType<T&, Tag>;

            using underlying_type = ElementType;
            using reference_type  = RefType;

            constexpr NamedType() noexcept(std::is_nothrow_default_constructible_v<ElementType>);
            constexpr ~NamedType() noexcept(std::is_nothrow_destructible_v<ElementType>);

            template<class... Args>
            constexpr explicit(sizeof...(Args) == 1)
              NamedType(Args&&... args) noexcept(std::is_nothrow_constructible_v<ElementType,
                                                                                 Args...>)
                : m_value { std::forward<Args>(args)... } {}

            constexpr NamedType(const NamedType&) noexcept(std::is_nothrow_copy_constructible_v<
                                                           ElementType>);

            constexpr auto operator=(const NamedType&) noexcept(std::is_nothrow_copy_assignable_v<
                                                                ElementType>) -> NamedType&;

            constexpr NamedType(NamedType&&) noexcept(std::is_nothrow_move_constructible_v<
                                                      ElementType>);

            constexpr auto operator=(NamedType&&) noexcept(std::is_nothrow_move_assignable_v<
                                                           ElementType>) -> NamedType&;

            [[nodiscard]]
            constexpr auto get(this auto&& self) noexcept -> decltype(auto);

            [[nodiscard]]
            constexpr operator RefType() noexcept;

          private:
            ElementType m_value;
        };

        template<class T>
        concept IsNamedType = std::derived_from<T, NamedTypeBase>;

        template<class T, class... Args>
        constexpr auto makeNamed(Args&&... args) noexcept -> T;
    }}} // namespace stormkit::core::meta

    // CONSTRAINED_HASH_FUNC(stormkit::core::IsNamedType)
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core { namespace meta {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::NamedType() noexcept(std::is_nothrow_default_constructible_v<
                                                      ElementType>)
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::~NamedType() noexcept(std::is_nothrow_destructible_v<ElementType>)
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::
      NamedType(const NamedType&) noexcept(std::is_nothrow_copy_constructible_v<ElementType>)
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::
      operator=(const NamedType&) noexcept(std::is_nothrow_copy_assignable_v<ElementType>)
        -> NamedType& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::
      NamedType(NamedType&&) noexcept(std::is_nothrow_move_constructible_v<ElementType>)
      = default;

    // clang-format off
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::operator=(NamedType &&) noexcept(
        std::is_nothrow_move_assignable_v<ElementType>) -> NamedType & = default;

    // clang-format on

    // template<class T, class Tag>
    // template<class... Args>
    // constexpr NamedType<T, Tag>::NamedType(Args &&...args) noexcept(
    // std::is_nothrow_constructible_v<ElementType, Args...>)
    // : m_value { std::forward<Args>(args)... } {}

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::get(this auto&& self) noexcept -> decltype(auto) {
        return std::forward<decltype(self)>(self).m_value;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::operator RefType() noexcept {
        return RefType { get() };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class... Args>
    constexpr auto makeNamed(Args&&... args) noexcept -> decltype(auto) {
        return T { std::forward<Args>(args)... };
    }
}}} // namespace stormkit::core::meta
