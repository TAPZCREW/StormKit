// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/AsCastsMacro.hpp>
#include <stormkit/Core/FlagsMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Wsi;

import std;
import frozen;

import stormkit.core;

namespace stormkit::wsi {
    class WindowImpl;
}

export {
    namespace stormkit { namespace wsi {
        enum class WM {
            Win32,
            Wayland,
            X11,
            Android,
            macOS,
            iOS,
            tvOS,
            Switch,
        };

        using NativeHandle = void*;

        enum class Key : UInt8 {
            A = 0,
            B,
            C,
            D,
            E,
            F,
            G,
            H,
            I,
            J,
            K,
            L,
            M,
            N,
            O,
            P,
            Q,
            R,
            S,
            T,
            U,
            V,
            W,
            X,
            Y,
            Z,
            Num0,
            Num1,
            Num2,
            Num3,
            Num4,
            Num5,
            Num6,
            Num7,
            Num8,
            Num9,
            Escape,
            L_Control,
            L_Shift,
            L_Alt,
            L_System,
            R_Control,
            R_Shift,
            R_Alt,
            R_System,
            Menu,
            L_Bracket,
            R_Bracket,
            Semi_Colon,
            Comma,
            Period,
            Quote,
            Slash,
            Back_Slash,
            Tilde,
            Equal,
            Hyphen,
            Space,
            Enter,
            Back_Space,
            Tab,
            Page_Up,
            Page_Down,
            Begin,
            End,
            Home,
            Insert,
            Delete,
            Add,
            Substract,
            Multiply,
            Divide,
            Left,
            Right,
            Up,
            Down,
            Numpad0,
            Numpad1,
            Numpad2,
            Numpad3,
            Numpad4,
            Numpad5,
            Numpad6,
            Numpad7,
            Numpad8,
            Numpad9,
            F1,
            F2,
            F3,
            F4,
            F5,
            F6,
            F7,
            F8,
            F9,
            F10,
            F11,
            F12,
            F13,
            F14,
            F15,
            Pause,
            KeyCount,
            Unknow = std::numeric_limits<Int8>::max(),
        };
        inline constexpr auto KEY_COUNT = as<Underlying>(Key::KeyCount);

        enum class MouseButton : UInt8 {
            Left,
            Right,
            Middle,
            Button1,
            Button2,
            ButtonCount,
            Unknow = std::numeric_limits<Int8>::max(),
        };
        inline constexpr auto MOUSE_BUTTON_COUNT = as<Underlying>(MouseButton::ButtonCount);

        struct Monitor {
            enum class Flags {
                NONE = 0,
                Primary
            };

            Flags       flags = Flags::NONE;
            std::string name;

            std::vector<math::ExtentU> extents;

            void* handle = nullptr;

            [[nodiscard]] constexpr auto operator<=>(const Monitor& other) const noexcept
                -> std::strong_ordering;
        };

        enum class WindowStyle : UInt8 {
            TitleBar    = 0b1,
            Close       = TitleBar | 0b10,
            Minimizable = TitleBar | 0b100,
            Resizable   = TitleBar | 0b1000,
            All         = Resizable | Minimizable | Close
        };

        enum class EventType : UInt8 {
            NONE,
            Closed,
            Resized,
            Minimized,
            Maximized,
            KeyPressed,
            KeyReleased,
            MouseButtonPushed,
            MouseButtonReleased,
            MouseEntered,
            MouseExited,
            MouseMoved,
            LostFocus,
            GainedFocus,
        };

        struct NONEEventData {
            static constexpr auto TYPE = EventType::NONE;
        };

        struct ClosedEventData {
            static constexpr auto TYPE = EventType::Closed;
        };

        struct ResizedEventData {
            static constexpr auto TYPE = EventType::Resized;
            math::ExtentU         extent;
        };

        struct MinimizedEventData {
            static constexpr auto TYPE = EventType::Minimized;
        };

        struct MaximizedEventData {
            static constexpr auto TYPE = EventType::Maximized;
        };

        struct KeyPressedEventData {
            static constexpr auto TYPE = EventType::KeyPressed;
            Key                   key;
            char                  character;
        };

        struct KeyReleasedEventData {
            static constexpr auto TYPE = EventType::KeyReleased;
            Key                   key;
            char                  character;
        };

        struct MouseButtonPushedEventData {
            static constexpr auto TYPE = EventType::MouseButtonPushed;
            math::Vector2I        position;
            MouseButton           button;
        };

        struct MouseButtonReleasedEventData {
            static constexpr auto TYPE = EventType::MouseButtonReleased;
            math::Vector2I        position;
            MouseButton           button;
        };

        struct MouseEnteredEventData {
            static constexpr auto TYPE = EventType::MouseEntered;
        };

        struct MouseExitedEventData {
            static constexpr auto TYPE = EventType::MouseExited;
        };

        struct MouseMovedEventData {
            static constexpr auto TYPE = EventType::MouseMoved;
            math::Vector2I        position;
        };

        struct LostFocusEventData {
            static constexpr auto TYPE = EventType::LostFocus;
        };

        struct GainedFocusEventData {
            static constexpr auto TYPE = EventType::GainedFocus;
        };

        using EventData = std::variant<NONEEventData,
                                       ClosedEventData,
                                       ResizedEventData,
                                       MinimizedEventData,
                                       MaximizedEventData,
                                       KeyPressedEventData,
                                       KeyReleasedEventData,
                                       MouseButtonPushedEventData,
                                       MouseButtonReleasedEventData,
                                       MouseEnteredEventData,
                                       MouseExitedEventData,
                                       MouseMovedEventData,
                                       LostFocusEventData,
                                       GainedFocusEventData>;

        struct Event {
            EventType type = EventType::NONE;
            EventData data = NONEEventData {};
        };

        class STORMKIT_API Window {
          public:
            Window() noexcept;
            Window(std::string title, const math::ExtentU& size, WindowStyle style) noexcept;
            ~Window();

            Window(Window&&);
            auto operator=(Window&&) -> Window&;

            auto create(std::string title, const math::ExtentU& size, WindowStyle style) noexcept
                -> void;
            auto close() noexcept -> void;

            [[nodiscard]] auto pollEvent(Event& event) noexcept -> bool;
            [[nodiscard]] auto waitEvent(Event& event) noexcept -> bool;

            auto setTitle(std::string title) noexcept -> void;

            auto setFullscreenEnabled(bool fullscreen) noexcept -> void;

            auto setExtent(const math::ExtentU& extent) noexcept -> void;

            auto lockMouse() noexcept -> void;
            auto unlockMouse() noexcept -> void;
            auto hideMouse() noexcept -> void;

#ifdef STORMKIT_OS_MACOS
            [[nodiscard]] auto extent() const noexcept -> math::ExtentU;
#else
            [[nodiscard]] auto extent() const noexcept -> const math::ExtentU&;
#endif
            [[nodiscard]] auto title() const noexcept -> const std::string&;

            [[nodiscard]] auto isOpen() const noexcept -> bool;
            [[nodiscard]] auto visible() const noexcept -> bool;

            [[nodiscard]] auto nativeHandle() const noexcept -> NativeHandle;

            [[nodiscard]] auto mouseLocked() const noexcept -> bool;
            [[nodiscard]] auto fullscreen() const noexcept -> bool;

            auto               setKeyRepeatEnabled(bool enabled) noexcept -> void;
            [[nodiscard]] auto keyRepeatEnabled() const noexcept -> bool;

            auto setVirtualKeyboardVisible(bool visible) noexcept -> void;

            auto        setMousePosition(const math::Vector2I& position) noexcept -> void;
            static auto setMousePositionOnDesktop(const math::Vector2U& position) noexcept -> void;

            [[nodiscard]] static auto getMonitorSettings() -> std::vector<Monitor>;
            [[nodiscard]] static auto getPrimaryMonitorSettings() -> Monitor;

            [[nodiscard]] static auto wm() noexcept -> WM;

          private:
            using WindowImplPimpl = Pimpl<WindowImpl>;
            WindowImplPimpl m_impl;
        };

        STORMKIT_API auto parseArgs(std::span<const std::string_view> args) noexcept -> void;

        struct STORMKIT_API EventHandler {
            using Callback = std::function<void(const Event&)>;

            auto update(Window& window) -> void;

            auto setCallback(EventType event_type, Callback callback) -> void;
            auto setCallbacks(std::vector<std::pair<EventType, Callback>> callbacks) -> void;
            auto clearCallbacks(EventType event_type) -> void;

          private:
            HashMap<EventType, std::vector<Callback>> m_callback;
        };
    }} // namespace stormkit::wsi

    FLAG_ENUM(stormkit::wsi::Monitor::Flags)
    FLAG_ENUM(stormkit::wsi::WindowStyle)
    ASCASTER_STRICT_DECLARE(std::string, stormkit::wsi::Monitor)

    namespace std {
        template<class CharT>
        struct formatter<stormkit::wsi::Monitor, CharT> {
            template<class ParseContext>
            constexpr auto parse(ParseContext& ctx) noexcept {
                return ctx.begin();
            }

            template<class FormatContext>
            auto format(const stormkit::wsi::Monitor& data, FormatContext& ctx) const
                -> decltype(ctx.out()) {
                return std::format_to(ctx.out(), "{}", stormkit::as<std::string>(data));
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

ASCASTER_STRICT_DEFINE(std::string, stormkit::wsi::Monitor) {
    if (from.flags == stormkit::wsi::Monitor::Flags::NONE)
        return std::format("[Monitor: name = {}, extents = {}]", from.name, from.extents);

    return std::format("[Monitor: flags = {}, name = {}, extents = {}]",
                       from.flags,
                       from.name,
                       from.extents);
}

namespace stormkit { namespace wsi {
    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_INLINE constexpr auto Monitor::operator<=>(const Monitor& other) const noexcept
        -> std::strong_ordering {
        if (auto ret = flags <=> other.flags; ret != 0) return ret;

#ifdef STORMKIT_COMPILER_CLANG
        if (auto ret = name.compare(other.name); ret != 0) {
            if (ret < 0) return std::strong_ordering::less;
            else if (ret > 0)
                return std::strong_ordering::greater;
        }
#else
        if (auto ret = name <=> other.name; ret != 0) return ret;
#endif

        if (auto ret = std::size(extents) <=> std::size(other.extents); ret != 0) return ret;

        for (auto i : range(std::size(extents))) {
            if (auto ret = extents[i].width <=> other.extents[i].width; ret != 0) return ret;
            if (auto ret = extents[i].height <=> other.extents[i].height; ret != 0) return ret;
        }

        return std::strong_ordering::equal;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto EventHandler::update(Window& window) -> void {
        auto event = Event {};

        while (window.pollEvent(event)) {
            const auto event_type = event.type;

            if (m_callback.find(event_type) == std::ranges::cend(m_callback)) continue;

            for (auto&& callback : m_callback.at(event_type)) callback(event);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto EventHandler::setCallback(EventType event_type, Callback callback)
        -> void {
        m_callback[event_type].emplace_back(std::move(callback));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        EventHandler::setCallbacks(std::vector<std::pair<EventType, Callback>> callbacks) -> void {
        for (auto&& [event_type, callback] : callbacks)
            setCallback(event_type, std::move(callback));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto EventHandler::clearCallbacks(EventType event_type) -> void {
        m_callback[event_type].clear();
    }
}} // namespace stormkit::wsi
