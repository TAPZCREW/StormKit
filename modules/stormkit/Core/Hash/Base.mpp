// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.core:hash.base;

import std;

import :meta;

export namespace stormkit { inline namespace core {
    using Hash32 = std::uint32_t;
    using Hash64 = std::uint64_t;

    template<class T>
    concept HashValue = meta::IsOneOf<T, Hash32, Hash64>;

    template<HashValue OutputType = Hash32>
    constexpr auto hash_combine(auto&& value) -> OutputType;

    constexpr auto hash_combine(HashValue auto& hash, meta::IsHashable auto&& v) noexcept;

    constexpr auto hash_combine(HashValue auto& hash, std::ranges::range auto&& range) noexcept;

    template<typename... Args>
    constexpr auto hash_combine(HashValue auto& hash, Args&&... args) noexcept;
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    template<HashValue OutputType>
    constexpr auto hash_combine(auto&& value) -> OutputType {
        auto hash = OutputType { 0u };

        hash_combine(hash, std::forward<decltype(value)>(value));

        return hash;
    }

    constexpr auto hash_combine(HashValue auto& hash, meta::IsHashable auto&& value) noexcept {
        const auto hasher = std::hash<std::remove_cvref_t<decltype(value)>> {};
        hash ^= hasher(std::forward<decltype(value)>(value))
                + 0x9e3779b9
                + (hash << 6)
                + (hash >> 2);
    }

    constexpr auto hash_combine(HashValue auto& hash, std::ranges::range auto&& range) noexcept {
        for (auto&& value : range) hash_combine(hash, std::forward<decltype(value)>(value));
    }

    template<typename... Args>
    constexpr auto hash_combine(HashValue auto& hash, Args&&... args) noexcept {
        (hash_combine(hash, std::forward<Args>(args)), ...);
    }
}} // namespace stormkit::core
