// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/HashMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.core:typesafe.ref;

import std;

import :meta.concepts;
import :meta.traits;
import :utils.contrat;
import :typesafe.boolean;
import :hash.base;

export {
    namespace stormkit { inline namespace core {
        template<typename T>
        class [[nodiscard]] [[gsl::Pointer]] Ref {
          public:
            using ElementType   = T;
            using ReferenceType = ElementType&;
            using PointerType   = ElementType* const;

            // STL compatible
            using element_type = ElementType;
            using pointer      = PointerType;

            constexpr ~Ref() noexcept;

            constexpr Ref(const Ref&) noexcept;
            constexpr Ref(Ref&&) noexcept;

            constexpr auto operator=(const Ref&) noexcept -> Ref& = delete;
            constexpr auto operator=(Ref&&) noexcept -> Ref&;

            [[nodiscard]] constexpr auto get() const noexcept STORMKIT_LIFETIMEBOUND -> PointerType;
            [[nodiscard]] constexpr auto
                operator->() const noexcept STORMKIT_LIFETIMEBOUND->PointerType;
            [[nodiscard]] constexpr auto
                operator*() const noexcept STORMKIT_LIFETIMEBOUND->ReferenceType;

            constexpr explicit           operator bool() const noexcept;
            [[nodiscard]] constexpr auto has_value() const noexcept -> Boolean;

            // template<typename Self>
            // constexpr operator std::conditional_t<std::is_const_v<Self>, const T&, T&>(
            //     this Self&& self) noexcept;
            //
            // template<typename Self>
            // constexpr operator std::enable_if<not std::is_const_v<T>, Ref<const T>>(
            //     this Self&& self) noexcept;

            [[nodiscard]] constexpr operator ReferenceType() const noexcept STORMKIT_LIFETIMEBOUND;
            [[nodiscard]] constexpr operator PointerType() const noexcept STORMKIT_LIFETIMEBOUND;

            [[nodiscard]] constexpr auto operator==(std::nullptr_t) const noexcept;
            [[nodiscard]] constexpr auto operator<(std::nullptr_t) const noexcept;
            [[nodiscard]] constexpr auto operator<=(std::nullptr_t) const noexcept;
            [[nodiscard]] constexpr auto operator>(std::nullptr_t) const noexcept;
            [[nodiscard]] constexpr auto operator>=(std::nullptr_t) const noexcept;
            [[nodiscard]] constexpr auto operator<=>(std::nullptr_t) const noexcept
                -> std::compare_three_way_result_t<typename Ref<T>::PointerType,
                                                   typename Ref<T>::PointerType>
                requires std::three_way_comparable<typename Ref<T>::PointerType,
                                                   typename Ref<T>::PointerType>;

            template<typename U>
            [[nodiscard]] constexpr auto operator==(const Ref<U>&) const noexcept;
            template<typename U>
            [[nodiscard]] constexpr auto operator!=(const Ref<U>&) const noexcept;
            template<typename U>
            [[nodiscard]] constexpr auto operator<(const Ref<U>&) const noexcept;
            template<typename U>
            [[nodiscard]] constexpr auto operator<=(const Ref<U>&) const noexcept;
            template<typename U>
            [[nodiscard]] constexpr auto operator>(const Ref<U>&) const noexcept;
            template<typename U>
            [[nodiscard]] constexpr auto operator>=(const Ref<U>&) const noexcept;
            template<typename U>
                requires std::three_way_comparable<typename Ref<T>::PointerType,
                                                   typename Ref<U>::PointerType>
            [[nodiscard]] constexpr auto operator<=>(const Ref<U>& other) const noexcept
                -> std::compare_three_way_result_t<typename Ref<T>::PointerType,
                                                   typename Ref<U>::PointerType>;

          private:
            constexpr Ref(ReferenceType value STORMKIT_LIFETIMEBOUND) noexcept;
            constexpr Ref(PointerType value STORMKIT_LIFETIMEBOUND) noexcept;

            PointerType m_value;

            // template<typename U>
            template<meta::IsRawPointerOrLValueReference U>
            friend constexpr auto as_ref(U&& value) noexcept -> decltype(auto);

            // template<typename U>
            template<meta::IsRawPointerOrLValueReference U>
            friend constexpr auto as_ref_mut(U&& value) noexcept -> decltype(auto);

            // template<typename U>
            template<meta::IsRawPointerOrLValueReference U>
            friend constexpr auto as_ref_like(U&& value) noexcept -> decltype(auto);
        };

        template<typename T>
        using OptionalRef = std::optional<Ref<T>>;

        template<meta::IsRawPointerOrLValueReference T>
        [[nodiscard]] constexpr auto as_ref(T&& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        // template<typename T>
        template<meta::IsRawPointerOrLValueReference T>
        [[nodiscard]] constexpr auto as_ref_mut(T&& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        // template<typename T>
        template<meta::IsRawPointerOrLValueReference T>
        [[nodiscard]] constexpr auto as_ref_like(T&& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<template<typename, std::size_t> typename Out = std::array, typename... Args>
            requires(not std::ranges::range<Args> and ...)
        [[nodiscard]] constexpr auto as_refs(Args&&... args) noexcept -> decltype(auto);

        template<template<typename...> typename Out, typename... Args>
            requires(not std::ranges::range<Args> and ...)
        [[nodiscard]] constexpr auto to_refs(Args&&... args) noexcept -> decltype(auto);

        template<template<typename, std::size_t> typename Out = std::array, typename... Args>
            requires(not std::ranges::range<Args> and ...)
        [[nodiscard]] constexpr auto as_ref_muts(Args&&... args) noexcept -> decltype(auto);

        template<template<typename...> typename Out, typename... Args>
            requires(not std::ranges::range<Args> and ...)
        [[nodiscard]] constexpr auto to_ref_muts(Args&&... args) noexcept -> decltype(auto);

        template<template<typename...> class Out = std::vector, std::ranges::range T>
            requires(std::ranges::range<Out<typename T::value_type>>)
        [[nodiscard]] constexpr auto to_refs(const T& range) noexcept -> decltype(auto);

        template<template<typename...> class Out = std::vector, std::ranges::range T>
            requires(std::ranges::range<Out<typename T::value_type>>)
        [[nodiscard]] constexpr auto to_mut_refs(T& range) noexcept -> decltype(auto);
    }} // namespace stormkit::core

    namespace std {
        template<typename T>
        struct pointer_traits<stormkit::core::Ref<T>> {
            using pointer         = typename stormkit::core::Ref<T>::PointerType;
            using element_type    = typename stormkit::core::Ref<T>::ElementType;
            using difference_type = std::ptrdiff_t;
        };

        TEMPLATED_HASH_FUNC(Ref, typename, T, std::hash<const T*> {}(value))
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(ReferenceType value) noexcept : m_value { &value } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(PointerType value) noexcept : m_value { value } {
        core::expects(m_value != nullptr);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::~Ref() noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(const Ref&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(Ref&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator=(Ref&& other) noexcept -> Ref& {
        // TODO improve
        const_cast<meta::CanonicalType<Ref<T>::PointerType>&>(m_value) = other.m_value;
        return *this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::get() const noexcept -> PointerType {
        return m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator->() const noexcept -> PointerType {
        return get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator*() const noexcept -> ReferenceType {
        return *get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator bool() const noexcept {
        return m_value != nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::has_value() const noexcept -> Boolean {
        return operator bool();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator ReferenceType() const noexcept {
        return *m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator PointerType() const noexcept {
        return m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator==(std::nullptr_t) const noexcept {
        return !m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<(std::nullptr_t) const noexcept {
        return std::less<Ref<T>::pointer> {}(m_value, nullptr);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<=(std::nullptr_t) const noexcept {
        return !(nullptr < *this);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator>(std::nullptr_t) const noexcept {
        return nullptr < *this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator>=(std::nullptr_t) const noexcept {
        return !(*this < nullptr);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<=>(std::nullptr_t) const noexcept
        -> std::compare_three_way_result_t<typename Ref<T>::PointerType,
                                           typename Ref<T>::PointerType>
        requires std::three_way_comparable<typename Ref<T>::PointerType,
                                           typename Ref<T>::PointerType>

    {
        return std::compare_three_way {}(m_value, static_cast<typename Ref<T>::pointer>(nullptr));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator==(const Ref<U>& other) const noexcept {
        return m_value == other.value();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator!=(const Ref<U>& other) const noexcept {
        return m_value != other.value();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<(const Ref<U>& other) const noexcept {
        return std::less<std::common_type_t<Ref<T>::PointerType, typename Ref<U>::PointerType>> {}(
            m_value,
            other.m_value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<=(const Ref<U>& other) const noexcept {
        return !(other < *this);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator>(const Ref<U>& other) const noexcept {
        return other < *this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator>=(const Ref<U>& other) const noexcept {
        return !(*this < other);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    template<typename U>
        requires std::three_way_comparable<typename Ref<T>::PointerType,
                                           typename Ref<U>::PointerType>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator<=>(const Ref<U>& other) const noexcept
        -> std::compare_three_way_result_t<typename Ref<T>::PointerType,
                                           typename Ref<U>::PointerType> {
        return m_value <=> other.m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    // template<typename T>
    template<meta::IsRawPointerOrLValueReference T>
    STORMKIT_FORCE_INLINE constexpr auto as_ref(T&& value) noexcept -> decltype(auto) {
        using TValue = meta::CanonicalType<T>;
        if constexpr (meta::IsPointer<TValue>) {
            expects(value != nullptr);
            return Ref<const meta::ElementType<TValue>> { std::to_address(value) };
        } else if constexpr (meta::IsContainedSemantics<TValue>) {
            expects(value.operator bool());
            return Ref<const meta::UnderlyingType<TValue>> { &(value.operator*()) };
        } else {
            return Ref<const TValue> { &value };
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    // template<typename T>
    template<meta::IsRawPointerOrLValueReference T>
    STORMKIT_FORCE_INLINE constexpr auto as_ref_mut(T&& value) noexcept -> decltype(auto) {
        using TValue                    = std::remove_reference_t<T>;
        static constexpr auto error_msg = "as_ref_mut can't take a reference of a const object"sv;
        if constexpr (meta::IsPointer<TValue>) {
            using PointedType = meta::ElementType<TValue>;
            static_assert(meta::IsNotConst<PointedType>, error_msg);
            expects(value != nullptr);
            return Ref<meta::ElementType<TValue>> { std::to_address(value) };
        } else if constexpr (meta::IsContainedSemantics<TValue>) {
            using UnderlyingType = meta::UnderlyingType<TValue>;
            static_assert(meta::IsNotConst<UnderlyingType>, error_msg);
            expects(value.operator bool());
            return Ref<UnderlyingType> { &(value.operator*()) };
        } else {
            static_assert(meta::IsNotConst<TValue>, error_msg);
            return Ref<TValue> { &value };
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    // template<typename T>
    template<meta::IsRawPointerOrLValueReference T>
    STORMKIT_FORCE_INLINE constexpr auto as_ref_like(T&& value) noexcept -> decltype(auto) {
        using TValue = meta::CanonicalType<T>;
        if constexpr (meta::IsPointer<TValue>) {
            expects(value != nullptr);
            return Ref<meta::ElementType<TValue>> { std::to_address(value) };
        } else if constexpr (meta::IsContainedSemantics<T>) {
            expects(value.operator bool());
            return Ref<meta::UnderlyingType<TValue>> { &(value.operator*()) };
        } else {
            return Ref<TValue> { &value };
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename, std::size_t> typename Out = std::array, typename... Args>
        requires(not std::ranges::range<Args> and ...)
    STORMKIT_FORCE_INLINE constexpr auto as_refs(Args&&... args) noexcept -> decltype(auto) {
        return Out { as_ref(std::forward<Args>(args))... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> typename Out, typename... Args>
        requires(not std::ranges::range<Args> and ...)
    STORMKIT_FORCE_INLINE constexpr auto to_refs(Args&&... args) noexcept -> decltype(auto) {
        return Out { { as_ref(std::forward<Args>(args))... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename, std::size_t> typename Out = std::array, typename... Args>
        requires(not std::ranges::range<Args> and ...)
    STORMKIT_FORCE_INLINE constexpr auto as_ref_muts(Args&&... args) noexcept -> decltype(auto) {
        return Out { { as_ref_mut(std::forward<Args>(args))... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> typename Out, typename... Args>
        requires(not std::ranges::range<Args> and ...)
    STORMKIT_FORCE_INLINE constexpr auto to_ref_muts(Args&&... args) noexcept -> decltype(auto) {
        return Out { { as_ref_mut(std::forward<Args>(args))... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> class Out = std::vector, std::ranges::range T>
        requires(std::ranges::range<Out<typename T::value_type>>)
    STORMKIT_FORCE_INLINE constexpr auto to_refs(const T& range) noexcept -> decltype(auto) {
        return range
               | std::views::transform([]<class U>(U&& val) static noexcept -> decltype(auto) {
                     return as_ref(std::forward<U>(val));
                 })
               | std::ranges::to<Out>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> class Out = std::vector, std::ranges::range T>
        requires(std::ranges::range<Out<typename T::value_type>>)
    STORMKIT_FORCE_INLINE constexpr auto to_mut_refs(T& range) noexcept -> decltype(auto) {
        return range
               | std::views::transform([]<class U>(U&& val) static noexcept -> decltype(auto) {
                     return as_ref_mut(std::forward<U>(val));
                 })
               | std::ranges::to<Out>();
    }
}} // namespace stormkit::core
