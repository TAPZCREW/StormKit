// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/FormatMacro.hpp>

export module stormkit.core:string.format;

import std;
import magic_enum;

import :meta;
import :typesafe.integer;
import :typesafe.integer_casts;
import :utils.time;
import :utils.math;

template<stormkit::math::meta::IsExtentLike T>
using ExtentToArrayType
    = std::array<typename T::value_type, sizeof(typename T::value_type) / sizeof(std::byte)>;

export {
    namespace stormkit { inline namespace core { namespace meta {
        template<meta::IsEnumeration T>
        inline constexpr auto DISABLE_DEFAULT_FORMATTER_FOR_ENUM = false;
    }}} // namespace stormkit::core::meta

    FORMATTER_INHERIT_DECLARE(int, stormkit::meta::IsStrict<std::byte>)
    FORMATTER_INHERIT_DECLARE(float, stormkit::meta::IsStrict<stormkit::Secondf>)
    FORMATTER_DECLARE(stormkit::math::meta::IsVectorLike)
    FORMATTER_DECLARE(stormkit::math::meta::IsExtentLike)

    template<stormkit::meta::IsEnumeration T, typename CharT>
        requires(not stormkit::meta::DISABLE_DEFAULT_FORMATTER_FOR_ENUM<T>)
    struct std::formatter<T, CharT>: public std::formatter<basic_string_view<CharT>, CharT> {
        template<class FormatContext>
        auto format(const T& data, FormatContext& ctx) const -> decltype(ctx.out());
    };
} // namespace stormkit::core::meta

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

/////////////////////////////////////
/////////////////////////////////////
FORMATTER_INHERIT_DEFINE_FORMAT(stormkit::meta::IsStrict<std::byte>) {
    return formatter<int, CharT>::format(static_cast<int>(data), ctx);
}

/////////////////////////////////////
/////////////////////////////////////
FORMATTER_INHERIT_DEFINE_FORMAT(stormkit::meta::IsStrict<stormkit::Secondf>) {
    return formatter<float, CharT>::format(data.count(), ctx);
}

/////////////////////////////////////
/////////////////////////////////////
FORMATTER_DEFINE_FORMAT_AS_STRING(stormkit::math::meta::IsVectorLike)

/////////////////////////////////////
/////////////////////////////////////
FORMATTER_DEFINE_FORMAT_AS_STRING(stormkit::math::meta::IsExtentLike)

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::meta::IsEnumeration T, typename CharT>
    requires(not stormkit::meta::DISABLE_DEFAULT_FORMATTER_FOR_ENUM<T>)
template<class FormatContext>
auto std::formatter<T, CharT>::format(const T& data, FormatContext& ctx) const
    -> decltype(ctx.out()) {
    return formatter<basic_string_view<CharT>, CharT>::format(magic_enum::enum_name(data), ctx);
}
