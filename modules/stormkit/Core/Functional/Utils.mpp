// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.core:functional.utils;

import std;

import :meta;

namespace stormkit { inline namespace core { namespace details {
    struct EitherFunc {
        [[nodiscard]] static constexpr auto operator()(bool                  condition,
                                                       std::invocable auto&& true_,
                                                       std::invocable auto&& false_) noexcept
            -> decltype(false_());

        template<typename T>
            requires meta::IsOptionalType<meta::CanonicalType<T>>
        [[nodiscard]] static constexpr auto
            operator()(T&&                                                                optional,
                       std::invocable<typename meta::CanonicalType<T>::value_type> auto&& true_,
                       std::invocable auto&& false_) noexcept -> decltype(false_());
    };
}}} // namespace stormkit::core::details

export namespace stormkit { inline namespace core {
    inline constexpr auto either = details::EitherFunc {};

    template<auto Func, typename... Args>
    [[nodiscard]] constexpr auto bindFront(Args&&... args) noexcept -> decltype(auto);

    template<typename Func, typename... Args>
    [[nodiscard]] constexpr auto bindFront(Func&& func, Args&&... args) noexcept -> decltype(auto);

    template<typename Func, typename... Args>
    [[nodiscard]] constexpr auto bindBack(Func&& func, Args&&... args) noexcept -> decltype(auto);

    template<auto Func, typename... Args>
    [[nodiscard]] constexpr auto bindBack(Args&&... args) noexcept -> decltype(auto);
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    namespace details {
        /////////////////////////////////////
        /////////////////////////////////////
        STORMKIT_FORCE_INLINE constexpr auto
            EitherFunc::operator()(bool                  condition,
                                   std::invocable auto&& true_,
                                   std::invocable auto&& false_) noexcept -> decltype(false_()) {
            if (condition) return true_();
            return false_();
        }

        /////////////////////////////////////
        /////////////////////////////////////
        template<typename T>
            requires meta::IsOptionalType<meta::CanonicalType<T>>
        STORMKIT_FORCE_INLINE constexpr auto EitherFunc::operator()(
            T&&                                                                optional,
            std::invocable<typename meta::CanonicalType<T>::value_type> auto&& true_,
            std::invocable auto&& false_) noexcept -> decltype(false_()) {
            if (optional != std::nullopt) return true_(*std::forward<T>(optional));
            return false_();
        }
    } // namespace details

    /////////////////////////////////////
    /////////////////////////////////////
    template<auto Func, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto bindFront(Args&&... args) noexcept -> decltype(auto) {
        return std::bind_front<Func>(std::forward<Args>(args)...);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename Func, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto bindFront(Func&& func, Args&&... args) noexcept
        -> decltype(auto) {
        return std::bind_front(std::forward<Func>(func), std::forward<Args>(args)...);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<auto Func, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto bindBack(Args&&... args) noexcept -> decltype(auto) {
#if defined(__cpp_lib_bind_back) and __cpp_lib_bind_back >= 202306L
        return std::bind_back<Func>(std::forward<Args>(args)...);
#else
        using FuncType = decltype(Func);
        if constexpr (meta::IsPointer<FuncType> or std::is_member_pointer_v<FuncType>)
            static_assert(Func != nullptr);
        return
            [... bound_args(std::forward<Args>(args))]<typename Self, typename... CallArgs>(
                this Self&&,
                CallArgs&&... call_args) noexcept(std::is_nothrow_invocable_v<FuncType,
                                                                              CallArgs...,
                                                                              meta::ForwardLike<
                                                                                  Self,
                                                                                  meta::DecayType<
                                                                                      Args>>...>)
                -> decltype(auto) {
                return std::invoke(Func,
                                   std::forward<CallArgs>(call_args)...,
                                   std::forward_like<Self>(bound_args)...);
            };
#endif
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename Func, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto bindBack(Func&& func, Args&&... args) noexcept
        -> decltype(auto) {
        return std::bind_back(std::forward<Func>(func), std::forward<Args>(args)...);
    }
}} // namespace stormkit::core
