// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.core:meta.traits;

import std;

import :meta.concepts;

export namespace stormkit { inline namespace core { namespace meta {
    template<class T>
    using CanonicalType = std::remove_cvref_t<T>;

    template<auto value>
    using CanonicalTypeOf = CanonicalType<decltype(value)>;

    template<class T>
    using DecayType = std::decay_t<T>;

    template<class T>
    using RemoveIndirectionsType = std::remove_pointer_t<std::remove_reference_t<T>>;

    template<class T>
    using ElementType = typename std::pointer_traits<T>::element_type;

    template<class T>
    using PointerType = typename std::pointer_traits<T>::pointer;

    template<std::ranges::range Range>
    using IteratorType = decltype(std::cbegin(std::declval<Range>()));

    template<std::ranges::range Range>
    using SentinelType = decltype(std::cend(std::declval<Range>()));

    template<std::ranges::range Range>
    using RangeType = CanonicalType<decltype(*std::begin(std::declval<Range>()))>;

    template<IsArithmetic T, IsArithmetic V>
    constexpr auto is_greater() noexcept;

    template<IsArithmetic T, IsArithmetic V>
    using SafeNarrowHelperType = std::conditional_t<is_greater<T, V>(), T, V>;

    template<IsArithmetic T, IsArithmetic V>
    using SafeNarrowHelperOtherType = std::conditional_t<is_greater<T, V>(), V, T>;

    template<class T, typename U>
    struct ConstnessLikeTrait {
      private:
        using T1 = RemoveIndirectionsType<T>;
        using U1 = std::conditional_t<std::is_const_v<T1>, std::add_const_t<U>, U>;
        using U2 = std::conditional_t<std::is_volatile_v<T1>, std::add_volatile_t<U1>, U1>;

      public:
        using Type = U2;
    };

    template<class T, typename U>
    using ConstnessLike = ConstnessLikeTrait<T, U>::Type;

    template<class T, typename U>
    struct ForwardLikeTrait {
      private:
        using U1 = ConstnessLike<T, U>;
        using U2 = std::
            conditional_t<std::is_lvalue_reference_v<T>, std::add_lvalue_reference_t<U1>, U1>;
        using U3 = std::
            conditional_t<std::is_rvalue_reference_v<T>, std::add_rvalue_reference_t<U2>, U2>;

      public:
        using Type = U3;
    };

    template<class T, typename U>
    using ForwardLike = ForwardLikeTrait<T, U>::Type;

    template<typename... Ts>
    struct AlwaysTrue: std::false_type {};

    template<typename... Ts>
    struct AlwaysFalse: std::false_type {};

    template<typename T>
    using AddConst = const T;

    template <typename T>
    struct UnderlyingTypeTrait {
        using Type = T;
    };

    template <IsContainedSemantics T>
    struct UnderlyingTypeTrait<T> {
        using Type = typename T::value_type;
    };

    template <IsEnumeration T>
    struct UnderlyingTypeTrait<T> {
        using Type = std::underlying_type_t<T>;
    };

    template <typename T>
    using UnderlyingType = UnderlyingTypeTrait<T>::Type;
}}} // namespace stormkit::core::meta

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core { namespace meta {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<IsArithmetic T, IsArithmetic V>
    constexpr auto is_greater() noexcept {
        using Type = decltype(T {} + V {});

        return static_cast<Type>(std::numeric_limits<T>::max())
               > static_cast<Type>(std::numeric_limits<V>::max());
    }
}}} // namespace stormkit::core::meta
