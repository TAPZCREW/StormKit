// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.core:meta.algorithms;

import std;

import :meta.concepts;
import :meta.traits;

export namespace stormkit { inline namespace core { namespace meta {
    template<typename Predicate, template<typename...> class Variant, typename... Ts>
    constexpr auto variant_type_find_if(const Variant<Ts...>&, Predicate&& predicate) noexcept
        -> std::size_t;
}}} // namespace stormkit::core::meta

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core { namespace meta {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename... Ts, typename Predicate>
    STORMKIT_FORCE_INLINE constexpr auto variant_type_find_if_impl(Predicate&& predicate) noexcept
        -> std::size_t {
        auto found = std::variant_npos;
        [&]<std::size_t... Indices>(std::index_sequence<Indices...>) noexcept {
            if constexpr ((requires {
                              {
                                  std::forward<Predicate>(predicate)
                                      .template operator()<Indices, Ts>
                              } -> IsBooleanTestable;
                          } and ...))
                (((std::forward<Predicate>(predicate).template operator()<Indices, Ts>())
                  and (found = Indices, true))
                 or ...);
            else
                static_assert(false, "Type not found");
        }(std::index_sequence_for<Ts...>());
        return found;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename Predicate, template<typename...> class Variant, typename... Ts>
    STORMKIT_FORCE_INLINE constexpr auto variant_type_find_if(const Variant<Ts...>&,
                                                              Predicate&& predicate) noexcept
        -> std::size_t {
        return variant_type_find_if_impl<Ts...>(std::forward<Predicate>(predicate));
    }
}}} // namespace stormkit::core::meta
