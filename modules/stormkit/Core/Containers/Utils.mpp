// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.core:containers.utils;

import std;

import :meta;
import :typesafe.byte;

export namespace stormkit { inline namespace core {
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto merge(T& output, const U&... ranges) noexcept -> void;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto concat(const T& first, const U&... others) noexcept
        -> std::vector<meta::RangeType<T>>;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto move_and_merge(T& output, U&&... ranges) noexcept -> void;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto move_and_concat(T&& first, U&&... others) noexcept
        -> std::vector<meta::RangeType<T>>;

    template<class T, typename... Args>
        requires((meta::Is<T, Args> and ...)
                 or (std::convertible_to<T, Args> and ...)
                 or (std::constructible_from<T, Args> and ...))
    constexpr auto into_array(T&& first, Args&&... args) noexcept -> decltype(auto);

    template<class T, typename... Args>
        requires((meta::Is<T, Args> and ...)
                 or (std::convertible_to<T, Args> and ...)
                 or (std::constructible_from<T, Args> and ...))
    constexpr auto into_dyn_array(T&& first, Args&&... args) noexcept -> decltype(auto);

    template<std::ranges::range T>
    constexpr auto to_dyn_array(T&& range) noexcept -> decltype(auto);
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto merge(T& output, const U&... ranges) noexcept -> void {
        output.reserve(std::size(output) + (std::ranges::size(ranges) + ...));
        (std::ranges::copy(ranges, std::back_inserter(output)), ...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto concat(const T& first, const U&... others) noexcept
        -> std::vector<meta::RangeType<T>> {
        auto output = std::vector<meta::RangeType<T>> {};
        merge(output, first, others...);

        return output;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto move_and_merge(T& output, U&&... ranges) noexcept -> void {
        output.reserve(std::size(output) + (std::ranges::size(ranges) + ...));
        (std::ranges::move(std::forward<U>(ranges), std::back_inserter(output)), ...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto move_and_concat(T&& first, U&&... others) noexcept
        -> std::vector<meta::RangeType<T>> {
        auto output = std::vector<meta::RangeType<T>> {};
        move_and_merge(output, std::forward<T>(first), std::forward<U>(others)...);

        return output;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, typename... Args>
        requires((meta::Is<T, Args> and ...)
                 or (std::convertible_to<T, Args> and ...)
                 or (std::constructible_from<T, Args> and ...))
    constexpr auto into_array(T&& first, Args&&... args) noexcept -> decltype(auto) {
        return std::array { std::forward<T>(first), static_cast<T>(std::forward<Args>(args))... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, typename... Args>
        requires((meta::Is<T, Args> and ...)
                 or (std::convertible_to<T, Args> and ...)
                 or (std::constructible_from<T, Args> and ...))
    constexpr auto into_dyn_array(T&& first, Args&&... args) noexcept -> decltype(auto) {
        return std::vector { std::forward<T>(first), static_cast<T>(std::forward<Args>(args))... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<std::ranges::range T>
    constexpr auto to_dyn_array(T&& range) noexcept -> decltype(auto) {
        return range | std::ranges::to<std::vector>();
    }
}} // namespace stormkit::core
