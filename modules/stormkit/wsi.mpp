// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/as_casts_macro.hpp>
#include <stormkit/core/flags_macro.hpp>
#include <stormkit/core/platform_macro.hpp>

export module stormkit.wsi;

import std;
import frozen;

import stormkit.core;

namespace stormkit::wsi {
    class WindowImpl;
}

export {
    namespace stormkit { namespace wsi {
        enum class WM {
            WIN32,
            WAYLAND,
            X11,
            ANDROID,
            MACOS,
            IOS,
            TVOS,
            SWITCH,
        };

        using NativeHandle = void*;

        enum class Key : u8 {
            A = 0,
            B,
            C,
            D,
            E,
            F,
            G,
            H,
            I,
            J,
            K,
            L,
            M,
            N,
            O,
            P,
            Q,
            R,
            S,
            T,
            U,
            V,
            W,
            X,
            Y,
            Z,
            NUM_0,
            NUM_1,
            NUM_2,
            NUM_3,
            NUM_4,
            NUM_5,
            NUM_6,
            NUM_7,
            NUM_8,
            NUM_9,
            ESCAPE,
            L_CONTROL,
            L_SHIFT,
            L_ALT,
            L_SYSTEM,
            R_CONTROL,
            R_SHIFT,
            R_ALT,
            R_SYSTEM,
            MENU,
            L_BRACKET,
            R_BRACKET,
            SEMI_COLON,
            COMMA,
            PERIOD,
            QUOTE,
            SLASH,
            BACK_SLASH,
            TILDE,
            EQUAL,
            HYPHEN,
            SPACE,
            ENTER,
            BACK_SPACE,
            TAB,
            PAGE_UP,
            PAGE_DOWN,
            BEGIN,
            END,
            HOME,
            INSERT,
            DELETE,
            ADD,
            SUBSTRACT,
            MULTIPLY,
            DIVIDE,
            LEFT,
            RIGHT,
            UP,
            DOWN,
            NUMPAD_0,
            NUMPAD_1,
            NUMPAD_2,
            NUMPAD_3,
            NUMPAD_4,
            NUMPAD_5,
            NUMPAD_6,
            NUMPAD_7,
            NUMPAD_8,
            NUMPAD_9,
            F1,
            F2,
            F3,
            F4,
            F5,
            F6,
            F7,
            F8,
            F9,
            F10,
            F11,
            F12,
            F13,
            F14,
            F15,
            PAUSE,
            KEY_COUNT,
            UNKNOWN = std::numeric_limits<i8>::max(),
        };
        inline constexpr auto KEY_COUNT = as<Underlying>(Key::KEY_COUNT);

        enum class MouseButton : u8 {
            LEFT,
            RIGHT,
            MIDDLE,
            BUTTON_1,
            BUTTON_2,
            BUTTON_COUNT,
            UNKNOWN = std::numeric_limits<i8>::max(),
        };
        inline constexpr auto MOUSE_BUTTON_COUNT = as<Underlying>(MouseButton::BUTTON_COUNT);

        struct Monitor {
            enum class Flags {
                NONE = 0,
                PRIMARY,
            };

            Flags       flags = Flags::NONE;
            std::string name;

            std::vector<math::Extent2<u32>> extents;

            void* handle = nullptr;

            [[nodiscard]]
            constexpr auto operator<=>(const Monitor& other) const noexcept -> std::strong_ordering;
        };

        enum class WindowStyle : u8 {
            TITLE_BAR   = 0b1,
            CLOSE       = TITLE_BAR | 0b10,
            MINIMIZABLE = TITLE_BAR | 0b100,
            RESIZEABLE  = TITLE_BAR | 0b1000,
            ALL         = RESIZEABLE | MINIMIZABLE | CLOSE,
        };

        enum class EventType : u8 {
            NONE,
            CLOSED,
            RESIZED,
            MINIMIZED,
            MAXIMIZED,
            KEY_PRESSED,
            KEY_RELEASED,
            MOUSE_BUTTON_PUSHED,
            MOUSE_BUTTON_RELEASED,
            MOUSE_ENTERED,
            MOUSE_EXITED,
            MOUSE_MOVED,
            LOST_FOCUS,
            GAINED_FOCUS,
        };

        struct NoneEventData {
            static constexpr auto TYPE = EventType::NONE;
        };

        struct ClosedEventData {
            static constexpr auto TYPE = EventType::CLOSED;
        };

        struct ResizedEventData {
            static constexpr auto TYPE = EventType::RESIZED;
            math::Extent2<u32>        extent;
        };

        struct MinimizedEventData {
            static constexpr auto TYPE = EventType::MINIMIZED;
        };

        struct MaximizedEventData {
            static constexpr auto TYPE = EventType::MAXIMIZED;
        };

        struct KeyPressedEventData {
            static constexpr auto TYPE = EventType::KEY_PRESSED;
            Key                   key;
            char                  character;
        };

        struct KeyReleasedEventData {
            static constexpr auto TYPE = EventType::KEY_RELEASED;
            Key                   key;
            char                  character;
        };

        struct MouseButtonPushedEventData {
            static constexpr auto TYPE = EventType::MOUSE_BUTTON_PUSHED;
            math::Vector2I        position;
            MouseButton           button;
        };

        struct MouseButtonReleasedEventData {
            static constexpr auto TYPE = EventType::MOUSE_BUTTON_RELEASED;
            math::Vector2I        position;
            MouseButton           button;
        };

        struct MouseEnteredEventData {
            static constexpr auto TYPE = EventType::MOUSE_ENTERED;
        };

        struct MouseExitedEventData {
            static constexpr auto TYPE = EventType::MOUSE_EXITED;
        };

        struct MouseMovedEventData {
            static constexpr auto TYPE = EventType::MOUSE_MOVED;
            math::Vector2I        position;
        };

        struct LostFocusEventData {
            static constexpr auto TYPE = EventType::LOST_FOCUS;
        };

        struct GainedFocusEventData {
            static constexpr auto TYPE = EventType::GAINED_FOCUS;
        };

        using EventData = std::variant<NoneEventData,
                                       ClosedEventData,
                                       ResizedEventData,
                                       MinimizedEventData,
                                       MaximizedEventData,
                                       KeyPressedEventData,
                                       KeyReleasedEventData,
                                       MouseButtonPushedEventData,
                                       MouseButtonReleasedEventData,
                                       MouseEnteredEventData,
                                       MouseExitedEventData,
                                       MouseMovedEventData,
                                       LostFocusEventData,
                                       GainedFocusEventData>;

        struct Event {
            EventType type = EventType::NONE;
            EventData data = NoneEventData {};
        };

        class STORMKIT_API Window {
          public:
            Window() noexcept;
            Window(std::string title, const math::Extent2<u32>& size, WindowStyle style) noexcept;
            ~Window();

            Window(Window&&);
            auto operator=(Window&&) -> Window&;

            auto create(std::string title, const math::Extent2<u32>& size, WindowStyle style) noexcept
              -> void;
            auto close() noexcept -> void;

            [[nodiscard]]
            auto poll_event(Event& event) noexcept -> bool;
            [[nodiscard]]
            auto wait_event(Event& event) noexcept -> bool;

            auto set_title(std::string title) noexcept -> void;

            auto toggle_fullscreen(bool fullscreen) noexcept -> void;

            auto set_extent(const math::Extent2<u32>& extent) noexcept -> void;

            auto lock_mouse() noexcept -> void;
            auto unlock_mouse() noexcept -> void;
            auto hide_mouse() noexcept -> void;

#ifdef STORMKIT_OS_MACOS
            [[nodiscard]]
            auto extent() const noexcept -> math::Extent2<u32>;
#else
            [[nodiscard]]
            auto extent() const noexcept -> const math::Extent2<u32>&;
#endif
            [[nodiscard]]
            auto title() const noexcept -> const std::string&;

            [[nodiscard]]
            auto is_open() const noexcept -> bool;
            [[nodiscard]]
            auto visible() const noexcept -> bool;

            [[nodiscard]]
            auto native_handle() const noexcept -> NativeHandle;

            [[nodiscard]]
            auto is_mouse_locked() const noexcept -> bool;
            [[nodiscard]]
            auto fullscreen() const noexcept -> bool;

            auto toggle_key_repeat(bool enabled) noexcept -> void;
            [[nodiscard]]
            auto is_key_repeat_enabled() const noexcept -> bool;

            auto toggle_virtual_keyboard_visibility(bool visible) noexcept -> void;

            auto        set_mouse_position(const math::Vector2I& position) noexcept -> void;
            static auto set_mouse_position_on_desktop(const math::Vector2U& position) noexcept
              -> void;

            [[nodiscard]]
            static auto get_monitor_settings() -> std::vector<Monitor>;
            [[nodiscard]]
            static auto get_primary_monitor_settings() -> Monitor;

            [[nodiscard]]
            static auto wm() noexcept -> WM;

          private:
            using WindowImplPimpl = Pimpl<WindowImpl>;
            WindowImplPimpl m_impl;
        };

        STORMKIT_API
        auto parse_args(std::span<const std::string_view> args) noexcept -> void;

        struct STORMKIT_API EventHandler {
            using Callback = std::function<void(const Event&)>;

            auto update(Window& window) -> void;

            auto set_callback(EventType event_type, Callback callback) -> void;
            auto set_callbacks(std::vector<std::pair<EventType, Callback>> callbacks) -> void;
            auto clear_callbacks(EventType event_type) -> void;

          private:
            HashMap<EventType, std::vector<Callback>> m_callback;
        };
    }} // namespace stormkit::wsi

    FLAG_ENUM(stormkit::wsi::Monitor::Flags)
    FLAG_ENUM(stormkit::wsi::WindowStyle)
    ASCASTER_STRICT_DECLARE(std::string, stormkit::wsi::Monitor)

    namespace std {
        template<class CharT>
        struct formatter<stormkit::wsi::Monitor, CharT> {
            template<class ParseContext>
            constexpr auto parse(ParseContext& ctx) noexcept {
                return ctx.begin();
            }

            template<class FormatContext>
            auto format(const stormkit::wsi::Monitor& data, FormatContext& ctx) const
              -> decltype(ctx.out()) {
                return std::format_to(ctx.out(), "{}", stormkit::as<std::string>(data));
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

ASCASTER_STRICT_DEFINE(std::string, stormkit::wsi::Monitor) {
    return std::format("[Monitor: flags = {}, name = {}, extents = {}]",
                       from.flags,
                       from.name,
                       from.extents);
}

namespace stormkit { namespace wsi {
    ////////////////////////////////////////
    ////////////////////////////////////////
    inline constexpr auto Monitor::operator<=>(const Monitor& other) const noexcept
      -> std::strong_ordering {
        if (auto ret = flags <=> other.flags; ret != 0) return ret;

#ifdef STORMKIT_COMPILER_CLANG
        if (auto ret = name.compare(other.name); ret != 0) {
            if (ret < 0) return std::strong_ordering::less;
            else if (ret > 0)
                return std::strong_ordering::greater;
        }
#else
        if (auto ret = name <=> other.name; ret != 0) return ret;
#endif

        if (auto ret = std::size(extents) <=> std::size(other.extents); ret != 0) return ret;

        for (auto i : range(std::size(extents))) {
            if (auto ret = extents[i].width <=> other.extents[i].width; ret != 0) return ret;
            if (auto ret = extents[i].height <=> other.extents[i].height; ret != 0) return ret;
        }

        return std::strong_ordering::equal;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto EventHandler::update(Window& window) -> void {
        auto event = Event {};

        while (window.poll_event(event)) {
            const auto event_type = event.type;

            if (m_callback.find(event_type) == std::ranges::cend(m_callback)) continue;

            for (auto&& callback : m_callback.at(event_type)) callback(event);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    auto EventHandler::set_callback(EventType event_type, Callback callback) -> void {
        m_callback[event_type].emplace_back(std::move(callback));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    auto EventHandler::set_callbacks(std::vector<std::pair<EventType, Callback>> callbacks)
      -> void {
        for (auto&& [event_type, callback] : callbacks)
            set_callback(event_type, std::move(callback));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    auto EventHandler::clear_callbacks(EventType event_type) -> void {
        m_callback[event_type].clear();
    }
}} // namespace stormkit::wsi
