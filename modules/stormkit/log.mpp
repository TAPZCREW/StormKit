// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/flags_macro.hpp>

#include <stormkit/core/platform_macro.hpp>

#include <stormkit/core/contract_macro.hpp>

export module stormkit.log;

import std;
import frozen;

import stormkit.core;

export {
    namespace stormkit::log {
        struct Module;
        enum class Severity {
            INFO = 1,
            WARNING,
            ERROR,
            FATAL,
            DEBUG,
        };

        [[nodiscard]]
        constexpr auto as_string(Severity severity) noexcept -> std::string_view;
        [[nodiscard]]
        constexpr auto to_string(Severity severity) noexcept -> std::string;

        class STORMKIT_API Logger {
          public:
            using LogClock = std::chrono::high_resolution_clock;

            explicit Logger(LogClock::time_point start) noexcept;
            Logger(LogClock::time_point start, Severity log_level) noexcept;
            virtual ~Logger() noexcept;

            virtual auto write(Severity severity, const Module& module, CZString string) noexcept
              -> void
              = 0;
            virtual auto flush() noexcept -> void = 0;

            auto set_log_level(Severity log_level) noexcept -> void;

            [[nodiscard]]
            auto start_time() const noexcept -> const LogClock::time_point&;
            [[nodiscard]]
            auto log_level() const noexcept -> const Severity&;

            template<class T, typename... Args>
            [[nodiscard]]
            static auto create_logger_instance(Args&&... param_args) noexcept -> T;

            template<class T, typename... Args>
            [[nodiscard]]
            static auto allocate_logger_instance(Args&&... param_args) noexcept -> Heap<T>;

            template<class... Args>
            static auto log(Severity         severity,
                            const Module&    module,
                            std::string_view format_string,
                            Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto log(Severity         severity,
                            std::string_view format_string,
                            Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto dlog(Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto ilog(Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto wlog(Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto elog(Args&&... param_args) noexcept -> void;

            template<class... Args>
            static auto flog(Args&&... param_args) noexcept -> void;

            [[nodiscard]]
            static auto has_logger() noexcept -> bool;
            [[nodiscard]]
            static auto instance() noexcept -> Logger&;

          protected:
            LogClock::time_point m_start_time;
            Severity             m_log_level;
        };

        struct Module {
            template<class... Args>
            auto dlog(Args&&... args) const noexcept -> void;

            template<class... Args>
            auto ilog(Args&&... args) const noexcept -> void;

            template<class... Args>
            auto wlog(Args&&... args) const noexcept -> void;

            template<class... Args>
            auto elog(Args&&... args) const noexcept -> void;

            template<class... Args>
            auto flog(Args&&... args) const noexcept -> void;

            auto flush() const noexcept -> void;

            std::string_view name = "";
        };

        template<ConstexprString str>
        [[nodiscard]]
        constexpr auto operator""_module() noexcept -> stormkit::log::Module;

        class STORMKIT_API
        FileLogger final: public Logger {
          public:
            FileLogger(LogClock::time_point start, std::filesystem::path path) noexcept;
            FileLogger(LogClock::time_point  start,
                       std::filesystem::path path,
                       Severity              log_level) noexcept;
            ~FileLogger() noexcept override;

            FileLogger(const FileLogger&) noexcept                    = delete;
            auto operator=(const FileLogger&) noexcept -> FileLogger& = delete;

            FileLogger(FileLogger&&) noexcept;
            auto operator=(FileLogger&&) noexcept -> FileLogger&;

            auto write(Severity severity, const Module& module, CZString string) noexcept
              -> void override;
            auto flush() noexcept -> void override;

          private:
            StringHashMap<std::ofstream> m_streams;

            std::filesystem::path m_base_path;
        };

        class STORMKIT_API
        ConsoleLogger final: public Logger {
          public:
            explicit ConsoleLogger(LogClock::time_point start) noexcept;
            ConsoleLogger(LogClock::time_point start, Severity log_level) noexcept;

            ConsoleLogger(const ConsoleLogger&) noexcept;
            auto operator=(const ConsoleLogger&) noexcept -> ConsoleLogger&;

            ConsoleLogger(ConsoleLogger&&) noexcept;
            auto operator=(ConsoleLogger&&) noexcept -> ConsoleLogger&;

            ~ConsoleLogger() noexcept override;

            auto write(Severity severity, const Module& module, CZString string) noexcept
              -> void override;
            auto flush() noexcept -> void override;
        };
    } // namespace stormkit::log

    DISABLE_DEFAULT_FORMATER_FOR_ENUM(stormkit::log::Severity)
    FLAG_ENUM(stormkit::log::Severity)

    namespace std {
        template<stormkit::meta::IsStrict<stormkit::log::Severity> T, class CharT>
        struct formatter<T, CharT>: formatter<basic_string_view<CharT>, CharT> {
            template<class FormatContext>
            auto format(T data, FormatContext& ctx) const noexcept -> decltype(ctx.out()) {
                return formatter<basic_string_view<CharT>,
                                 CharT>::format(stormkit::log::as_string(data), ctx);
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

using namespace std::literals;

namespace stormkit::log {
    namespace details { namespace {
        constexpr auto SEVERITY_TO_STRING = frozen::make_unordered_map<Severity, std::string_view>({
          { Severity::INFO,    "INFO"sv    },
          { Severity::WARNING, "WARNING"sv },
          { Severity::ERROR,   "ERROR"sv   },
          { Severity::FATAL,   "FATAL"sv   },
          { Severity::DEBUG,   "DEBUG"sv   }
        });
    }} // namespace details

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_PURE
    inline constexpr auto as_string(Severity severity) noexcept -> std::string_view {
        const auto it = details::SEVERITY_TO_STRING.find(severity);
        EXPECTS(it != std::ranges::cend(details::SEVERITY_TO_STRING));

        return it->second;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_PURE
    inline constexpr auto to_string(Severity severity) noexcept -> std::string {
        return std::string { as_string(severity) };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto Logger::set_log_level(Severity log_level) noexcept -> void {
        m_log_level = log_level;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_PURE
    inline auto Logger::start_time() const noexcept -> const LogClock::time_point& {
        return m_start_time;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE STORMKIT_PURE
    inline auto Logger::log_level() const noexcept -> const Severity& {
        return m_log_level;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, typename... Args>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    inline auto Logger::create_logger_instance(Args&&... param_args) noexcept -> T {
        static_assert(std::is_base_of<Logger, T>::value, "T must inherit Logger");

        auto time_point = LogClock::now();

        return T { std::move(time_point), std::forward<Args>(param_args)... };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, typename... Args>
    STORMKIT_FORCE_INLINE
    STORMKIT_PURE
    auto Logger::allocate_logger_instance(Args&&... param_args) noexcept -> Heap<T> {
        static_assert(std::is_base_of<Logger, T>::value, "T must inherit Logger");

        auto time_point = LogClock::now();

        return allocate(std::move(time_point), std::forward<Args>(param_args)...)
          .transform_error(core::monadic::assert("Failed to allocate logger instance"));
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    auto Logger::log(Severity         severity,
                     const Module&    m,
                     std::string_view format_string,
                     Args&&... param_args) noexcept -> void {
        EXPECTS(has_logger());

        const auto format        = format_string;
        auto       memory_buffer = std::string {};
        memory_buffer.reserve(std::size(format_string));
        std::vformat_to(std::back_inserter(memory_buffer),
                        format,
                        std::make_format_args(param_args...));

        instance().write(severity, m, std::data(memory_buffer));
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline ConsoleLogger::ConsoleLogger(const ConsoleLogger&) noexcept
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto ConsoleLogger::operator=(const ConsoleLogger&) noexcept -> ConsoleLogger& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline ConsoleLogger::ConsoleLogger(ConsoleLogger&&) noexcept
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto ConsoleLogger::operator=(ConsoleLogger&&) noexcept -> ConsoleLogger& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline ConsoleLogger::~ConsoleLogger() noexcept
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline FileLogger::FileLogger(FileLogger&&) noexcept
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto FileLogger::operator=(FileLogger&&) noexcept -> FileLogger& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline FileLogger::~FileLogger() noexcept
      = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::log(Severity         severity,
                            std::string_view format_string,
                            Args&&... param_args) noexcept -> void {
        log(severity, Module {}, format_string, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::dlog(Args&&... param_args) noexcept -> void {
        log(Severity::DEBUG, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::ilog(Args&&... param_args) noexcept -> void {
        log(Severity::INFO, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::wlog(Args&&... param_args) noexcept -> void {
        log(Severity::WARNING, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::elog(Args&&... param_args) noexcept -> void {
        log(Severity::ERROR, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Logger::flog(Args&&... param_args) noexcept -> void {
        log(Severity::FATAL, std::forward<Args>(param_args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Module::dlog(Args&&... args) const noexcept -> void {
        Logger::dlog(*this, std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Module::ilog(Args&&... args) const noexcept -> void {
        Logger::ilog(*this, std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Module::wlog(Args&&... args) const noexcept -> void {
        Logger::wlog(*this, std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Module::elog(Args&&... args) const noexcept -> void {
        Logger::elog(*this, std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    STORMKIT_FORCE_INLINE
    inline auto Module::flog(Args&&... args) const noexcept -> void {
        Logger::flog(*this, std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto Module::flush() const noexcept -> void {
        Logger::instance().flush();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<ConstexprString str>
    STORMKIT_FORCE_INLINE
    STORMKIT_CONST
    inline constexpr auto operator""_module() noexcept -> stormkit::log::Module {
        return Module { str.view() };
    }
} // namespace stormkit::log
