// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Execution.RasterPipelineState;

import std;

import stormkit.core;
import stormkit.Gpu.Vulkan;

import :Core;
import :Resource;
import :Execution.Descriptors;

export namespace stormkit::gpu {
    struct VertexBindingDescription {
        UInt32          binding;
        UInt32          stride;
        VertexInputRate input_rate = VertexInputRate::Vertex;
    };

    struct VertexInputAttributeDescription {
        UInt32 location;
        UInt32 binding;
        Format format;
        UInt32 offset;
    };

    struct RasterPipelineVertexInputState {
        std::vector<VertexBindingDescription>        binding_descriptions;
        std::vector<VertexInputAttributeDescription> input_attribute_descriptions;
    };

    struct RasterPipelineInputAssemblyState {
        PrimitiveTopology topology                 = PrimitiveTopology::Triangle_List;
        bool              primitive_restart_enable = false;
    };

    struct RasterPipelineViewportState {
        std::vector<Viewport> viewports;
        std::vector<Scissor>  scissors;
    };

    struct RasterPipelineRasterizationState {
        bool         depth_clamp_enable        = false;
        bool         rasterizer_discard_enable = false;
        PolygonMode  polygon_mode              = PolygonMode::Fill;
        float        line_width                = 1;
        CullModeFlag cull_mode                 = CullModeFlag::Back;
        FrontFace    front_face                = FrontFace::Clockwise;
    };

    struct RasterPipelineMultiSampleState {
        bool            sample_shading_enable = false;
        SampleCountFlag rasterization_samples = SampleCountFlag::C1;
    };

    struct RasterPipelineColorBlendAttachmentState {
        ColorComponentFlag color_write_mask = ColorComponentFlag::RGBA;
        bool               blend_enable     = false;

        BlendFactor    src_color_blend_factor = BlendFactor::One;
        BlendFactor    dst_color_blend_factor = BlendFactor::Zero;
        BlendOperation color_blend_operation  = BlendOperation::Add;

        BlendFactor    src_alpha_blend_factor = BlendFactor::One;
        BlendFactor    dst_alpha_blend_factor = BlendFactor::Zero;
        BlendOperation alpha_blend_operation  = BlendOperation::Substract;
    };

    struct RasterPipelineColorBlendState {
        bool                                                 logic_operation_enable = false;
        LogicOperation                                       logic_operation = LogicOperation::Copy;
        std::vector<RasterPipelineColorBlendAttachmentState> attachments;
        std::array<float, 4> blend_constants = { 0.f, 0.f, 0.f, 0.f };
    };

    struct RasterPipelineDynamicState {
        std::vector<DynamicState> dynamics;
    };

    struct RasterPipelineShaderState {
        std::vector<Ref<const Shader>> shaders;
    };

    struct RasterPipelineDepthStencilState {
        bool depth_test_enable  = false;
        bool depth_write_enable = false;

        CompareOperation depth_compare_op = CompareOperation::Less;

        bool depth_bounds_test_enable = false;

        float min_depth_bounds = 0.f;
        float max_depth_bounds = 1.f;
    };

    struct RasterPipelineLayout {
        std::vector<Ref<const DescriptorSetLayout>> descriptor_set_layouts;
        std::vector<PushConstantRange>              push_constant_ranges;
    };

    struct RasterPipelineState {
        RasterPipelineInputAssemblyState input_assembly_state;
        RasterPipelineViewportState      viewport_state;
        RasterPipelineRasterizationState rasterization_state;
        RasterPipelineMultiSampleState   multisample_state;
        RasterPipelineColorBlendState    color_blend_state;
        RasterPipelineDynamicState       dynamic_state;
        RasterPipelineShaderState        shader_state;
        RasterPipelineVertexInputState   vertex_input_state;
        RasterPipelineDepthStencilState  depth_stencil_state;
    };
} // namespace stormkit::gpu
