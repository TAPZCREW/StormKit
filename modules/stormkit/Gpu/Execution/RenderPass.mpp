// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/HashMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Execution.RenderPass;

import std;

import stormkit.core;
import stormkit.Gpu.Vulkan;

import :Core;
import :Resource;

export {
    namespace stormkit::gpu {
        class RenderPass;

        class STORMKIT_API FrameBuffer {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::FrameBuffer;

            FrameBuffer(const Device&                     device,
                        const RenderPass&                 render_pass,
                        const math::ExtentU&              size,
                        std::vector<Ref<const ImageView>> attachments,
                        Tag);
            ~FrameBuffer();

            FrameBuffer(const FrameBuffer&)                    = delete;
            auto operator=(const FrameBuffer&) -> FrameBuffer& = delete;

            FrameBuffer(FrameBuffer&&) noexcept;
            auto operator=(FrameBuffer&&) noexcept -> FrameBuffer&;

            [[nodiscard]] static auto create(const Device&                     device,
                                             const RenderPass&                 render_pass,
                                             const math::ExtentU&              size,
                                             std::vector<Ref<const ImageView>> attachments) noexcept
                -> Expected<FrameBuffer>;
            [[nodiscard]] static auto
                allocate(const Device&                     device,
                         const RenderPass&                 render_pass,
                         const math::ExtentU&              size,
                         std::vector<Ref<const ImageView>> attachments) noexcept
                -> Expected<std::unique_ptr<FrameBuffer>>;

            [[nodiscard]] auto extent() const noexcept -> const math::ExtentU&;
            [[nodiscard]] auto attachments() const noexcept
                -> const std::vector<Ref<const ImageView>>&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Framebuffer&;

          private:
            math::ExtentU                     m_extent = { 0, 0 };
            std::vector<Ref<const ImageView>> m_attachments;

            DeferInit<vk::raii::Framebuffer> m_vk_framebuffer;
        };

        struct AttachmentDescription {
            PixelFormat     format;
            SampleCountFlag samples = SampleCountFlag::C1;

            AttachmentLoadOperation  load_op  = AttachmentLoadOperation::Clear;
            AttachmentStoreOperation store_op = AttachmentStoreOperation::Store;

            AttachmentLoadOperation  stencil_load_op  = AttachmentLoadOperation::Dont_Care;
            AttachmentStoreOperation stencil_store_op = AttachmentStoreOperation::Dont_Care;

            ImageLayout source_layout      = ImageLayout::Undefined;
            ImageLayout destination_layout = ImageLayout::Present_Src;

            bool resolve = false;
        };

        using AttachmentDescriptions = std::vector<AttachmentDescription>;

        struct Subpass {
            struct Ref {
                UInt32 attachment_id;

                ImageLayout layout = ImageLayout::Color_Attachment_Optimal;
            };

            PipelineBindPoint  bind_point;
            std::vector<Ref>   color_attachment_refs;
            std::vector<Ref>   resolve_attachment_refs;
            std::optional<Ref> depth_attachment_ref;
        };

        using Subpasses = std::vector<Subpass>;

        struct RenderPassDescription {
            AttachmentDescriptions attachments;
            Subpasses              subpasses;

            auto isCompatible(const RenderPassDescription& description) const noexcept -> bool;
        };

        class STORMKIT_API RenderPass {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Render_Pass;

            RenderPass(const Device& device, const RenderPassDescription& description, Tag);
            ~RenderPass();

            RenderPass(const RenderPass&)                    = delete;
            auto operator=(const RenderPass&) -> RenderPass& = delete;

            RenderPass(RenderPass&&) noexcept;
            auto operator=(RenderPass&&) noexcept -> RenderPass&;

            [[nodiscard]] static auto create(const Device&                device,
                                             const RenderPassDescription& description) noexcept
                -> Expected<RenderPass>;
            [[nodiscard]] static auto allocate(const Device&                device,
                                               const RenderPassDescription& description) noexcept
                -> Expected<std::unique_ptr<RenderPass>>;

            [[nodiscard]] auto
                createFrameBuffer(const Device&                     device,
                                  const math::ExtentU&              size,
                                  std::vector<Ref<const ImageView>> attachments) const noexcept
                -> Expected<FrameBuffer>;
            [[nodiscard]] auto
                allocateFrameBuffer(const Device&                     device,
                                    const math::ExtentU&              size,
                                    std::vector<Ref<const ImageView>> attachments) const noexcept
                -> Expected<std::unique_ptr<FrameBuffer>>;

            [[nodiscard]] auto isCompatible(const RenderPass& render_pass) const noexcept -> bool;
            [[nodiscard]] auto isCompatible(const RenderPassDescription& description) const noexcept
                -> bool;

            [[nodiscard]] auto description() const noexcept -> const RenderPassDescription&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::RenderPass&;

          private:
            auto doInitRenderPass(const Device& device) noexcept -> VulkanExpected<void>;

            RenderPassDescription m_description = {};

            DeferInit<vk::raii::RenderPass> m_vk_render_pass;
        };
    } // namespace stormkit::gpu

    HASH_FUNC(stormkit::gpu::AttachmentDescription,
              value.format,
              value.samples,
              value.load_op,
              value.store_op,
              value.stencil_load_op,
              value.stencil_store_op,
              value.source_layout,
              value.destination_layout,
              value.resolve)
    HASH_FUNC(stormkit::gpu::Subpass::Ref, value.attachment_id, value.layout)
    HASH_FUNC(stormkit::gpu::Subpass,
              value.bind_point,
              value.color_attachment_refs,
              value.depth_attachment_ref,
              value.resolve_attachment_refs)
    HASH_FUNC(stormkit::gpu::RenderPassDescription, value.attachments, value.subpasses)
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    FrameBuffer::FrameBuffer(const Device&                     device,
                             const RenderPass&                 render_pass,
                             const math::ExtentU&              extent,
                             std::vector<Ref<const ImageView>> attachments,
                             Tag)
        : m_extent { std::move(extent) }, m_attachments { std::move(attachments) } {
        const auto vk_attachments = m_attachments
                                    | std::views::transform(monadic::toVkHandle())
                                    | std::ranges::to<std::vector>();

        const auto create_info = vk::FramebufferCreateInfo {}
                                     .setRenderPass(toVkHandle(render_pass))
                                     .setAttachments(vk_attachments)
                                     .setWidth(m_extent.width)
                                     .setHeight(m_extent.height)
                                     .setLayers(1);

        device.vkHandle()
            .createFramebuffer(create_info)
            .transform(core:.monadic::set(m_vk_framebuffer))
            .transform_error(core:.monadic::map(core:.monadic::narrow<Result>(),
                                                core:.monadic::throw_as_exception()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE FrameBuffer::~FrameBuffer() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE FrameBuffer::FrameBuffer(FrameBuffer&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto FrameBuffer::operator=(FrameBuffer&& other) noexcept
        -> FrameBuffer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        FrameBuffer::create(const Device&                     device,
                            const RenderPass&                 render_pass,
                            const math::ExtentU&              size,
                            std::vector<Ref<const ImageView>> attachments) noexcept
        -> Expected<FrameBuffer> try {
        return FrameBuffer { device, render_pass, size, std::move(attachments), Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    ////////////////////////////////////p/
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        FrameBuffer::allocate(const Device&                     device,
                              const RenderPass&                 render_pass,
                              const math::ExtentU&              size,
                              std::vector<Ref<const ImageView>> attachments) noexcept
        -> Expected<std::unique_ptr<FrameBuffer>> try {
        return std::make_unique<FrameBuffer>(device,
                                             render_pass,
                                             size,
                                             std::move(attachments),
                                             Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto FrameBuffer::extent() const noexcept -> const math::ExtentU& {
        return m_extent;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto FrameBuffer::attachments() const noexcept
        -> const std::vector<Ref<const ImageView>>& {
        return m_attachments;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto FrameBuffer::vkHandle() const noexcept
        -> const vk::raii::Framebuffer& {
        return m_vk_framebuffer;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    RenderPass::RenderPass(const Device& device, const RenderPassDescription& description, Tag)
        : m_description { description } {
        doInitRenderPass(device).transform_error(
            core:.monadic::map(core:.monadic::narrow<Result>(), core:.monadic::throw_as_exception()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE RenderPass::~RenderPass() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE RenderPass::RenderPass(RenderPass&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto RenderPass::operator=(RenderPass&& other) noexcept
        -> RenderPass& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto RenderPass::create(const Device&                device,
                                                  const RenderPassDescription& description) noexcept
        -> Expected<RenderPass> try {
        return RenderPass { device, description, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    ////////////////////////////////////p/
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        RenderPass::allocate(const Device&                device,
                             const RenderPassDescription& description) noexcept
        -> Expected<std::unique_ptr<RenderPass>> try {
        return std::make_unique<RenderPass>(device, description, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        RenderPass::createFrameBuffer(const Device&                     device,
                                      const math::ExtentU&              extent,
                                      std::vector<Ref<const ImageView>> attachments) const noexcept
        -> Expected<FrameBuffer> {
        return FrameBuffer::create(device, *this, extent, std::move(attachments));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto RenderPass::allocateFrameBuffer(
        const Device&                     device,
        const math::ExtentU&              extent,
        std::vector<Ref<const ImageView>> attachments) const noexcept
        -> Expected<std::unique_ptr<FrameBuffer>> {
        return FrameBuffer::allocate(device, *this, extent, std::move(attachments));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        RenderPass::isCompatible(const RenderPass& render_pass) const noexcept -> bool {
        // TODO implement proper compatibility check
        // https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/chap7.html#renderpass-compatibility

        return &render_pass == this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto RenderPass::description() const noexcept
        -> const RenderPassDescription& {
        return m_description;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto RenderPass::vkHandle() const noexcept
        -> const vk::raii::RenderPass& {
        return m_vk_render_pass;
    }
} // namespace stormkit::gpu
