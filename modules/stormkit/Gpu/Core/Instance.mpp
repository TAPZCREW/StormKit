// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Gpu/Core/VulkanMacro.hpp>

export module stormkit.Gpu:Core.Instance;

import std;

import stormkit.core;
import stormkit.Wsi;
import stormkit.Gpu.Vulkan;

import :Core.Types;
import :Core.Device;

export {
    namespace stormkit::gpu {
        class PhysicalDevice;

        class STORMKIT_API Instance {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Instance;

            Instance(std::string app_name, bool verbose, Tag);
            ~Instance();

            Instance(const Instance&)                    = delete;
            auto operator=(const Instance&) -> Instance& = delete;

            Instance(Instance&&) noexcept;
            auto operator=(Instance&&) noexcept -> Instance&;

            [[nodiscard]] static auto create(std::string app_name = "",
                                             bool        verbose
                                             = (STORMKIT_BUILD_TYPE == "DEBUG")) noexcept
                -> Expected<Instance>;
            [[nodiscard]] static auto allocate(std::string app_name = "",
                                               bool        verbose
                                               = (STORMKIT_BUILD_TYPE == "DEBUG")) noexcept
                -> Expected<std::unique_ptr<Instance>>;

            [[nodiscard]] auto physicalDevices() const noexcept
                -> const std::vector<PhysicalDevice>&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Instance&;

            // #ifdef STORMKIT_WSI_ENABLED
            //[[nodiscard]] auto createWindowSurface(
            // const wsi::Window& window,
            // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
            //-> WindowSurface;
            //[[nodiscard]] auto allocateWindowSurface(
            // const wsi::Window& window,
            // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
            //-> std::unique_ptr<WindowSurface>;
            //[[nodiscard]] auto allocateRefCountedWindowSurface(
            // const wsi::Window& window,
            // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
            //-> std::shared_ptr<WindowSurface>;
            // #endif

            //[[nodiscard]] auto createOffscreenSurface(
            // const math::ExtentU& extent,
            // Surface::Buffering buffering = Surface::Buffering::Triple) const
            //-> OffscreenSurface;
            //[[nodiscard]] auto allocateOffscreenSurface(
            // const math::ExtentU& extent,
            // Surface::Buffering buffering = Surface::Buffering::Triple) const
            //-> std::unique_ptr<OffscreenSurface>;
            //[[nodiscard]] auto allocateRefCountedOffscreenSurface(
            // const math::ExtentU& extent,
            // Surface::Buffering buffering = Surface::Buffering::Triple) const
            //-> std::shared_ptr<OffscreenSurface>;

          private:
            auto doInitInstance() noexcept -> VulkanExpected<void>;
            auto doInitDebugReportCallback() noexcept -> VulkanExpected<void>;
            auto doRetrievePhysicalDevices() noexcept -> VulkanExpected<void>;

            std::string m_app_name;
            bool        m_validation_layers_enabled;

            DeferInit<vk::raii::Context>                m_vk_context;
            DeferInit<vk::raii::Instance>               m_vk_instance;
            DeferInit<vk::raii::DebugUtilsMessengerEXT> m_vk_messenger;

            std::vector<std::string>    m_extensions;
            std::vector<PhysicalDevice> m_physical_devices;
        };

        class STORMKIT_API PhysicalDevice {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Physical_Device;

            ~PhysicalDevice();

            PhysicalDevice(const PhysicalDevice&)                    = delete;
            auto operator=(const PhysicalDevice&) -> PhysicalDevice& = delete;

            PhysicalDevice(PhysicalDevice&&) noexcept;
            auto operator=(PhysicalDevice&&) noexcept -> PhysicalDevice&;

            [[nodiscard]] auto checkExtensionSupport(std::string_view extension) const noexcept
                -> bool;
            [[nodiscard]] auto
                checkExtensionSupport(std::span<const std::string_view> extensions) const noexcept
                -> bool;
            [[nodiscard]] auto
                checkExtensionSupport(std::span<const CZString> extensions) const noexcept -> bool;

            [[nodiscard]] auto info() const noexcept -> const PhysicalDeviceInfo&;
            [[nodiscard]] auto capabilities() const noexcept -> const RenderCapabilities&;
            [[nodiscard]] auto memoryProperties() const noexcept
                -> const std::vector<MemoryPropertyFlag>&;

            [[nodiscard]] auto queueFamilies() const noexcept -> const std::vector<QueueFamily>&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::PhysicalDevice&;

          private:
            explicit PhysicalDevice(vk::raii::PhysicalDevice physical_device);

            vk::raii::PhysicalDevice m_vk_physical_device;

            PhysicalDeviceInfo              m_device_info;
            RenderCapabilities              m_capabilities;
            std::vector<MemoryPropertyFlag> m_memory_properties;

            std::vector<QueueFamily>           m_queue_families;
            vk::PhysicalDeviceMemoryProperties m_vk_memory_properties;

            std::vector<std::string> m_extensions;

            friend class Instance;
        };

        class STORMKIT_API Surface {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Surface;

            Surface(const Instance& instance, const wsi::Window& window, Tag);
            // Surface(const Instance& instance, Tag);
            ~Surface();

            Surface(const Surface&)                    = delete;
            auto operator=(const Surface&) -> Surface& = delete;

            Surface(Surface&&) noexcept;
            auto operator=(Surface&&) noexcept -> Surface&;

            // [[nodiscard]] static auto createOffscreen(const Instance& instance) noexcept ->
            // Expected<Surface>;
            // [[nodiscard]] static auto
            //     allocateOffscreen(const Instance& instance) noexcept ->
            //     Expected<std::unique_ptr<Surface>>;

            [[nodiscard]] static auto createFromWindow(const Instance&    instance,
                                                       const wsi::Window& window) noexcept
                -> Expected<Surface>;
            [[nodiscard]] static auto allocateFromWindow(const Instance&    instance,
                                                         const wsi::Window& window) noexcept
                -> Expected<std::unique_ptr<Surface>>;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::SurfaceKHR&;

          private:
            DeferInit<vk::raii::SurfaceKHR> m_vk_surface;
        };
    } // namespace stormkit::gpu

    namespace std {
        template<class CharT>
        struct formatter<stormkit::gpu::PhysicalDevice, CharT> {
            template<class ParseContext>
            STORMKIT_FORCE_INLINE constexpr auto parse(ParseContext& ctx) -> decltype(auto) {
                return ctx.begin();
            }

            template<class FormatContext>
            STORMKIT_FORCE_INLINE auto format(const stormkit::gpu::PhysicalDevice& device,
                                              FormatContext& ctx) const -> decltype(auto) {
                auto&&      out  = ctx.out();
                const auto& info = device.info();
                return format_to(
                    out,
                    "[name: {}, vendor: {}, id: {}, vulkan: {}.{}.{}, driver version: {}.{}.{}]",
                    info.device_name,
                    info.vendor_name,
                    info.device_id,
                    info.api_major_version,
                    info.api_minor_version,
                    info.api_patch_version,
                    info.driver_major_version,
                    info.driver_minor_version,
                    info.driver_patch_version);
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::Instance(std::string app_name, bool enable_validation, Tag)
        : m_app_name { std::move(app_name) }, m_validation_layers_enabled { enable_validation } {
        doInitInstance()
            .and_then(bindFront(&Instance::doInitDebugReportCallback, this))
            .and_then(bindFront(&Instance::doRetrievePhysicalDevices, this))
            .transform_error(core:.monadic::map(core:.monadic::narrow<Result>(),
                                                core:.monadic::throw_as_exception()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::~Instance() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::Instance(Instance&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::operator=(Instance&& other) noexcept
        -> Instance& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::create(std::string app_name,
                                                bool        enable_validation) noexcept
        -> Expected<Instance> try {
        return Instance { std::move(app_name), enable_validation, Tag {} };
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::allocate(std::string app_name,
                                                  bool        enable_validation) noexcept
        -> Expected<std::unique_ptr<Instance>> try {
        return std::make_unique<Instance>(std::move(app_name), enable_validation, Tag {});
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::physicalDevices() const noexcept
        -> const std::vector<PhysicalDevice>& {
        return m_physical_devices;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::vkHandle() const noexcept -> const vk::raii::Instance& {
        return m_vk_instance;
    }

    // #ifdef STORMKIT_WSI_ENABLED
    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::createWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> WindowSurface {
    // return WindowSurface { window, instance(), buffering };
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> std::unique_ptr<WindowSurface> {
    // return std::make_unique<WindowSurface>(window, instance(), buffering);
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto
    // Instance::allocateRefCountedWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> std::shared_ptr<WindowSurface> {
    // return std::make_shared<WindowSurface>(window, instance(), buffering);
    // }
    // #endif

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::createOffscreenSurface(const math::ExtentU&
    // extent, Surface::Buffering buffering) const
    // -> OffscreenSurface {
    // return OffscreenSurface { extent, instance(), buffering };
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateOffscreenSurface(const math::ExtentU&
    // extent, Surface::Buffering buffering) const
    // -> std::unique_ptr<OffscreenSurface> {
    // return std::make_unique<OffscreenSurface>(extent, instance(), buffering);
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateRefCountedOffscreenSurface(
    // const math::ExtentU& extent,
    // Surface::Buffering buffering) const -> std::shared_ptr<OffscreenSurface> {
    // return std::make_shared<OffscreenSurface>(extent, instance(), buffering);
    // }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::info() const noexcept -> const PhysicalDeviceInfo& {
        return m_device_info;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::capabilities() const noexcept
        -> const RenderCapabilities& {
        return m_capabilities;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::memoryProperties() const noexcept
        -> const std::vector<MemoryPropertyFlag>& {
        return m_memory_properties;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::queueFamilies() const noexcept
        -> const std::vector<QueueFamily>& {
        return m_queue_families;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::vkHandle() const noexcept
        -> const vk::raii::PhysicalDevice& {
        return m_vk_physical_device;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Surface::~Surface() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Surface::Surface(Surface&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Surface::operator=(Surface&& other) noexcept -> Surface& = default;

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto
    //     Surface::createOffscreen(const Instance& instance) noexcept -> Expected<Surface> try {
    //     return Surface { instance, Tag {} };
    // } catch (const Result& result) { return std::unexpected(result); }
    //
    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Surface::allocateOffscreen(const Instance& instance) noexcept
    //     -> Expected<std::unique_ptr<Surface>> try {
    //     return std::make_unique<Surface>(instance, Tag {});
    // } catch (const Result& result) { return std::unexpected(result); }
    //

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Surface::createFromWindow(const Instance&    instance,
                                                         const wsi::Window& window) noexcept
        -> Expected<Surface> try {
        return Surface { instance, window, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Surface::allocateFromWindow(const Instance&    instance,
                                                           const wsi::Window& window) noexcept
        -> Expected<std::unique_ptr<Surface>> try {
        return std::make_unique<Surface>(instance, window, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Surface::vkHandle() const noexcept -> const vk::raii::SurfaceKHR& {
        return m_vk_surface.get();
    }

} // namespace stormkit::gpu
