// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#include <vulkan/vulkan_core.h>

export module stormkit.Gpu:Core.Device;

import std;

import stormkit.core;
import stormkit.Gpu.Vulkan;

import :Core.Types;

export namespace stormkit::gpu {
    class PhysicalDevice;
    class Instance;
    class Fence;
    class Semaphore;

    class STORMKIT_API Device {
        struct Tag {};

      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Device;

        struct QueueEntry {
            UInt32    id;
            UInt32    count;
            QueueFlag flags = QueueFlag {};
        };

        struct Info {
            bool enable_swapchain;
            bool enable_raytracing;
        };

        Device(const PhysicalDevice& physical_device,
               const Instance&       instance,
               const Info&           info,
               Tag);
        ~Device();

        Device(const Device&)                    = delete;
        auto operator=(const Device&) -> Device& = delete;

        Device(Device&&) noexcept;
        auto operator=(Device&&) noexcept -> Device&;

        [[nodiscard]] static auto create(const PhysicalDevice& physical_device,
                                         const Instance&       instance,
                                         const Info&           info = { true, false }) noexcept
            -> Expected<Device>;
        [[nodiscard]] static auto allocate(const PhysicalDevice& physical_device,
                                           const Instance&       instance,
                                           const Info&           info = { true, false }) noexcept
            -> Expected<std::unique_ptr<Device>>;

        auto waitIdle() const noexcept -> void;

        [[nodiscard]] auto waitForFences(std::span<const Ref<const Fence>> fences,
                                         bool                              wait_all = true,
                                         const std::chrono::milliseconds&  timeout
                                         = std::chrono::milliseconds::max()) const noexcept
            -> Expected<Result>;
        [[nodiscard]] auto waitForFence(const Fence&                     fence,
                                        const std::chrono::milliseconds& timeout
                                        = std::chrono::milliseconds::max()) const noexcept
            -> Expected<Result>;

        auto resetFences(std::span<const Ref<const Fence>> fences) const noexcept -> void;
        auto resetFence(const Fence& fence) const noexcept -> void;

        [[nodiscard]] auto rasterQueueEntry() const noexcept -> const QueueEntry&;
        [[nodiscard]] auto asyncTransferQueueEntry() const noexcept -> const QueueEntry&;
        [[nodiscard]] auto asyncComputeQueueEntry() const noexcept -> const QueueEntry&;

        [[nodiscard]] auto hasAsyncTransferQueue() const noexcept -> bool;
        [[nodiscard]] auto hasAsyncComputeQueue() const noexcept -> bool;

        [[nodiscard]] auto physicalDevice() const noexcept -> const PhysicalDevice&;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Device&;

        [[nodiscard]] auto vmaAllocator() const noexcept -> const vma::Allocator&;
        [[nodiscard]] auto vmaFunctionTable() const noexcept -> const vma::VulkanFunctions&;

        template<class T>
        auto setObjectName(const T& object, std::string_view name) const -> void;

        auto setObjectName(UInt64 object, DebugObjectType type, std::string_view name) const
            -> void;

      private:
        Ref<const PhysicalDevice> m_physical_device;

        DeferInit<vk::raii::Device> m_vk_device;

        QueueEntry                m_raster_queue;
        std::optional<QueueEntry> m_async_transfert_queue;
        std::optional<QueueEntry> m_async_compute_queue;

        vma::UniqueAllocator m_vma_allocator;
        vma::VulkanFunctions m_vma_function_table;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Device::~Device() {
        if (m_vk_device.initialized()) [[likely]]
            waitIdle();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Device::Device(Device&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::operator=(Device&& other) noexcept -> Device& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::create(const PhysicalDevice& physical_device,
                                              const Instance&       instance,
                                              const Info& info) noexcept -> Expected<Device> try {
        return Device { physical_device, instance, info, Tag {} };
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::allocate(const PhysicalDevice& physical_device,
                                                const Instance&       instance,
                                                const Info&           info) noexcept
        -> Expected<std::unique_ptr<Device>> try {
        return std::make_unique<Device>(physical_device, instance, info, Tag {});
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::waitIdle() const noexcept -> void {
        vkHandle().waitIdle();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Device::waitForFence(const Fence&                     fence,
                             const std::chrono::milliseconds& timeout) const noexcept
        -> Expected<Result> {
        return waitForFences(as_refs<std::array>(fence), true, timeout);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::resetFence(const Fence& fence) const noexcept -> void {
        resetFences(as_refs<std::array>(fence));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::rasterQueueEntry() const noexcept -> const QueueEntry& {
        return m_raster_queue;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::asyncTransferQueueEntry() const noexcept
        -> const QueueEntry& {
        expects(m_async_transfert_queue != std::nullopt);

        return *m_async_transfert_queue;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::asyncComputeQueueEntry() const noexcept
        -> const QueueEntry& {
        expects(m_async_compute_queue != std::nullopt);

        return *m_async_compute_queue;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::hasAsyncTransferQueue() const noexcept -> bool {
        return m_async_transfert_queue != std::nullopt;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::hasAsyncComputeQueue() const noexcept -> bool {
        return m_async_compute_queue != std::nullopt;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::physicalDevice() const noexcept -> const PhysicalDevice& {
        return m_physical_device;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::vkHandle() const noexcept -> const vk::raii::Device& {
        return m_vk_device;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::vmaAllocator() const noexcept -> const vma::Allocator& {
        expects(m_vma_allocator.operator bool());

        return *m_vma_allocator;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::vmaFunctionTable() const noexcept
        -> const vma::VulkanFunctions& {
        return m_vma_function_table;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE auto Device::setObjectName(const T& object, std::string_view name) const
        -> void {
        auto&& vk_object = toVkHandle(object);
        setObjectName(std::bit_cast<UInt64>(static_cast<const void*>(vk_object)),
                      T::DEBUG_TYPE,
                      name);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Device::setObjectName(UInt64           object,
                                                     DebugObjectType  type,
                                                     std::string_view name) const -> void {
        if (!vkHandle().getDispatcher()->vkSetDebugUtilsObjectNameEXT) return;

        const auto info = vk::DebugUtilsObjectNameInfoEXT {}
                              .setObjectType(narrow<vk::ObjectType>(type))
                              .setObjectHandle(object)
                              .setPObjectName(std::data(name));

        m_vk_device->setDebugUtilsObjectNameEXT(info);
    }
} // namespace stormkit::gpu
