// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Core.Sync;

import std;

import stormkit.core;
import stormkit.Gpu.Vulkan;

import :Core.Types;
import :Core.Device;

export namespace stormkit::gpu {
    class Device;

    class STORMKIT_API Fence {
        struct Tag {};

      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Fence;

        enum class Status {
            Signaled,
            Unsignaled
        };

        Fence(const Device& device, bool signaled, Tag);
        ~Fence();

        Fence(const Fence&)                    = delete;
        auto operator=(const Fence&) -> Fence& = delete;

        Fence(Fence&&) noexcept;
        auto operator=(Fence&&) noexcept -> Fence&;

        [[nodiscard]] static auto create(const Device& device, bool signaled = false) noexcept
            -> Expected<Fence>;
        [[nodiscard]] static auto createSignaled(const Device& device) noexcept -> Expected<Fence>;
        [[nodiscard]] static auto allocate(const Device& device, bool signaled = false) noexcept
            -> Expected<std::unique_ptr<Fence>>;
        [[nodiscard]] static auto allocateSignaled(const Device& device) noexcept
            -> Expected<std::unique_ptr<Fence>>;

        [[nodiscard]] auto wait(const std::chrono::milliseconds& wait_for
                                = std::chrono::milliseconds::max()) const -> Expected<Result>;
        auto               reset() -> void;

        [[nodiscard]] auto status() const noexcept -> Expected<Status>;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Fence&;

      private:
        DeferInit<vk::raii::Fence> m_vk_fence;
    };

    class STORMKIT_API Semaphore {
        struct Tag {};

      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Semaphore;

        Semaphore(const Device& device, Tag);
        ~Semaphore();

        Semaphore(const Semaphore&)                    = delete;
        auto operator=(const Semaphore&) -> Semaphore& = delete;

        Semaphore(Semaphore&&) noexcept;
        auto operator=(Semaphore&&) noexcept -> Semaphore&;

        [[nodiscard]] static auto create(const Device& device) noexcept -> Expected<Semaphore>;
        [[nodiscard]] static auto allocate(const Device& device) noexcept
            -> Expected<std::unique_ptr<Semaphore>>;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Semaphore&;

      private:
        DeferInit<vk::raii::Semaphore> m_vk_semaphore;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Fence::Fence(const Device& device, bool signaled, Tag) {
        const auto flags
            = (signaled) ? vk::FenceCreateFlagBits::eSignaled : vk::FenceCreateFlags {};

        const auto create_info = vk::FenceCreateInfo {}.setFlags(flags);

        device.vkHandle()
            .createFence(create_info)
            .transform(core:.monadic::set(m_vk_fence))
            .transform_error(core:.monadic::map(core:.monadic::narrow<Result>(),
                                                core:.monadic::throw_as_exception()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Fence::~Fence() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Fence::Fence(Fence&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::operator=(Fence&& other) noexcept -> Fence& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::status() const noexcept -> Expected<Status> {
        return vkCall(*m_vk_fence,
                      &vk::raii::Fence::getStatus,
                      {
                          { vk::Result::eSuccess, vk::Result::eNotReady }
        })
            .transform([](auto&& result) noexcept {
                if (result == vk::Result::eNotReady) return Status::Unsignaled;
                return Status::Signaled;
            })
            .transform_error(core:.monadic::narrow<Result>());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::create(const Device& device, bool signaled) noexcept
        -> Expected<Fence> try {
        return Fence { device, signaled, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::createSignaled(const Device& device) noexcept
        -> Expected<Fence> {
        return create(device, true);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::allocate(const Device& device, bool signaled) noexcept
        -> Expected<std::unique_ptr<Fence>> try {
        return std::make_unique<Fence>(device, signaled, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::allocateSignaled(const Device& device) noexcept
        -> Expected<std::unique_ptr<Fence>> {
        return allocate(device, true);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::wait(const std::chrono::milliseconds& wait_for) const
        -> Expected<Result> {
        const auto result = m_vk_fence->getDevice().waitForFences(
            std::array { *vkHandle() },
            true,
            std::chrono::duration_cast<std::chrono::nanoseconds>(wait_for).count());
        const auto possible_results = std::array { vk::Result::eSuccess, vk::Result::eNotReady };

        if (std::ranges::any_of(possible_results, core:.monadic::is(result))) [[likely]]
            return narrow<Result>(result);

        return std::unexpected { narrow<Result>(result) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::reset() -> void {
        m_vk_fence->getDevice().resetFences(std::array { *vkHandle() });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Fence::vkHandle() const noexcept -> const vk::raii::Fence& {
        return m_vk_fence.get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Semaphore::Semaphore(const Device& device, Tag) {
        const auto create_info = vk::SemaphoreCreateInfo {};

        device.vkHandle()
            .createSemaphore(create_info)
            .transform(core:.monadic::set(m_vk_semaphore))
            .transform_error(core:.monadic::map(core:.monadic::narrow<Result>(),
                                                core:.monadic::throw_as_exception()));
    };

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Semaphore::~Semaphore() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Semaphore::Semaphore(Semaphore&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Semaphore::operator=(Semaphore&& other) noexcept
        -> Semaphore& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Semaphore::create(const Device& device) noexcept
        -> Expected<Semaphore> try {
        return Semaphore { device, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Semaphore::allocate(const Device& device) noexcept
        -> Expected<std::unique_ptr<Semaphore>> try {
        return std::make_unique<Semaphore>(device, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Semaphore::vkHandle() const noexcept -> const vk::raii::Semaphore& {
        return m_vk_semaphore.get();
    }
} // namespace stormkit::gpu
